[
    {
        "file": "downloaded/docular/docular-master/docs/configuration/index.md",
        "handler": "markdown",
        "content": "#Configuration\n\nDocular has a small set of configuration options that you should be familiar with. When you configure docular, you\nare actually configuring the base 'group'. Each 'group' accepts the same parameters, but some are only respected\non the base group. \n\nDocular is also split up into plugins. The primary codebase is responsible for simply organizing and standardizing the documentation that is generated from the plugins. By default grunt-docular requires docular-ng-plugin, so we're going to list those plugin parameters below as well. \n\nAll plugin parameters are part of the group object, unless otherwise specified.\n\n##Docular parameters\n\nRequired parameters are in **bold**.\n\n| Param | default | description |\n|------|------|------|\n| analytics         | ```null``` | Information regarding your Google Analytics account. This should be an object with an ```account``` parameter containing your Google Analytics account. For example, \"UA_3838383\". |\n| angularModules    | ```empty array``` | Any extra modules that should be loaded by the Docular app. This isn't for examples - this is for the actual application load. Useful if you want to add plugins that add functionality to the core application |\n| baseUrl           | ```/``` | Where is the root for the documentation application? For example, if you were hosting docular's output on your site under '/docs', you would want to set this parameter to '/docs' to ensure that the app loads correctly. |\n| dependencies      | ```array of dependencies``` | An array of dependencies that will be loaded by Bower and copied into the application's library folder. Each dependency is an object that looks like ```{package: 'BowerPackageName', version: 'version', files: ['singleFileToCopy', ['fileSrc', 'fileDestWithinTheSavedir']], savedir: 'FolderInsideLibrariesWhereThisShouldBeSaved'}```. The dependencies you specify will be concatenated to the already existing dependency array. |\n| discussions       | ```null``` | Information regarding your disqus account for showing disqus discussions on each page. This should just be an object with a ```shortName``` parameter containing the shortened name of your site given to you by disqus.|\n| docular_webapp_target | ```null``` | Where should the documentation generated from Docular be stored? If not specified, this will store the documentation in the Docular node module, which is likely not what you want. |\n| files             | ```null``` | An array of files that need to be parsed. The best way of providing this is by setting this value to the return of ```grunt.file.expand```. For example, ```files: grunt.file.expand(['public/**/*.js', '!public/**/*.spec.js', '!public/**/lib/**/*.js'])```. That example would include all js files that do not end in .spec.js, and do not live in any folder called 'lib' |\n| groupIcon         | ```code``` | Pick an icon from the [Font Awesome icon library](http://fortawesome.github.io/Font-Awesome/icons/). Just use the part after the ```fa-```. For example, ```coffee```. Not ```fa-coffee```.|\n| **groupId**       | ```empty string``` | The ID of the group you have created. This should be unique, as it is used to help the program find documentation that is related to one another. |\n| groups            | ```empty array``` | An array of group objects that are children to this group object.|\n| groupTitle        | ```empty string``` | The title of the group you have created. Use a human-readable string |\n| javascript        | ```array of dependencies``` | If you need any extra javascript files added to the doc on load, set them here. They will be concatenated to the core Docular files |\n| languages         | ```array of default langauges``` | Specify additional languages from the [highlight.js](https://highlightjs.org/) library to be loaded if you have need. The defaults are css, scss, markdown, ruby, java, php, xml, sql, and bash. Any you add will be concatenated to the default list. |\n| plugins           | ```array``` | If you want to specify more plugins, set this to be an array containing the result from requiring the plugin. For example, ```plugins: [require('docular-ng-plugin')]```. By default, grunt-docular sets this to contain a reference to docular-ng-plugin and docular-markdown-plugin. If you override this parameter it is your responsibility to provide all plugins you deem necessary to generate your documentation. |\n| showAngularDocs   | ```false``` | Should Angular docs be included in the output? If you set this to ```true```, Docular will fetch the latest Angular from GitHub. If you set this to a version (i.e. ```1.2.15```), Docular will fetch that version and parse it for documentation. This way you can have the Angular docs of the version you are using with your API documentation. |\n| showDocularDocs   | ```false``` | Should Docular docs be included in the output? If so, they will be listed under a 'Docular' tab. |\n| useHtml5Mode      | ```false``` | Whether or not to use Angular's HTML5 mode. If you use this mode, you must have the proper hosting setup to serve html5 mode pages. Docular's grunt task comes with a simple server that will do this for you, but should not be considered production-ready.|\n\n##docular-ng-plugin parameters.\n\nRequired parameters are in **bold**.\n\n| Param | default | description |\n|------|------|------|\n| examples | ```object``` | This is a more complicated item. It should be an object with a few parameters, as listed below |\n| examples.angular | ```true``` | Should the angular that Docular is running be loaded into the example app? Specify as false if you are going to provide the angular code in another file loaded by an include. |\n| examples.autoBootstrap | ```true``` | Should the examples be auto-bootstrapped? This means that when the example loads, Angular will immediately try to run it. This will not likely work well if you also have requirejs dependencies. |\n| examples.include | ```object``` | Explained below |\n| examples.include.js | ```empty array``` | An array of javascript files that should be included in the examples. This is relative to the root of the docular application. For example, ```['./doc_files/start.js']```. This will cause the examples to load a file called ```start.js```.|\n| examples.include.css | ```empty array``` | Basically the exact same thing as ```examples.include.js```, except is meant for CSS files |\n\n##Notes on backwards compatibility with 0.6.x\n\n* The section key is read in as a group key.\n* The scripts and docs keys are read in and appended to the files key.\n* The docular_partial_* keys don't apply anymore. If you want to override a file, it's as simple as using a grunt copy task to copy a file from point A to point B. ",
        "groupId": 3,
        "path": "docular",
        "name": "Configuration",
        "id": "Configuration",
        "search": "#Configuration\n\nDocular has a small set of configuration options that you should be familiar with. When you configure docular, you\nare actually configuring the base 'group'. Each 'group' accepts the same parameters, but some are only respected\non the base group. \n\nDocular is also split up into plugins. The primary codebase is responsible for simply organizing and standardizing the documentation that is generated from the plugins. By default grunt-docular requires docular-ng-plugin, so we're going to list those plugin parameters below as well. \n\nAll plugin parameters are part of the group object, unless otherwise specified.\n\n##Docular parameters\n\nRequired parameters are in **bold**.\n\n| Param | default | description |\n|------|------|------|\n| analytics         | ```null``` | Information regarding your Google Analytics account. This should be an object with an ```account``` parameter containing your Google Analytics account. For example, \"UA_3838383\". |\n| angularModules    | ```empty array``` | Any extra modules that should be loaded by the Docular app. This isn't for examples - this is for the actual application load. Useful if you want to add plugins that add functionality to the core application |\n| baseUrl           | ```/``` | Where is the root for the documentation application? For example, if you were hosting docular's output on your site under '/docs', you would want to set this parameter to '/docs' to ensure that the app loads correctly. |\n| dependencies      | ```array of dependencies``` | An array of dependencies that will be loaded by Bower and copied into the application's library folder. Each dependency is an object that looks like ```{package: 'BowerPackageName', version: 'version', files: ['singleFileToCopy', ['fileSrc', 'fileDestWithinTheSavedir']], savedir: 'FolderInsideLibrariesWhereThisShouldBeSaved'}```. The dependencies you specify will be concatenated to the already existing dependency array. |\n| discussions       | ```null``` | Information regarding your disqus account for showing disqus discussions on each page. This should just be an object with a ```shortName``` parameter containing the shortened name of your site given to you by disqus.|\n| docular_webapp_target | ```null``` | Where should the documentation generated from Docular be stored? If not specified, this will store the documentation in the Docular node module, which is likely not what you want. |\n| files             | ```null``` | An array of files that need to be parsed. The best way of providing this is by setting this value to the return of ```grunt.file.expand```. For example, ```files: grunt.file.expand(['public/**/*.js', '!public/**/*.spec.js', '!public/**/lib/**/*.js'])```. That example would include all js files that do not end in .spec.js, and do not live in any folder called 'lib' |\n| groupIcon         | ```code``` | Pick an icon from the [Font Awesome icon library](http://fortawesome.github.io/Font-Awesome/icons/). Just use the part after the ```fa-```. For example, ```coffee```. Not ```fa-coffee```.|\n| **groupId**       | ```empty string``` | The ID of the group you have created. This should be unique, as it is used to help the program find documentation that is related to one another. |\n| groups            | ```empty array``` | An array of group objects that are children to this group object.|\n| groupTitle        | ```empty string``` | The title of the group you have created. Use a human-readable string |\n| javascript        | ```array of dependencies``` | If you need any extra javascript files added to the doc on load, set them here. They will be concatenated to the core Docular files |\n| languages         | ```array of default langauges``` | Specify additional languages from the [highlight.js](https://highlightjs.org/) library to be loaded if you have need. The defaults are css, scss, markdown, ruby, java, php, xml, sql, and bash. Any you add will be concatenated to the default list. |\n| plugins           | ```array``` | If you want to specify more plugins, set this to be an array containing the result from requiring the plugin. For example, ```plugins: [require('docular-ng-plugin')]```. By default, grunt-docular sets this to contain a reference to docular-ng-plugin and docular-markdown-plugin. If you override this parameter it is your responsibility to provide all plugins you deem necessary to generate your documentation. |\n| showAngularDocs   | ```false``` | Should Angular docs be included in the output? If you set this to ```true```, Docular will fetch the latest Angular from GitHub. If you set this to a version (i.e. ```1.2.15```), Docular will fetch that version and parse it for documentation. This way you can have the Angular docs of the version you are using with your API documentation. |\n| showDocularDocs   | ```false``` | Should Docular docs be included in the output? If so, they will be listed under a 'Docular' tab. |\n| useHtml5Mode      | ```false``` | Whether or not to use Angular's HTML5 mode. If you use this mode, you must have the proper hosting setup to serve html5 mode pages. Docular's grunt task comes with a simple server that will do this for you, but should not be considered production-ready.|\n\n##docular-ng-plugin parameters.\n\nRequired parameters are in **bold**.\n\n| Param | default | description |\n|------|------|------|\n| examples | ```object``` | This is a more complicated item. It should be an object with a few parameters, as listed below |\n| examples.angular | ```true``` | Should the angular that Docular is running be loaded into the example app? Specify as false if you are going to provide the angular code in another file loaded by an include. |\n| examples.autoBootstrap | ```true``` | Should the examples be auto-bootstrapped? This means that when the example loads, Angular will immediately try to run it. This will not likely work well if you also have requirejs dependencies. |\n| examples.include | ```object``` | Explained below |\n| examples.include.js | ```empty array``` | An array of javascript files that should be included in the examples. This is relative to the root of the docular application. For example, ```['./doc_files/start.js']```. This will cause the examples to load a file called ```start.js```.|\n| examples.include.css | ```empty array``` | Basically the exact same thing as ```examples.include.js```, except is meant for CSS files |\n\n##Notes on backwards compatibility with 0.6.x\n\n* The section key is read in as a group key.\n* The scripts and docs keys are read in and appended to the files key.\n* The docular_partial_* keys don't apply anymore. If you want to override a file, it's as simple as using a grunt copy task to copy a file from point A to point B. ",
        "sortOn": "Configuration",
        "left": 1,
        "level": 0,
        "root": "Configuration",
        "right": 2
    },
    {
        "file": "downloaded/docular/docular-master/docs/index.md",
        "handler": "markdown",
        "content": "#Docular docs\n",
        "groupId": 3,
        "path": "docular",
        "name": "Docular docs",
        "id": "Docular docs",
        "search": "#Docular docs\n",
        "sortOn": "Docular docs",
        "left": 1,
        "level": 0,
        "root": "Docular docs",
        "right": 2
    },
    {
        "file": "downloaded/docular/docular-master/docs/installation/index.md",
        "handler": "markdown",
        "content": "#Installation\r\n\r\nInstalling docular is fairly straightforward. The most likely way you will use docular is through its \r\n[grunt-docular](https://github.com/Vertafore/grunt-docular)\r\nplugin. There are few prerequisites that you must manually take care of. \r\n\r\n1. You need [Node.js](http://nodejs.org) installed. \r\n2. You need [Grunt](http://www.gruntjs.com) installed. \r\n3. You need to setup your package.json file.\r\n4. You need to setup your Gruntfile.js file.\r\n\r\n##Installing Node\r\n\r\nFor most systems, installing Node is straightforward. For Windows and Mac, there are prebuilt installers available\r\non the Node.js [download page](http://nodejs.org/download/). Most linux systems will install Node through their own \r\npackage system, though some do not bundle NPM (Node Package Manager) with the Node application. For instance, in Ubuntu\r\nyou need to run ```sudo apt-get install nodejs``` and then ```sudo apt-get install npm```. \r\n\r\n##Installing Grunt\r\n\r\nIn order to run Grunt via the command line, as you'll have to do in order to run the grunt-docular task, you will need\r\nto install the [grunt-cli](https://www.npmjs.org/package/grunt-cli) package. Since it's an executable, you need to \r\ninstall it with NPM globally. This is done by running ```npm install -g grunt-cli```. \r\n\r\n##Setting up your package.json file\r\n\r\nCurrent docular versions:\r\n* docular: [![NPM version](https://badge.fury.io/js/docular.svg)](http://badge.fury.io/js/docular)\r\n* grunt-docular: [![NPM version](https://badge.fury.io/js/grunt-docular.svg)](http://badge.fury.io/js/grunt-docular)\r\n\r\nIf you aren't familiar with what a package.json file is, you should probably [read through the docs](https://www.npmjs.org/doc/files/package.json.html).\r\nThe shorter version is that you will want a file setup like this:\r\n\r\n```js\r\n    {\r\n        \"name\": \"YourProjectName\",\r\n        \"version\": \"0.0.1\",\r\n        \"devDependencies\": {\r\n            \r\n        }\r\n    }\r\n```\r\n\r\nThe ```devDependencies``` key is the important one to note. Normally you'd add your dependencies in via the ```dependencies```\r\nkey. However, grunt-docular isn't something that your application requires to run. It is only necessary as a tool for\r\ndevelopment, hence the ```devDependencies```. \r\n\r\nInside of ```devDependencies```, add ```\"grunt\": \"~0.4.0\"``` and ```\"grunt-docular\": \"~TheVersionAbove\"```. In case you \r\naren't familiar, the tilde tells NPM to install a version that is \"reasonably close\" to the specified version. This \r\nwill ensure you get bugfixes, but shouldn't cause you to switch to minor or major releases.\r\n\r\nAfter you have those two items added to ```devDependencies```, run ```npm install```. This will spider through all of the\r\ndependencies and install them.\r\n\r\n##Setting up your Gruntfile.js\r\n\r\nSpecific configuration parameters can be found in the @{link configuration/index configuration docs}.\r\n\r\nSetting up your Gruntfile.js to look like the following:\r\n\r\n```js\r\n\r\nmodule.exports = function (grunt) {\r\n    grunt.initConfig({\r\n        docular: {\r\n            //We'll fill in this in a minute\r\n        }\r\n    });\r\n    \r\n    grunt.loadNpmTasks('grunt-docular');\r\n    \r\n}\r\n\r\n```\r\n\r\nNow that you've got that, we need to give Docular instructions on how to generate its files. First, let's tell it\r\nwhere to put the generated files by setting the ```docular_webapp_target``` directory to ```docs```. Then, lets have\r\nit show the angular docs by default by adding in the key ```showAngularDocs``` with the value of ```true```. Finally,\r\nwe want to give the site a title. Set the ```groupTitle``` key to the name of your site - for example \"My Docs\".\r\n\r\nNow, run ```grunt docular```. You should see some text fly by as Angular gets downloaded, parsed, and then generated \r\ninto documentation. This is great, but you need to actually be able to see it.\r\n\r\nThere are a couple options here. \r\n\r\n###Using grunt-docular's builtin server.\r\nOne of Docular's contributors added a small webserver to it called 'docularserver'. To make that work, \r\nadd the follwoing to your initConfig object:\r\n\r\n```js\r\ndocularserver: {\r\n    targetDir: 'docs',\r\n    port: 8888\r\n}\r\n```\r\n\r\nThen run ```grunt docularserver```. Voila - your documentation has been served.\r\n\r\n###Using a third party server\r\n\r\nYou could serve these files up with something like Apache.. or you can try serving them with another Grunt task.\r\n\r\nOne of the grunt file servers out there is called 'devserver'. To install, you add ```\"devserver\": \"*\"``` to your\r\n```devDependencies```, run ```npm install``` again, and add the following to your initConfig object: \r\n\r\n```js\r\ndevserver: {\r\n    docs: {\r\n        options: {\r\n            base: './docs',\r\n            port: 8888\r\n        }\r\n    }\r\n}\r\n```\r\nThis will allow you to run ```grunt devserver:docs```, which will serve up all the files on the machine's IP address\r\nand specified port. For example, [http://localhost:8888](http://localhost:8888). \r\n\r\n##Documentation generation for your code\r\n\r\nIn the ```docular``` section of the config, add a ```groups``` array. Inside of that array, we need a minimum of:\r\n\r\n* groupTitle - the title of this section of documentation... such as \"Site Controls\"\r\n* groupId - the ID that is to be used to keep groups organized and make it easier to find code that relates to one another.\r\nFor example, 'siteControls'. \r\n* files - a list of files that need to be parsed. The best way of providing this is by using ```grunt.file.expand```, \r\nwhich accepts a series of file filters. \r\n\r\nFor example:\r\n\r\n```js\r\n\r\nmodule.exports = function (grunt) {\r\n    grunt.initConfig({\r\n        docular: {\r\n            groupTitle: 'My documentation site',\r\n            groups: [\r\n                {\r\n                    groupTitle: 'Site Controls',\r\n                    groupId: 'siteControls',\r\n                    files: grunt.file.expand(['public/javascript/**/*.js'])\r\n                }\r\n            ]\r\n        }\r\n    });\r\n    \r\n    grunt.loadNpmTasks('grunt-docular');\r\n    \r\n}\r\n\r\n```\r\n\r\nRun ```grunt docular``` again, and you should see your documentation pop up on the site.",
        "groupId": 3,
        "path": "docular",
        "name": "Installation",
        "id": "Installation",
        "search": "#Installation\r\n\r\nInstalling docular is fairly straightforward. The most likely way you will use docular is through its \r\n[grunt-docular](https://github.com/Vertafore/grunt-docular)\r\nplugin. There are few prerequisites that you must manually take care of. \r\n\r\n1. You need [Node.js](http://nodejs.org) installed. \r\n2. You need [Grunt](http://www.gruntjs.com) installed. \r\n3. You need to setup your package.json file.\r\n4. You need to setup your Gruntfile.js file.\r\n\r\n##Installing Node\r\n\r\nFor most systems, installing Node is straightforward. For Windows and Mac, there are prebuilt installers available\r\non the Node.js [download page](http://nodejs.org/download/). Most linux systems will install Node through their own \r\npackage system, though some do not bundle NPM (Node Package Manager) with the Node application. For instance, in Ubuntu\r\nyou need to run ```sudo apt-get install nodejs``` and then ```sudo apt-get install npm```. \r\n\r\n##Installing Grunt\r\n\r\nIn order to run Grunt via the command line, as you'll have to do in order to run the grunt-docular task, you will need\r\nto install the [grunt-cli](https://www.npmjs.org/package/grunt-cli) package. Since it's an executable, you need to \r\ninstall it with NPM globally. This is done by running ```npm install -g grunt-cli```. \r\n\r\n##Setting up your package.json file\r\n\r\nCurrent docular versions:\r\n* docular: [![NPM version](https://badge.fury.io/js/docular.svg)](http://badge.fury.io/js/docular)\r\n* grunt-docular: [![NPM version](https://badge.fury.io/js/grunt-docular.svg)](http://badge.fury.io/js/grunt-docular)\r\n\r\nIf you aren't familiar with what a package.json file is, you should probably [read through the docs](https://www.npmjs.org/doc/files/package.json.html).\r\nThe shorter version is that you will want a file setup like this:\r\n\r\n```js\r\n    {\r\n        \"name\": \"YourProjectName\",\r\n        \"version\": \"0.0.1\",\r\n        \"devDependencies\": {\r\n            \r\n        }\r\n    }\r\n```\r\n\r\nThe ```devDependencies``` key is the important one to note. Normally you'd add your dependencies in via the ```dependencies```\r\nkey. However, grunt-docular isn't something that your application requires to run. It is only necessary as a tool for\r\ndevelopment, hence the ```devDependencies```. \r\n\r\nInside of ```devDependencies```, add ```\"grunt\": \"~0.4.0\"``` and ```\"grunt-docular\": \"~TheVersionAbove\"```. In case you \r\naren't familiar, the tilde tells NPM to install a version that is \"reasonably close\" to the specified version. This \r\nwill ensure you get bugfixes, but shouldn't cause you to switch to minor or major releases.\r\n\r\nAfter you have those two items added to ```devDependencies```, run ```npm install```. This will spider through all of the\r\ndependencies and install them.\r\n\r\n##Setting up your Gruntfile.js\r\n\r\nSpecific configuration parameters can be found in the @{link configuration/index configuration docs}.\r\n\r\nSetting up your Gruntfile.js to look like the following:\r\n\r\n```js\r\n\r\nmodule.exports = function (grunt) {\r\n    grunt.initConfig({\r\n        docular: {\r\n            //We'll fill in this in a minute\r\n        }\r\n    });\r\n    \r\n    grunt.loadNpmTasks('grunt-docular');\r\n    \r\n}\r\n\r\n```\r\n\r\nNow that you've got that, we need to give Docular instructions on how to generate its files. First, let's tell it\r\nwhere to put the generated files by setting the ```docular_webapp_target``` directory to ```docs```. Then, lets have\r\nit show the angular docs by default by adding in the key ```showAngularDocs``` with the value of ```true```. Finally,\r\nwe want to give the site a title. Set the ```groupTitle``` key to the name of your site - for example \"My Docs\".\r\n\r\nNow, run ```grunt docular```. You should see some text fly by as Angular gets downloaded, parsed, and then generated \r\ninto documentation. This is great, but you need to actually be able to see it.\r\n\r\nThere are a couple options here. \r\n\r\n###Using grunt-docular's builtin server.\r\nOne of Docular's contributors added a small webserver to it called 'docularserver'. To make that work, \r\nadd the follwoing to your initConfig object:\r\n\r\n```js\r\ndocularserver: {\r\n    targetDir: 'docs',\r\n    port: 8888\r\n}\r\n```\r\n\r\nThen run ```grunt docularserver```. Voila - your documentation has been served.\r\n\r\n###Using a third party server\r\n\r\nYou could serve these files up with something like Apache.. or you can try serving them with another Grunt task.\r\n\r\nOne of the grunt file servers out there is called 'devserver'. To install, you add ```\"devserver\": \"*\"``` to your\r\n```devDependencies```, run ```npm install``` again, and add the following to your initConfig object: \r\n\r\n```js\r\ndevserver: {\r\n    docs: {\r\n        options: {\r\n            base: './docs',\r\n            port: 8888\r\n        }\r\n    }\r\n}\r\n```\r\nThis will allow you to run ```grunt devserver:docs```, which will serve up all the files on the machine's IP address\r\nand specified port. For example, [http://localhost:8888](http://localhost:8888). \r\n\r\n##Documentation generation for your code\r\n\r\nIn the ```docular``` section of the config, add a ```groups``` array. Inside of that array, we need a minimum of:\r\n\r\n* groupTitle - the title of this section of documentation... such as \"Site Controls\"\r\n* groupId - the ID that is to be used to keep groups organized and make it easier to find code that relates to one another.\r\nFor example, 'siteControls'. \r\n* files - a list of files that need to be parsed. The best way of providing this is by using ```grunt.file.expand```, \r\nwhich accepts a series of file filters. \r\n\r\nFor example:\r\n\r\n```js\r\n\r\nmodule.exports = function (grunt) {\r\n    grunt.initConfig({\r\n        docular: {\r\n            groupTitle: 'My documentation site',\r\n            groups: [\r\n                {\r\n                    groupTitle: 'Site Controls',\r\n                    groupId: 'siteControls',\r\n                    files: grunt.file.expand(['public/javascript/**/*.js'])\r\n                }\r\n            ]\r\n        }\r\n    });\r\n    \r\n    grunt.loadNpmTasks('grunt-docular');\r\n    \r\n}\r\n\r\n```\r\n\r\nRun ```grunt docular``` again, and you should see your documentation pop up on the site.",
        "sortOn": "Installation",
        "left": 1,
        "level": 0,
        "root": "Installation",
        "right": 2
    },
    {
        "file": "downloaded/docular/docular-master/docs/plugins/index.md",
        "handler": "markdown",
        "content": "#Docular plugins\n\nThere are currently two officially available plugins for Docular. \n\n* [docular-ng-plugin](https://github.com/Vertafore/docular-ng-plugin)\n  This plugin gives Docular the ability to read and generate documentation for Angular type docs.\n* [docular-markdown-plugin](https://github.com/Vertafore/docular-markdown-plugin)\n  This plugin gives Docular the ability to create pages based off of simple markdown files.\n  \n##Creating a plugin\n\nThe plugin API has changed significantly since 0.6.x due to a strong desire to limit how much Docular has to call each plugin. Instead, it was desired that each plugin should listen for events emitted from Docular and respond appropriately. \n\nTo create a plugin, you need to setup your project in such a way that Docular understands it. \n\n###Your package.json\n\nAt minimum, you should specify what your main file is for your project. To do this, set the ```main``` key to your main file. For example: \n\n```js\n\n{\n    \"name\": \"MyProject\",\n    \"main\": \"index.js\"\n}\n\n```\n\nDocular uses the ['q' library](https://github.com/kriskowal/q), so you should also use that or a library that is compatible with it. This is because certain events allow you to add promises to a shared array so that Docular will wait until your plugin is ready for the application to proceed. This can be seen in docular-ng-plugin, where the ProcessConfig event is called and it fetches Angular code for documenting if needed. \n\n###Your main file\n\nYour main file needs to export a \"new-able\" function that has at least one method called \"register\". The \"register\" method will be provided the running instance of Docular, so that it may attach itself to events. Calling methods on the Docular instance is highly discouraged, as API changes may completely break your plugin.\n\nAs an example, this is the register method from the docular-ng-plugin:\n\n```js\n\n    ....\n    register: function (generator) {\n        this._generator = generator;\n        generator.on('FileParse', this.parseFile.bind(this));\n        generator.on('CreateDocs', this.createDocs.bind(this));\n        generator.on('FileParseBackfill', this.backfillData.bind(this));\n        generator.on('ProcessConfig', this.processConfig.bind(this));\n        generator.on('SetupRunConfig', this.setupConfig.bind(this));\n        generator.on('GetStyles', this.getStyles.bind(this));\n        generator.on('CopyFiles', this.copyFiles.bind(this));\n    }\n    ....\n\n```\n\n###Events\n\nThere are currently eight events that can be listened to. \n\n1. ProcessConfig. This event is emitted with two parameters - the configuration options provided to Docular and an array which you can push promises into. You should use this to read any parameters in that your plugin may need. In the example of the docular-ng-plugin, we need to know whether or not the user wants to have the Angular docs included, and if they do we need to download them prior to starting to parse the docs.\n2. FileRead. This event is emitted with two parameters. The first is an object with the fileName, content, docs (documents parsed from file content), and extension. The second is an array which you can push promises into. This is called when a file is to be read. If you need to push special information onto this file or replace its contents with slight modifications, this is the event to use.\n3. FileParse. This event is emitted with three parameters. The first is just the name of the file. The second is an object with the fileName, content, docs, and extension. The third is an array which you can push promises into. This is probably your primary event. Use this event to parse the file provided into an object for later use.\n4. FileParseBackfill. This event is emitted with three parameters. The first is just the name of the file. The second is an object with the fileName, content, docs, and extension. The third is an array which you can push promises into. You should use this if you need to read back through the documentation you've generated to clean up anything. In the case of the docular-ng-plugin, we try to make sure that all of the document objects have a module set on them. \n5. CreateDocs. This event is emitted with two parameters. The first is the document object that was created previously. The next is an array that can have promises pushed onto it. This event is where document objects get turned into document models. Each plugin may have a slightly different document model, but they all require the same basic interface, explained later.\n6. SetupRunConfig. This event provides two parameters. The first is the configuration that will be loaded on Docular's load and stored in the config constant. The second is an array which promises can be pushed into. This should be used if your plugin will have some special configuration details that it needs to know about - you can add these details in and they will exist in the injectable 'config'.\n7. GetStyles. This event is emitted with one parameter - an array which you can push [less](http://lesscss.org/) styles into which will be appended to the bottom of the Docular stylesheet. You should use this if you want to extend Docular or Bootstrap styles in your plugin. This may change in the future, as the current implementation feels a bit hacky.\n8. CopyFiles. This event is emitted with one parameter - the folder where all of the generated files will be stored. You should use this event if you need to copy some of your own files. Use the 'sync' rather than 'async' functions here. Too many open files will cause the grunt process to crash, so it was decided that this would not be a promise setup.\n\n###The document model\n\nA document model is just an object that must have the following methods and properties exposed:\n\n| toJSON() | Must return an plain object representation of the model that is ready to be serialized. |\n| addSubdoc | Must accept another document model parameter to be stored as a child document |\n| id | Must return a unique ID that represents the model |\n| name | Must return a string name of the model |\n| module | Must return a string name of the module this document belongs to. Just think of a module as an organizational unit |\n| setPath() | Must accept a string path and set it on the model. A path is the path of group ID's you would need to follow to get to the document |\n| hasParent() | Must return a boolean value as to whether or not a parent item has been set on this model |\n| groupId | A property that must be settable. Specifies the group that this model belongs to. |\n\nAdditionally, the following must be present on the serialized object:\n\n| handler | The plugin that is responsible for displaying the document. This relates to the angular controller that is to be created later on for displaying the document |\n| search | A string that the interface can search on. |\n| sortOn | A number or string that can be used to determine the position of the document in relation to its peers. |\n| path | Given to you via setPath |\n|groupId | The property that was set by Docular to tell which group this model belongs to |",
        "groupId": 3,
        "path": "docular",
        "name": "Docular plugins",
        "id": "Docular plugins",
        "search": "#Docular plugins\n\nThere are currently two officially available plugins for Docular. \n\n* [docular-ng-plugin](https://github.com/Vertafore/docular-ng-plugin)\n  This plugin gives Docular the ability to read and generate documentation for Angular type docs.\n* [docular-markdown-plugin](https://github.com/Vertafore/docular-markdown-plugin)\n  This plugin gives Docular the ability to create pages based off of simple markdown files.\n  \n##Creating a plugin\n\nThe plugin API has changed significantly since 0.6.x due to a strong desire to limit how much Docular has to call each plugin. Instead, it was desired that each plugin should listen for events emitted from Docular and respond appropriately. \n\nTo create a plugin, you need to setup your project in such a way that Docular understands it. \n\n###Your package.json\n\nAt minimum, you should specify what your main file is for your project. To do this, set the ```main``` key to your main file. For example: \n\n```js\n\n{\n    \"name\": \"MyProject\",\n    \"main\": \"index.js\"\n}\n\n```\n\nDocular uses the ['q' library](https://github.com/kriskowal/q), so you should also use that or a library that is compatible with it. This is because certain events allow you to add promises to a shared array so that Docular will wait until your plugin is ready for the application to proceed. This can be seen in docular-ng-plugin, where the ProcessConfig event is called and it fetches Angular code for documenting if needed. \n\n###Your main file\n\nYour main file needs to export a \"new-able\" function that has at least one method called \"register\". The \"register\" method will be provided the running instance of Docular, so that it may attach itself to events. Calling methods on the Docular instance is highly discouraged, as API changes may completely break your plugin.\n\nAs an example, this is the register method from the docular-ng-plugin:\n\n```js\n\n    ....\n    register: function (generator) {\n        this._generator = generator;\n        generator.on('FileParse', this.parseFile.bind(this));\n        generator.on('CreateDocs', this.createDocs.bind(this));\n        generator.on('FileParseBackfill', this.backfillData.bind(this));\n        generator.on('ProcessConfig', this.processConfig.bind(this));\n        generator.on('SetupRunConfig', this.setupConfig.bind(this));\n        generator.on('GetStyles', this.getStyles.bind(this));\n        generator.on('CopyFiles', this.copyFiles.bind(this));\n    }\n    ....\n\n```\n\n###Events\n\nThere are currently eight events that can be listened to. \n\n1. ProcessConfig. This event is emitted with two parameters - the configuration options provided to Docular and an array which you can push promises into. You should use this to read any parameters in that your plugin may need. In the example of the docular-ng-plugin, we need to know whether or not the user wants to have the Angular docs included, and if they do we need to download them prior to starting to parse the docs.\n2. FileRead. This event is emitted with two parameters. The first is an object with the fileName, content, docs (documents parsed from file content), and extension. The second is an array which you can push promises into. This is called when a file is to be read. If you need to push special information onto this file or replace its contents with slight modifications, this is the event to use.\n3. FileParse. This event is emitted with three parameters. The first is just the name of the file. The second is an object with the fileName, content, docs, and extension. The third is an array which you can push promises into. This is probably your primary event. Use this event to parse the file provided into an object for later use.\n4. FileParseBackfill. This event is emitted with three parameters. The first is just the name of the file. The second is an object with the fileName, content, docs, and extension. The third is an array which you can push promises into. You should use this if you need to read back through the documentation you've generated to clean up anything. In the case of the docular-ng-plugin, we try to make sure that all of the document objects have a module set on them. \n5. CreateDocs. This event is emitted with two parameters. The first is the document object that was created previously. The next is an array that can have promises pushed onto it. This event is where document objects get turned into document models. Each plugin may have a slightly different document model, but they all require the same basic interface, explained later.\n6. SetupRunConfig. This event provides two parameters. The first is the configuration that will be loaded on Docular's load and stored in the config constant. The second is an array which promises can be pushed into. This should be used if your plugin will have some special configuration details that it needs to know about - you can add these details in and they will exist in the injectable 'config'.\n7. GetStyles. This event is emitted with one parameter - an array which you can push [less](http://lesscss.org/) styles into which will be appended to the bottom of the Docular stylesheet. You should use this if you want to extend Docular or Bootstrap styles in your plugin. This may change in the future, as the current implementation feels a bit hacky.\n8. CopyFiles. This event is emitted with one parameter - the folder where all of the generated files will be stored. You should use this event if you need to copy some of your own files. Use the 'sync' rather than 'async' functions here. Too many open files will cause the grunt process to crash, so it was decided that this would not be a promise setup.\n\n###The document model\n\nA document model is just an object that must have the following methods and properties exposed:\n\n| toJSON() | Must return an plain object representation of the model that is ready to be serialized. |\n| addSubdoc | Must accept another document model parameter to be stored as a child document |\n| id | Must return a unique ID that represents the model |\n| name | Must return a string name of the model |\n| module | Must return a string name of the module this document belongs to. Just think of a module as an organizational unit |\n| setPath() | Must accept a string path and set it on the model. A path is the path of group ID's you would need to follow to get to the document |\n| hasParent() | Must return a boolean value as to whether or not a parent item has been set on this model |\n| groupId | A property that must be settable. Specifies the group that this model belongs to. |\n\nAdditionally, the following must be present on the serialized object:\n\n| handler | The plugin that is responsible for displaying the document. This relates to the angular controller that is to be created later on for displaying the document |\n| search | A string that the interface can search on. |\n| sortOn | A number or string that can be used to determine the position of the document in relation to its peers. |\n| path | Given to you via setPath |\n|groupId | The property that was set by Docular to tell which group this model belongs to |",
        "sortOn": "Docular plugins",
        "left": 1,
        "level": 0,
        "root": "Docular plugins",
        "right": 2
    },
    {
        "file": "downloaded/docular/docular-master/docs/writing/index.md",
        "handler": "markdown",
        "content": "#Writing documentation\n\nDocular's first and foremost goal is to stay in step with Angular's documentation practices. To that end, you should read their [documentation guide](https://github.com/angular/angular.js/wiki/Writing-AngularJS-Documentation). \n\nHere are some examples of documentation, right from the Angular source:\n\n```js\n\n    /**\n     * @ngdoc function\n     * @name angular.lowercase\n     * @module ng\n     * @kind function\n     *\n     * @description Converts the specified string to lowercase.\n     * @param {string} string String to be converted to lowercase.\n     * @returns {string} Lowercased string.\n     */\n    \n    \n    /**\n     * @ngdoc function\n     * @name angular.forEach\n     * @module ng\n     * @kind function\n     *\n     * @description\n     * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n     * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`\n     * is the value of an object property or an array element and `key` is the object property key or\n     * array element index. Specifying a `context` for the function is optional.\n     *\n     * It is worth noting that `.forEach` does not iterate over inherited properties because it filters\n     * using the `hasOwnProperty` method.\n     *\n       &#96;&#96;&#96;js\n         var values = {name: 'misko', gender: 'male'};\n         var log = [];\n         angular.forEach(values, function(value, key) {\n           this.push(key + ': ' + value);\n         }, log);\n         expect(log).toEqual(['name: misko', 'gender: male']);\n       &#96;&#96;&#96;\n     *\n     * @param {Object|Array} obj Object to iterate over.\n     * @param {Function} iterator Iterator function.\n     * @param {Object=} context Object to become context (`this`) for the iterator function.\n     * @returns {Object|Array} Reference to `obj`.\n     */\n     \n     \n     /**\n      * @ngdoc function\n      * @name angular.copy\n      * @module ng\n      * @kind function\n      *\n      * @description\n      * Creates a deep copy of `source`, which should be an object or an array.\n      *\n      * * If no destination is supplied, a copy of the object or array is created.\n      * * If a destination is provided, all of its elements (for array) or properties (for objects)\n      *   are deleted and then all elements/properties from the source are copied to it.\n      * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n      * * If `source` is identical to 'destination' an exception will be thrown.\n      *\n      * @param {*} source The source that will be used to make a copy.\n      *                   Can be any type, including primitives, `null`, and `undefined`.\n      * @param {(Object|Array)=} destination Destination into which the source is copied. If\n      *     provided, must be of the same type as `source`.\n      * @returns {*} The copy or updated `destination`, if `destination` was specified.\n      *\n      * @example\n      <example module=\"copyExample\">\n      <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n      <form novalidate class=\"simple-form\">\n      Name: <input type=\"text\" ng-model=\"user.name\" /><br />\n      E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\n      Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n      <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n      <button ng-click=\"reset()\">RESET</button>\n      <button ng-click=\"update(user)\">SAVE</button>\n      </form>\n      <pre>form = {{user | json}}</pre>\n      <pre>master = {{master | json}}</pre>\n      </div>\n     \n      <script>\n       angular.module('copyExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.master= {};\n     \n           $scope.update = function(user) {\n             // Example with 1 argument\n             $scope.master= angular.copy(user);\n           };\n     \n           $scope.reset = function() {\n             // Example with 2 arguments\n             angular.copy($scope.master, $scope.user);\n           };\n     \n           $scope.reset();\n         }]);\n      </script>\n      </file>\n      </example>\n      */\n\n```\n\nAnything in the @description is considered to be markdown syntax, and so you can use markdown for formatting, links,\ncode snippets, etc. \n\n##Extra parameters\n\nThere are some parameters that I feel are missing from the angular documentation syntax, which are going to be added as \ntime allows.\n\n1. @deprecated. In large projects, this is a necessity.\n2. @todo. This helps keep 'todo' items from floating under the radar. ",
        "groupId": 3,
        "path": "docular",
        "name": "Writing documentation",
        "id": "Writing documentation",
        "search": "#Writing documentation\n\nDocular's first and foremost goal is to stay in step with Angular's documentation practices. To that end, you should read their [documentation guide](https://github.com/angular/angular.js/wiki/Writing-AngularJS-Documentation). \n\nHere are some examples of documentation, right from the Angular source:\n\n```js\n\n    /**\n     * @ngdoc function\n     * @name angular.lowercase\n     * @module ng\n     * @kind function\n     *\n     * @description Converts the specified string to lowercase.\n     * @param {string} string String to be converted to lowercase.\n     * @returns {string} Lowercased string.\n     */\n    \n    \n    /**\n     * @ngdoc function\n     * @name angular.forEach\n     * @module ng\n     * @kind function\n     *\n     * @description\n     * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n     * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`\n     * is the value of an object property or an array element and `key` is the object property key or\n     * array element index. Specifying a `context` for the function is optional.\n     *\n     * It is worth noting that `.forEach` does not iterate over inherited properties because it filters\n     * using the `hasOwnProperty` method.\n     *\n       &#96;&#96;&#96;js\n         var values = {name: 'misko', gender: 'male'};\n         var log = [];\n         angular.forEach(values, function(value, key) {\n           this.push(key + ': ' + value);\n         }, log);\n         expect(log).toEqual(['name: misko', 'gender: male']);\n       &#96;&#96;&#96;\n     *\n     * @param {Object|Array} obj Object to iterate over.\n     * @param {Function} iterator Iterator function.\n     * @param {Object=} context Object to become context (`this`) for the iterator function.\n     * @returns {Object|Array} Reference to `obj`.\n     */\n     \n     \n     /**\n      * @ngdoc function\n      * @name angular.copy\n      * @module ng\n      * @kind function\n      *\n      * @description\n      * Creates a deep copy of `source`, which should be an object or an array.\n      *\n      * * If no destination is supplied, a copy of the object or array is created.\n      * * If a destination is provided, all of its elements (for array) or properties (for objects)\n      *   are deleted and then all elements/properties from the source are copied to it.\n      * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n      * * If `source` is identical to 'destination' an exception will be thrown.\n      *\n      * @param {*} source The source that will be used to make a copy.\n      *                   Can be any type, including primitives, `null`, and `undefined`.\n      * @param {(Object|Array)=} destination Destination into which the source is copied. If\n      *     provided, must be of the same type as `source`.\n      * @returns {*} The copy or updated `destination`, if `destination` was specified.\n      *\n      * @example\n      <example module=\"copyExample\">\n      <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n      <form novalidate class=\"simple-form\">\n      Name: <input type=\"text\" ng-model=\"user.name\" /><br />\n      E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\n      Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n      <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n      <button ng-click=\"reset()\">RESET</button>\n      <button ng-click=\"update(user)\">SAVE</button>\n      </form>\n      <pre>form = {{user | json}}</pre>\n      <pre>master = {{master | json}}</pre>\n      </div>\n     \n      <script>\n       angular.module('copyExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.master= {};\n     \n           $scope.update = function(user) {\n             // Example with 1 argument\n             $scope.master= angular.copy(user);\n           };\n     \n           $scope.reset = function() {\n             // Example with 2 arguments\n             angular.copy($scope.master, $scope.user);\n           };\n     \n           $scope.reset();\n         }]);\n      </script>\n      </file>\n      </example>\n      */\n\n```\n\nAnything in the @description is considered to be markdown syntax, and so you can use markdown for formatting, links,\ncode snippets, etc. \n\n##Extra parameters\n\nThere are some parameters that I feel are missing from the angular documentation syntax, which are going to be added as \ntime allows.\n\n1. @deprecated. In large projects, this is a necessity.\n2. @todo. This helps keep 'todo' items from floating under the radar. ",
        "sortOn": "Writing documentation",
        "left": 1,
        "level": 0,
        "root": "Writing documentation",
        "right": 2
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ng",
        "module": "ng",
        "description": "# ng (core module)\nThe ng module is loaded by default when an AngularJS application is started. The module itself\ncontains the essential components for an AngularJS application to function. The table below\nlists a high level breakdown of each of the services/factories, filters, directives and testing\ncomponents available within this core module.\n\n<div doc-module-components=\"ng\"></div>",
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "ng",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ng ng.module:ng downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "ng",
        "left": 1,
        "level": 0,
        "root": "ng",
        "right": 612
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "string",
                "altName": null,
                "description": "String to be converted to lowercase.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.lowercase",
        "module": "ng",
        "kind": "function",
        "description": "Converts the specified string to lowercase.",
        "returns": "{string} Lowercased string.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.lowercase",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.lowercase ng.function:angular.lowercase downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.lowercase",
        "left": 2,
        "level": 1,
        "root": "ng",
        "right": 3
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "string",
                "altName": null,
                "description": "String to be converted to uppercase.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.uppercase",
        "module": "ng",
        "kind": "function",
        "description": "Converts the specified string to uppercase.",
        "returns": "{string} Uppercased string.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.uppercase",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.uppercase ng.function:angular.uppercase downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.uppercase",
        "left": 4,
        "level": 1,
        "root": "ng",
        "right": 5
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "obj",
                "altName": null,
                "description": "Object to iterate over.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "iterator",
                "altName": null,
                "description": "Iterator function.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "context",
                "altName": null,
                "description": "Object to become context (`this`) for the iterator function.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.forEach",
        "module": "ng",
        "kind": "function",
        "description": "Invokes the `iterator` function once for each item in `obj` collection, which can be either an\nobject or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`\nis the value of an object property or an array element, `key` is the object property key or\narray element index and obj is the `obj` itself. Specifying a `context` for the function is optional.\n\nIt is worth noting that `.forEach` does not iterate over inherited properties because it filters\nusing the `hasOwnProperty` method.\n\nUnlike ES262's\n[Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),\nProviding 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just\nreturn the value provided.\n\n   ```js\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key) {\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender: male']);\n   ```",
        "returns": "{Object|Array} Reference to `obj`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.forEach",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.forEach ng.function:angular.forEach downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.forEach",
        "left": 6,
        "level": 1,
        "root": "ng",
        "right": 7
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "dst",
                "altName": null,
                "description": "Destination object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "src",
                "altName": null,
                "description": "Source object(s).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.extend",
        "module": "ng",
        "kind": "function",
        "description": "Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\nto `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\nby passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.\n\n**Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use\n{@link angular.merge} for this.",
        "returns": "{Object} Reference to `dst`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.extend",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.extend ng.function:angular.extend downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.extend",
        "left": 8,
        "level": 1,
        "root": "ng",
        "right": 9
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "dst",
                "altName": null,
                "description": "Destination object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "src",
                "altName": null,
                "description": "Source object(s).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.merge",
        "module": "ng",
        "kind": "function\n*",
        "description": "* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\n* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\n* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.\n*\n* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source\n* objects, performing a deep copy.\n*",
        "returns": "{Object} Reference to `dst`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.merge",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.merge ng.function:angular.merge downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.merge",
        "left": 10,
        "level": 1,
        "root": "ng",
        "right": 11
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.noop",
        "module": "ng",
        "kind": "function",
        "description": "A function that performs no operations. This function can be useful when writing code in the\nfunctional style.\n   ```js\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n   ```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.noop",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.noop ng.function:angular.noop downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.noop",
        "left": 12,
        "level": 1,
        "root": "ng",
        "right": 13
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "to be returned.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.identity",
        "module": "ng",
        "kind": "function",
        "description": "A function that returns its first argument. This function is useful when writing code in the\nfunctional style.\n\n   ```js\n     function transformer(transformationFn, value) {\n       return (transformationFn || angular.identity)(value);\n     };\n   ```",
        "returns": "{*} the value passed in.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.identity",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.identity ng.function:angular.identity downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.identity",
        "left": 14,
        "level": 1,
        "root": "ng",
        "right": 15
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isUndefined",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is undefined.",
        "returns": "{boolean} True if `value` is undefined.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isUndefined",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isUndefined ng.function:angular.isUndefined downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isUndefined",
        "left": 16,
        "level": 1,
        "root": "ng",
        "right": 17
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isDefined",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is defined.",
        "returns": "{boolean} True if `value` is defined.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isDefined",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isDefined ng.function:angular.isDefined downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isDefined",
        "left": 18,
        "level": 1,
        "root": "ng",
        "right": 19
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isObject",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\nconsidered to be objects. Note that JavaScript arrays are objects.",
        "returns": "{boolean} True if `value` is an `Object` but not `null`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isObject",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isObject ng.function:angular.isObject downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isObject",
        "left": 20,
        "level": 1,
        "root": "ng",
        "right": 21
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isString",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is a `String`.",
        "returns": "{boolean} True if `value` is a `String`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isString",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isString ng.function:angular.isString downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isString",
        "left": 22,
        "level": 1,
        "root": "ng",
        "right": 23
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isNumber",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is a `Number`.\n\nThis includes the \"special\" numbers `NaN`, `+Infinity` and `-Infinity`.\n\nIf you wish to exclude these then you can use the native\n[`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)\nmethod.",
        "returns": "{boolean} True if `value` is a `Number`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isNumber",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isNumber ng.function:angular.isNumber downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isNumber",
        "left": 24,
        "level": 1,
        "root": "ng",
        "right": 25
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isDate",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a value is a date.",
        "returns": "{boolean} True if `value` is a `Date`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isDate",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isDate ng.function:angular.isDate downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isDate",
        "left": 26,
        "level": 1,
        "root": "ng",
        "right": 27
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isArray",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is an `Array`.",
        "returns": "{boolean} True if `value` is an `Array`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isArray",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isArray ng.function:angular.isArray downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isArray",
        "left": 28,
        "level": 1,
        "root": "ng",
        "right": 29
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isFunction",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is a `Function`.",
        "returns": "{boolean} True if `value` is a `Function`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isFunction",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isFunction ng.function:angular.isFunction downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isFunction",
        "left": 30,
        "level": 1,
        "root": "ng",
        "right": 31
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Reference to check.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.isElement",
        "module": "ng",
        "kind": "function",
        "description": "Determines if a reference is a DOM element (or wrapped jQuery element).",
        "returns": "{boolean} True if `value` is a DOM element (or wrapped jQuery element).",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.isElement",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.isElement ng.function:angular.isElement downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.isElement",
        "left": 32,
        "level": 1,
        "root": "ng",
        "right": 33
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "source",
                "altName": null,
                "description": "The source that will be used to make a copy.\nCan be any type, including primitives, `null`, and `undefined`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "destination",
                "altName": null,
                "description": "Destination into which the source is copied. If\nprovided, must be of the same type as `source`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.copy",
        "module": "ng",
        "kind": "function",
        "description": "Creates a deep copy of `source`, which should be an object or an array.\n\n* If no destination is supplied, a copy of the object or array is created.\n* If a destination is provided, all of its elements (for arrays) or properties (for objects)\nare deleted and then all elements/properties from the source are copied to it.\n* If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.\n* If `source` is identical to 'destination' an exception will be thrown.",
        "returns": "{*} The copy or updated `destination`, if `destination` was specified.",
        "example": "<example module=\"copyExample\">\n <file name=\"index.html\">\n <div ng-controller=\"ExampleController\">\n <form novalidate class=\"simple-form\">\n Name: <input type=\"text\" ng-model=\"user.name\" /><br />\n E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\n Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n <button ng-click=\"reset()\">RESET</button>\n <button ng-click=\"update(user)\">SAVE</button>\n </form>\n <pre>form = {{user | json}}</pre>\n <pre>master = {{master | json}}</pre>\n </div>\n\n <script>\n  angular.module('copyExample', [])\n    .controller('ExampleController', ['$scope', function($scope) {\n      $scope.master= {};\n\n      $scope.update = function(user) {\n        // Example with 1 argument\n        $scope.master= angular.copy(user);\n      };\n\n      $scope.reset = function() {\n        // Example with 2 arguments\n        angular.copy($scope.master, $scope.user);\n      };\n\n      $scope.reset();\n    }]);\n </script>\n </file>\n </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.copy",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.copy ng.function:angular.copy downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.copy",
        "left": 34,
        "level": 1,
        "root": "ng",
        "right": 35
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "o1",
                "altName": null,
                "description": "Object or value to compare.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "o2",
                "altName": null,
                "description": "Object or value to compare.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.equals",
        "module": "ng",
        "kind": "function",
        "description": "Determines if two objects or two values are equivalent. Supports value types, regular\nexpressions, arrays and objects.\n\nTwo objects or values are considered equivalent if at least one of the following is true:\n\n* Both objects or values pass `===` comparison.\n* Both objects or values are of the same type and all of their properties are equal by\ncomparing them with `angular.equals`.\n* Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)\n* Both values represent the same regular expression (In JavaScript,\n/abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual\nrepresentation matches).\n\nDuring a property comparison, properties of `function` type and properties with names\nthat begin with `$` are ignored.\n\nScope and DOMWindow objects are being compared only by identify (`===`).",
        "returns": "{boolean} True if arguments are equal.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.equals",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.equals ng.function:angular.equals downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.equals",
        "left": 36,
        "level": 1,
        "root": "ng",
        "right": 37
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "the",
                "altName": null,
                "description": "name of the library available under `window`\nto be used for angular.element",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "module": "ng",
        "name": "ngJq",
        "element": "ANY",
        "description": "Use this directive to force the angular.element library.  This should be\nused to force either jqLite by leaving ng-jq blank or setting the name of\nthe jquery variable under window (eg. jQuery).\n\nSince this directive is global for the angular library, it is recommended\nthat it's added to the same element as ng-app or the HTML element, but it is not mandatory.\nIt needs to be noted that only the first instance of `ng-jq` will be used and all others\nignored.",
        "example": "This example shows how to use a jQuery based library of a different name.\nThe library name must be available at the top most 'window'.\n ```html\n <!doctype html>\n <html ng-app ng-jq=\"jQueryLib\">\n ...\n ...\n </html>\n ```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "ngJq",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngJq ng.directive:ngJq downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "ngJq",
        "left": 38,
        "level": 1,
        "root": "ng",
        "right": 39
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "self",
                "altName": null,
                "description": "Context which `fn` should be evaluated in.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "Function to be bound.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "args",
                "altName": null,
                "description": "Optional arguments to be prebound to the `fn` function call.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.bind",
        "module": "ng",
        "kind": "function",
        "description": "Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n`fn`). You can supply optional `args` that are prebound to the function. This feature is also\nknown as [partial application](http://en.wikipedia.org/wiki/Partial_application), as\ndistinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).",
        "returns": "{function()} Function that wraps the `fn` with all the specified bindings.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.bind",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.bind ng.function:angular.bind downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.bind",
        "left": 40,
        "level": 1,
        "root": "ng",
        "right": 41
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    },
                    {
                        "name": "Date",
                        "type": "date"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "obj",
                "altName": null,
                "description": "Input to be serialized into JSON.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "pretty",
                "altName": null,
                "description": "If set to true, the JSON output will contain newlines and whitespace.\nIf set to an integer, the JSON output will contain that many spaces per indentation (the default is 2).",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.toJson",
        "module": "ng",
        "kind": "function",
        "description": "Serializes input into a JSON-formatted string. Properties with leading $$ characters will be\nstripped since angular uses this notation internally.",
        "returns": "{string|undefined} JSON-ified string representing `obj`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.toJson",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.toJson ng.function:angular.toJson downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.toJson",
        "left": 42,
        "level": 1,
        "root": "ng",
        "right": 43
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "json",
                "altName": null,
                "description": "JSON string to deserialize.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.fromJson",
        "module": "ng",
        "kind": "function",
        "description": "Deserializes a JSON string.",
        "returns": "{Object|Array|string|number} Deserialized JSON string.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.fromJson",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.fromJson ng.function:angular.fromJson downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.fromJson",
        "left": 44,
        "level": 1,
        "root": "ng",
        "right": 45
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "angular.Module",
                        "type": "angular.module"
                    }
                ],
                "varName": "ngApp",
                "altName": null,
                "description": "an optional application\n{@link angular.module module} name to load.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ngStrictDi",
                "altName": null,
                "description": "if this attribute is present on the app element, the injector will be\ncreated in \"strict-di\" mode. This means that the application will fail to invoke functions which\ndo not use explicit function annotation (and are thus unsuitable for minification), as described\nin {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in\ntracking down the root of these bugs.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngApp",
        "module": "ng",
        "element": "ANY",
        "description": "Use this directive to*auto-bootstrap** an AngularJS application. The `ngApp` directive\ndesignates the*root element** of the application and is typically placed near the root element\nof the page - e.g. on the `<body>` or `<html>` tags.\n\nOnly one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`\nfound in the document will be used to define the root element to auto-bootstrap as an\napplication. To run multiple applications in an HTML document you must manually bootstrap them using\n{@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.\n\nYou can specify an*AngularJS module** to be used as the root module for the application.  This\nmodule will be loaded into the {@link auto.$injector} when the application is bootstrapped. It\nshould contain the application code needed or have dependencies on other modules that will\ncontain the code. See {@link angular.module} for more information.\n\nIn the example below if the `ngApp` directive were not placed on the `html` element then the\ndocument would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`\nwould not be resolved to `3`.\n\n`ngApp` is the easiest, and most common way to bootstrap an application.\n\n <example module=\"ngAppDemo\">\n   <file name=\"index.html\">\n   <div ng-controller=\"ngAppDemoController\">\n     I can add: {{a}} + {{b}} =  {{ a+b }}\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {\n     $scope.a = 1;\n     $scope.b = 2;\n   });\n   </file>\n </example>\n\nUsing `ngStrictDi`, you would see something like this:\n\n <example ng-app-included=\"true\">\n   <file name=\"index.html\">\n   <div ng-app=\"ngAppStrictDemo\" ng-strict-di>\n       <div ng-controller=\"GoodController1\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style (see\n              script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"GoodController2\">\n           Name: <input ng-model=\"name\"><br />\n           Hello, {{name}}!\n\n           <p>This renders because the controller does not fail to\n              instantiate, by using explicit annotation style\n              (see script.js for details)\n           </p>\n       </div>\n\n       <div ng-controller=\"BadController\">\n           I can add: {{a}} + {{b}} =  {{ a+b }}\n\n           <p>The controller could not be instantiated, due to relying\n              on automatic function annotations (which are disabled in\n              strict mode). As such, the content of this section is not\n              interpolated, and there should be an error in your web console.\n           </p>\n       </div>\n   </div>\n   </file>\n   <file name=\"script.js\">\n   angular.module('ngAppStrictDemo', [])\n     // BadController will fail to instantiate, due to relying on automatic function annotation,\n     // rather than an explicit annotation\n     .controller('BadController', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     })\n     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,\n     // due to using explicit annotations using the array style and $inject property, respectively.\n     .controller('GoodController1', ['$scope', function($scope) {\n       $scope.a = 1;\n       $scope.b = 2;\n     }])\n     .controller('GoodController2', GoodController2);\n     function GoodController2($scope) {\n       $scope.name = \"World\";\n     }\n     GoodController2.$inject = ['$scope'];\n   </file>\n   <file name=\"style.css\">\n   div[ng-controller] {\n       margin-bottom: 1em;\n       -webkit-border-radius: 4px;\n       border-radius: 4px;\n       border: 1px solid;\n       padding: .5em;\n   }\n   div[ng-controller^=Good] {\n       border-color: #d6e9c6;\n       background-color: #dff0d8;\n       color: #3c763d;\n   }\n   div[ng-controller^=Bad] {\n       border-color: #ebccd1;\n       background-color: #f2dede;\n       color: #a94442;\n       margin-bottom: 0;\n   }\n   </file>\n </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "ngApp",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngApp ng.directive:ngApp downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "ngApp",
        "left": 46,
        "level": 1,
        "root": "ng",
        "right": 47
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "DOM element which is the root of angular application.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    },
                    {
                        "name": "String",
                        "type": "string"
                    },
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "modules",
                "altName": null,
                "description": "an array of modules to load into the application.\nEach item in the array should be the name of a predefined module or a (DI annotated)\nfunction that will be invoked by the injector as a `config` block.\nSee: {@link angular.module modules}",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "an object for defining configuration options for the application. The\nfollowing keys are supported:\n\n* `strictDi` - disable automatic function annotation for the application. This is meant to\nassist in finding bugs which break minified code. Defaults to `false`.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.bootstrap",
        "module": "ng",
        "description": "Use this function to manually start up angular application.\n\nSee: {@link guide/bootstrap Bootstrap}\n\nNote that Protractor based end-to-end tests cannot use this function to bootstrap manually.\nThey must use {@link ng.directive:ngApp ngApp}.\n\nAngular will detect if it has been loaded into the browser more than once and only allow the\nfirst loaded script to be bootstrapped and will report a warning to the browser console for\neach of the subsequent scripts. This prevents strange results in applications, where otherwise\nmultiple instances of Angular try to work on the DOM.\n\n```html\n<!doctype html>\n<html>\n<body>\n<div ng-controller=\"WelcomeController\">\n{{greeting}}\n</div>\n\n<script src=\"angular.js\"></script>\n<script>\nvar app = angular.module('demo', [])\n.controller('WelcomeController', function($scope) {\n$scope.greeting = 'Welcome!';\n});\nangular.bootstrap(document, ['demo']);\n</script>\n</body>\n</html>\n```",
        "returns": "{auto.$injector} Returns the newly created injector for this app.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.bootstrap",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.bootstrap ng.function:angular.bootstrap downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.bootstrap",
        "left": 48,
        "level": 1,
        "root": "ng",
        "right": 49
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.reloadWithDebugInfo",
        "module": "ng",
        "description": "Use this function to reload the current application with debug information turned on.\nThis takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.\n\nSee {@link ng.$compileProvider#debugInfoEnabled} for more.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/Angular.js",
        "id": "angular.reloadWithDebugInfo",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.reloadWithDebugInfo ng.function:angular.reloadWithDebugInfo downloaded/angular/angular.js-master/src/Angular.js",
        "sortOn": "angular.reloadWithDebugInfo",
        "left": 50,
        "level": 1,
        "root": "ng",
        "right": 51
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "object",
        "name": "angular.version",
        "module": "ng",
        "description": "An object that contains information about the current AngularJS version. This object has the\nfollowing properties:\n\n- `full` – `{string}` – Full version string, such as \"0.9.18\".\n- `major` – `{number}` – Major version number, such as \"0\".\n- `minor` – `{number}` – Minor version number, such as \"9\".\n- `dot` – `{number}` – Dot version number, such as \"18\".\n- `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/AngularPublic.js",
        "id": "angular.version",
        "path": "angular/api",
        "groupId": 5,
        "type": "object",
        "handler": "ngdoc",
        "search": "angular.version ng.object:angular.version downloaded/angular/angular.js-master/src/AngularPublic.js",
        "sortOn": "angular.version",
        "left": 52,
        "level": 1,
        "root": "ng",
        "right": 53
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array.<string|Function>",
                        "type": "array.<string|function>"
                    }
                ],
                "varName": "modules",
                "altName": null,
                "description": "A list of module functions or their aliases. See\n{@link angular.module}. The `ng` module must be explicitly added.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "strictDi",
                "altName": null,
                "description": "Whether the injector should be in strict mode, which\ndisallows argument name annotation inference.",
                "optional": true,
                "defaultValue": "false"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "module": "ng",
        "name": "angular.injector",
        "kind": "function",
        "description": "Creates an injector object that can be used for retrieving services as well as for\ndependency injection (see {@link guide/di dependency injection}).",
        "returns": "{injector} Injector object. See {@link auto.$injector $injector}.",
        "example": "Typical usage\n```js\n// create an injector\nvar $injector = angular.injector(['ng']);\n\n// use the injector to kick off your application\n// use the type inference to auto inject arguments, or use implicit injection\n$injector.invoke(function($rootScope, $compile, $document) {\n$compile($document)($rootScope);\n$rootScope.$digest();\n});\n```\n\nSometimes you want to get access to the injector of a currently running Angular app\nfrom outside Angular. Perhaps, you want to inject and compile some markup after the\napplication has been bootstrapped. You can do this using the extra `injector()` added\nto JQuery/jqLite elements. See {@link angular.element}.\n\n*This is fairly rare but could be the case if a third party library is injecting the\nmarkup.*\n\nIn the following example a new block of HTML containing a `ng-controller`\ndirective is added to the end of the document body by JQuery. We then compile and link\nit into the current AngularJS scope.\n\n```js\nvar $div = $('<div ng-controller=\"MyCtrl\">{{content.label}}</div>');\n$(document.body).append($div);\n\nangular.element(document).injector().invoke(function($compile) {\nvar scope = angular.element($div).scope();\n$compile($div)(scope);\n});\n```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "id": "angular.injector",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.injector ng.function:angular.injector downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "angular.injector",
        "left": 54,
        "level": 1,
        "root": "ng",
        "right": 55
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "HTML string or DOMElement to be wrapped into jQuery.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.element",
        "module": "ng",
        "kind": "function",
        "description": "Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n\nIf jQuery is available, `angular.element` is an alias for the\n[jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`\ndelegates to Angular's built-in subset of jQuery, called \"jQuery lite\" or \"jqLite.\"\n\n<div class=\"alert alert-success\">jqLite is a tiny, API-compatible subset of jQuery that allows\nAngular to manipulate the DOM in a cross-browser compatible way.*jqLite** implements only the most\ncommonly needed functionality with the goal of having a very small footprint.</div>\n\nTo use jQuery, simply load it before `DOMContentLoaded` event fired.\n\n<div class=\"alert\">**Note:** all element references in Angular are always wrapped with jQuery or\njqLite; they are never raw DOM references.</div>\n\n## Angular's jqLite\njqLite provides only the following jQuery methods:\n\n- [`addClass()`](http://api.jquery.com/addClass/)\n- [`after()`](http://api.jquery.com/after/)\n- [`append()`](http://api.jquery.com/append/)\n- [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters\n- [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData\n- [`children()`](http://api.jquery.com/children/) - Does not support selectors\n- [`clone()`](http://api.jquery.com/clone/)\n- [`contents()`](http://api.jquery.com/contents/)\n- [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`\n- [`data()`](http://api.jquery.com/data/)\n- [`detach()`](http://api.jquery.com/detach/)\n- [`empty()`](http://api.jquery.com/empty/)\n- [`eq()`](http://api.jquery.com/eq/)\n- [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name\n- [`hasClass()`](http://api.jquery.com/hasClass/)\n- [`html()`](http://api.jquery.com/html/)\n- [`next()`](http://api.jquery.com/next/) - Does not support selectors\n- [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData\n- [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors\n- [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors\n- [`parent()`](http://api.jquery.com/parent/) - Does not support selectors\n- [`prepend()`](http://api.jquery.com/prepend/)\n- [`prop()`](http://api.jquery.com/prop/)\n- [`ready()`](http://api.jquery.com/ready/)\n- [`remove()`](http://api.jquery.com/remove/)\n- [`removeAttr()`](http://api.jquery.com/removeAttr/)\n- [`removeClass()`](http://api.jquery.com/removeClass/)\n- [`removeData()`](http://api.jquery.com/removeData/)\n- [`replaceWith()`](http://api.jquery.com/replaceWith/)\n- [`text()`](http://api.jquery.com/text/)\n- [`toggleClass()`](http://api.jquery.com/toggleClass/)\n- [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.\n- [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces\n- [`val()`](http://api.jquery.com/val/)\n- [`wrap()`](http://api.jquery.com/wrap/)\n\n## jQuery/jqLite Extras\nAngular also provides the following additional methods and events to both jQuery and jqLite:\n\n### Events\n- `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event\non all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM\nelement before it is removed.\n\n### Methods\n- `controller(name)` - retrieves the controller of the current element or its parent. By default\nretrieves controller associated with the `ngController` directive. If `name` is provided as\ncamelCase directive name, then the controller for this directive will be retrieved (e.g.\n`'ngModel'`).\n- `injector()` - retrieves the injector of the current element or its parent.\n- `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current\nelement or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to\nbe enabled.\n- `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the\ncurrent element. This getter should be used only on elements that contain a directive which starts a new isolate\nscope. Calling `scope()` on this element always returns the original non-isolate scope.\nRequires {@link guide/production#disabling-debug-data Debug Data} to be enabled.\n- `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\nparent element is reached.",
        "returns": "{Object} jQuery object.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/jqLite.js",
        "id": "angular.element",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.element ng.function:angular.element downloaded/angular/angular.js-master/src/jqLite.js",
        "sortOn": "angular.element",
        "left": 56,
        "level": 1,
        "root": "ng",
        "right": 57
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "angular.Module",
        "module": "ng",
        "description": "Interface for configuring angular {@link angular.module modules}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "angular.Module",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "angular.Module ng.type:angular.Module downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "angular.Module",
        "left": 58,
        "level": 1,
        "root": "ng",
        "right": 87
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "requires",
        "module": "ng",
        "description": "Holds the list of modules which the injector will load before the current module is\nloaded.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "requires",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "requires ng.property:requires downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "requires",
        "left": 59,
        "level": 2,
        "root": "ng",
        "right": 60
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "name",
        "module": "ng",
        "description": "Name of the module.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "name",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "name ng.property:name downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "name",
        "left": 61,
        "level": 2,
        "root": "ng",
        "right": 62
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "service name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "providerType",
                "altName": null,
                "description": "Construction function for creating new instance of the\nservice.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "provider",
        "module": "ng",
        "description": "See {@link auto.$provide#provider $provide.provider()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "provider",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "provider ng.method:provider downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "provider",
        "left": 63,
        "level": 2,
        "root": "ng",
        "right": 64
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "service name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "providerFunction",
                "altName": null,
                "description": "Function for creating new instance of the service.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "factory",
        "module": "ng",
        "description": "See {@link auto.$provide#factory $provide.factory()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "factory",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "factory ng.method:factory downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "factory",
        "left": 65,
        "level": 2,
        "root": "ng",
        "right": 66
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "service name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "A constructor function that will be instantiated.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "service",
        "module": "ng",
        "description": "See {@link auto.$provide#service $provide.service()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "service",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "service ng.method:service downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "service",
        "left": 67,
        "level": 2,
        "root": "ng",
        "right": 68
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "service name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "object",
                "altName": null,
                "description": "Service instance object.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "value",
        "module": "ng",
        "description": "See {@link auto.$provide#value $provide.value()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "value",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "value ng.method:value downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "value",
        "left": 69,
        "level": 2,
        "root": "ng",
        "right": 70
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "constant name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "object",
                "altName": null,
                "description": "Constant value.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "constant",
        "module": "ng",
        "description": "Because the constant are fixed, they get applied before other provide methods.\nSee {@link auto.$provide#constant $provide.constant()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "constant",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "constant ng.method:constant downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "constant",
        "left": 71,
        "level": 2,
        "root": "ng",
        "right": 72
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "The",
                "altName": null,
                "description": "name of the service to decorate.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "This",
                "altName": null,
                "description": "function will be invoked when the service needs to be\ninstantiated and should return the decorated service instance.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "decorator",
        "module": "ng",
        "description": "See {@link auto.$provide#decorator $provide.decorator()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "decorator",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "decorator ng.method:decorator downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "decorator",
        "left": 73,
        "level": 2,
        "root": "ng",
        "right": 74
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "animation name",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "animationFactory",
                "altName": null,
                "description": "Factory function for creating new instance of an\nanimation.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "animation",
        "module": "ng",
        "description": "**NOTE**: animations take effect only if the*ngAnimate** module is loaded.\n\n\nDefines an animation hook that can be later used with\n{@link ngAnimate.$animate $animate} service and directives that use this service.\n\n```js\nmodule.animation('.animation-name', function($inject1, $inject2) {\nreturn {\neventName : function(element, done) {\n//code to run the animation\n//once complete, then run done()\nreturn function cancellationFunction(element) {\n//code to cancel the animation\n}\n}\n}\n})\n```\n\nSee {@link ng.$animateProvider#register $animateProvider.register()} and\n{@link ngAnimate ngAnimate module} for more information.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "animation",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "animation ng.method:animation downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "animation",
        "left": 75,
        "level": 2,
        "root": "ng",
        "right": 76
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Filter name - this must be a valid angular expression identifier",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "filterFactory",
                "altName": null,
                "description": "Factory function for creating new instance of filter.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "filter",
        "module": "ng",
        "description": "See {@link ng.$filterProvider#register $filterProvider.register()}.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "filter",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "filter ng.method:filter downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "filter",
        "left": 77,
        "level": 2,
        "root": "ng",
        "right": 78
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Controller name, or an object map of controllers where the\nkeys are the names and the values are the constructors.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "Controller constructor function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "controller",
        "module": "ng",
        "description": "See {@link ng.$controllerProvider#register $controllerProvider.register()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "controller",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "controller ng.method:controller downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "controller",
        "left": 79,
        "level": 2,
        "root": "ng",
        "right": 80
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Directive name, or an object map of directives where the\nkeys are the names and the values are the factories.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "directiveFactory",
                "altName": null,
                "description": "Factory function for creating new instance of\ndirectives.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "directive",
        "module": "ng",
        "description": "See {@link ng.$compileProvider#directive $compileProvider.directive()}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "directive",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "directive ng.method:directive downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "directive",
        "left": 81,
        "level": 2,
        "root": "ng",
        "right": 82
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "configFn",
                "altName": null,
                "description": "Execute this function on module load. Useful for service\nconfiguration.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "config",
        "module": "ng",
        "description": "Use this method to register work which needs to be performed on module loading.\nFor more about how to configure services, see\n{@link providers#provider-recipe Provider Recipe}.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "config",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "config ng.method:config downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "config",
        "left": 83,
        "level": 2,
        "root": "ng",
        "right": 84
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "initializationFn",
                "altName": null,
                "description": "Execute this function after injector creation.\nUseful for application initialization.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "run",
        "module": "ng",
        "description": "Use this method to register work which should be performed when the injector is done\nloading all modules.",
        "parentDoc": {
            "module": "ng",
            "name": "angular.Module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "run",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "run ng.method:run downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "run",
        "left": 85,
        "level": 2,
        "root": "ng",
        "right": 86
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the module to create or retrieve.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Array.<string>",
                        "type": "array.<string>"
                    }
                ],
                "varName": "requires",
                "altName": null,
                "description": "If specified then new module is being created. If\nunspecified then the module is being retrieved for further configuration.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "configFn",
                "altName": null,
                "description": "Optional configuration function for the module. Same as\n{@link angular.Module#config Module#config()}.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.module",
        "module": "ng",
        "description": "The `angular.module` is a global place for creating, registering and retrieving Angular\nmodules.\nAll modules (angular core or 3rd party) that should be available to an application must be\nregistered using this mechanism.\n\nWhen passed two or more arguments, a new module is created.  If passed only one argument, an\nexisting module (the name passed as the first argument to `module`) is retrieved.\n\n\n# Module\n\nA module is a collection of services, directives, controllers, filters, and configuration information.\n`angular.module` is used to configure the {@link auto.$injector $injector}.\n\n```js\n// Create a new module\nvar myModule = angular.module('myModule', []);\n\n// register a new service\nmyModule.value('appName', 'MyCoolApp');\n\n// configure existing services inside initialization blocks.\nmyModule.config(['$locationProvider', function($locationProvider) {\n// Configure existing providers\n$locationProvider.hashPrefix('!');\n}]);\n```\n\nThen you can create an injector and load your modules like this:\n\n```js\nvar injector = angular.injector(['ng', 'myModule'])\n```\n\nHowever it's more likely that you'll just use\n{@link ng.directive:ngApp ngApp} or\n{@link angular.bootstrap} to simplify this process for you.",
        "returns": "{module} new module with the {@link angular.Module} api.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/loader.js",
        "id": "angular.module",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.module ng.function:angular.module downloaded/angular/angular.js-master/src/loader.js",
        "sortOn": "angular.module",
        "left": 88,
        "level": 1,
        "root": "ng",
        "right": 89
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$anchorScrollProvider",
        "description": "Use `$anchorScrollProvider` to disable automatic scrolling whenever\n{@link ng.$location#hash $location.hash()} changes.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "module": "ng",
        "id": "$anchorScrollProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$anchorScrollProvider ng.provider:$anchorScrollProvider downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "sortOn": "$anchorScrollProvider",
        "left": 90,
        "level": 1,
        "root": "ng",
        "right": 93
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "disableAutoScrolling",
        "description": "By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to\n{@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />\nUse this method to disable automatic scrolling.\n\nIf automatic scrolling is disabled, one must explicitly call\n{@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the\ncurrent hash.",
        "parentDoc": {
            "module": "ng",
            "name": "$anchorScrollProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "module": "ng",
        "id": "disableAutoScrolling",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "disableAutoScrolling ng.method:disableAutoScrolling downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "sortOn": "disableAutoScrolling",
        "left": 91,
        "level": 2,
        "root": "ng",
        "right": 92
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$anchorScroll",
        "kind": "function",
        "requires": [
            "$window",
            "$location",
            "$rootScope"
        ],
        "description": "When called, it checks the current value of {@link ng.$location#hash $location.hash()} and\nscrolls to the related element, according to the rules specified in the\n[Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).\n\nIt also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to\nmatch any anchor whenever it changes. This can be disabled by calling\n{@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.\n\nAdditionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a\nvertical scroll-offset (either fixed or dynamic).",
        "property": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "jqLite",
                        "type": "jqlite"
                    }
                ],
                "varName": "yOffset",
                "altName": null,
                "description": "If set, specifies a vertical scroll-offset. This is often useful when there are fixed\npositioned elements at the top of the page, such as navbars, headers etc.\n\n`yOffset` can be specified in various ways:\n-*number**: A fixed number of pixels to be used as offset.<br /><br />\n-*function**: A getter function called everytime `$anchorScroll()` is executed. Must return\na number representing the offset (in pixels).<br /><br />\n-*jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from\nthe top of the page to the element's bottom will be used as offset.<br />\n**Note**: The element will be taken into account only as long as its `position` is set to\n`fixed`. This option is useful, when dealing with responsive navbars/headers that adjust\ntheir height and/or positioning according to the viewport's size.\n\n<br />\n<div class=\"alert alert-warning\">\nIn order for `yOffset` to work properly, scrolling should take place on the document's root and\nnot some child element.\n</div>",
                "optional": false,
                "defaultValue": null
            }
        ],
        "example": "<example module=\"anchorScrollOffsetExample\">\n       <file name=\"index.html\">\n         <div class=\"fixed-header\" ng-controller=\"headerCtrl\">\n           <a href=\"\" ng-click=\"gotoAnchor(x)\" ng-repeat=\"x in [1,2,3,4,5]\">\n             Go to anchor {{x}}\n           </a>\n         </div>\n         <div id=\"anchor{{x}}\" class=\"anchor\" ng-repeat=\"x in [1,2,3,4,5]\">\n           Anchor {{x}} of 5\n         </div>\n       </file>\n       <file name=\"script.js\">\n         angular.module('anchorScrollOffsetExample', [])\n           .run(['$anchorScroll', function($anchorScroll) {\n             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels\n           }])\n           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',\n             function ($anchorScroll, $location, $scope) {\n               $scope.gotoAnchor = function(x) {\n                 var newHash = 'anchor' + x;\n                 if ($location.hash() !== newHash) {\n                   // set the $location.hash to `newHash` and\n                   // $anchorScroll will automatically scroll to it\n                   $location.hash('anchor' + x);\n                 } else {\n                   // call $anchorScroll() explicitly,\n                   // since $location.hash hasn't changed\n                   $anchorScroll();\n                 }\n               };\n             }\n           ]);\n       </file>\n       <file name=\"style.css\">\n         body {\n           padding-top: 50px;\n         }\n\n         .anchor {\n           border: 2px dashed DarkOrchid;\n           padding: 10px 10px 200px 10px;\n         }\n\n         .fixed-header {\n           background-color: rgba(0, 0, 0, 0.2);\n           height: 50px;\n           position: fixed;\n           top: 0; left: 0; right: 0;\n         }\n\n         .fixed-header > a {\n           display: inline-block;\n           margin: 5px 15px;\n         }\n       </file>\n     </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "module": "ng",
        "id": "$anchorScroll",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$anchorScroll ng.service:$anchorScroll downloaded/angular/angular.js-master/src/ng/anchorScroll.js",
        "sortOn": "$anchorScroll",
        "left": 94,
        "level": 1,
        "root": "ng",
        "right": 95
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$animateProvider",
        "description": "The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.\nWhen an animation is triggered, the $animate service will query the $animate service to find any animations that match\nthe provided name value.\n\nRequires the {@link ngAnimate `ngAnimate`} module to be installed.\n\nPlease visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "$animateProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$animateProvider ng.provider:$animateProvider downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "$animateProvider",
        "left": 96,
        "level": 1,
        "root": "ng",
        "right": 101
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the animation.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "factory",
                "altName": null,
                "description": "The factory function that will be executed to return the animation\nobject.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "register",
        "description": "Registers a new injectable animation factory function. The factory function produces the\nanimation object which contains callback functions for each event that is expected to be\nanimated.\n\n* `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`\nmust be called once the element animation is complete. If a function is returned then the\nanimation service will use this function to cancel the animation whenever a cancel event is\ntriggered.\n\n\n```js\nreturn {\neventFn : function(element, done) {\n//code to run the animation\n//once complete, then run done()\nreturn function cancellationFunction() {\n//code to cancel the animation\n}\n}\n}\n```",
        "parentDoc": {
            "module": "ng",
            "name": "$animateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/animate.js",
        "module": "ng",
        "id": "register",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "register ng.method:register downloaded/angular/angular.js-master/src/ng/animate.js",
        "sortOn": "register",
        "left": 97,
        "level": 2,
        "root": "ng",
        "right": 98
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "The className expression which will be checked against all animations",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "classNameFilter",
        "description": "Sets and/or returns the CSS class regular expression that is checked when performing\nan animation. Upon bootstrap the classNameFilter value is not set at all and will\ntherefore enable $animate to attempt to perform an animation on any element.\nWhen setting the classNameFilter value, animations will only be performed on elements\nthat successfully match the filter expression. This in turn can boost performance\nfor low-powered devices as well as applications containing a lot of structural operations.",
        "return": "{RegExp} The current CSS className expression value. If null then there is no expression value",
        "parentDoc": {
            "module": "ng",
            "name": "$animateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/animate.js",
        "module": "ng",
        "id": "classNameFilter",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "classNameFilter ng.method:classNameFilter downloaded/angular/angular.js-master/src/ng/animate.js",
        "sortOn": "classNameFilter",
        "left": 99,
        "level": 2,
        "root": "ng",
        "right": 100
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$animate",
        "kind": "object",
        "description": "The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.\nWhen any of these operations are run, the $animate service\nwill examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)\nas well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.\n\nThe `$animate` service is used behind the scenes with pre-existing directives and animation with these directives\nwill work out of the box without any extra configuration.\n\nRequires the {@link ngAnimate `ngAnimate`} module to be installed.\n\nPlease visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.\n## Callback Promises\nWith AngularJS 1.3, each of the animation methods, on the `$animate` service, return a promise when called. The\npromise itself is then resolved once the animation has completed itself, has been cancelled or has been\nskipped due to animations being disabled. (Note that even if the animation is cancelled it will still\ncall the resolve function of the animation.)\n\n```js\n$animate.enter(element, container).then(function() {\n//...this is called once the animation is complete...\n});\n```\n\nAlso note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope,\nlocation of the page, etc...) is executed within the callback promise then be sure to wrap the code using\n`$scope.$apply(...)`;\n\n```js\n$animate.leave(element).then(function() {\n$scope.$apply(function() {\n$location.path('/new-page');\n});\n});\n```\n\nAn animation can also be cancelled by calling the `$animate.cancel(promise)` method with the provided\npromise that was returned when the animation was started.\n\n```js\nvar promise = $animate.addClass(element, 'super-long-animation');\npromise.then(function() {\n//this will still be called even if cancelled\n});\n\nelement.on('click', function() {\n//tooo lazy to wait for the animation to end\n$animate.cancel(promise);\n});\n```\n\n(Keep in mind that the promise cancellation is unique to `$animate` since promises in\ngeneral cannot be cancelled.)",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "$animate",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$animate ng.service:$animate downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "$animate",
        "left": 102,
        "level": 1,
        "root": "ng",
        "right": 121
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be the focus of the enter animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "parentElement",
                "altName": null,
                "description": "the parent element of the element that will be the focus of the enter animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "afterElement",
                "altName": null,
                "description": "the sibling element (which is the previous element) of the element that will be the focus of the enter animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of options that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "enter",
        "kind": "function",
        "description": "Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once\nthe animation is started, the following CSS classes will be present on the element for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during enter animation:\n\n| Animation Step                                                                                                        | What the element class attribute looks like                |\n|-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| 1. `$animate.enter(...)` is called                                                                                    | `class=\"my-animation\"`                                     |\n| 2. element is inserted into the `parentElement` element or beside the `afterElement` element                          | `class=\"my-animation\"`                                     |\n| 3. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                          |\n| 4. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                          |\n| 5. the `.ng-enter` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-enter\"`                 |\n| 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate ng-enter\"`                 |\n| 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-enter` class styling is applied right away | `class=\"my-animation ng-animate ng-enter\"`                 |\n| 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate ng-enter\"`                 |\n| 9. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate ng-enter\"`                 |\n| 10. the `.ng-enter-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate ng-enter ng-enter-active\"` |\n| 11. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate ng-enter ng-enter-active\"` |\n| 12. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                     |\n| 13. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                     |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "enter",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "enter ng.method:enter downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "enter",
        "left": 103,
        "level": 2,
        "root": "ng",
        "right": 104
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be the focus of the leave animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of styles that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "leave",
        "kind": "function",
        "description": "Runs the leave animation operation and, upon completion, removes the element from the DOM. Once\nthe animation is started, the following CSS classes will be added for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during leave animation:\n\n| Animation Step                                                                                                        | What the element class attribute looks like                |\n|-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| 1. `$animate.leave(...)` is called                                                                                    | `class=\"my-animation\"`                                     |\n| 2. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                          |\n| 3. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                          |\n| 4. the `.ng-leave` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-leave\"`                 |\n| 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate ng-leave\"`                 |\n| 6. `$animate` blocks all CSS transitions on the element to ensure the `.ng-leave` class styling is applied right away | `class=\"my-animation ng-animate ng-leave\"`                 |\n| 7. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate ng-leave\"`                 |\n| 8. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate ng-leave\"`                 |\n| 9. the `.ng-leave-active` class is added (this triggers the CSS transition/animation)                                 | `class=\"my-animation ng-animate ng-leave ng-leave-active\"` |\n| 10. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate ng-leave ng-leave-active\"` |\n| 11. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                     |\n| 12. The element is removed from the DOM                                                                               | ...                                                        |\n| 13. The returned promise is resolved.                                                                                 | ...                                                        |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "leave",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "leave ng.method:leave downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "leave",
        "left": 105,
        "level": 2,
        "root": "ng",
        "right": 106
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be the focus of the move animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "parentElement",
                "altName": null,
                "description": "the parentElement element of the element that will be the focus of the move animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "afterElement",
                "altName": null,
                "description": "the sibling element (which is the previous element) of the element that will be the focus of the move animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of styles that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "move",
        "kind": "function",
        "description": "Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or\nadd the element directly after the afterElement element if present. Then the move animation will be run. Once\nthe animation is started, the following CSS classes will be added for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during move animation:\n\n| Animation Step                                                                                                       | What the element class attribute looks like              |\n|----------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|\n| 1. `$animate.move(...)` is called                                                                                    | `class=\"my-animation\"`                                   |\n| 2. element is moved into the parentElement element or beside the afterElement element                                | `class=\"my-animation\"`                                   |\n| 3. `$animate` waits for the next digest to start the animation                                                       | `class=\"my-animation ng-animate\"`                        |\n| 4. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class=\"my-animation ng-animate\"`                        |\n| 5. the `.ng-move` class is added to the element                                                                      | `class=\"my-animation ng-animate ng-move\"`                |\n| 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class=\"my-animation ng-animate ng-move\"`                |\n| 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-move` class styling is applied right away | `class=\"my-animation ng-animate ng-move\"`                |\n| 8. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class=\"my-animation ng-animate ng-move\"`                |\n| 9. `$animate` removes the CSS transition block placed on the element                                                 | `class=\"my-animation ng-animate ng-move\"`                |\n| 10. the `.ng-move-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate ng-move ng-move-active\"` |\n| 11. `$animate` waits for the animation to complete (via events and timeout)                                          | `class=\"my-animation ng-animate ng-move ng-move-active\"` |\n| 12. The animation ends and all generated CSS classes are removed from the element                                    | `class=\"my-animation\"`                                   |\n| 13. The returned promise is resolved.                                                                                | `class=\"my-animation\"`                                   |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "move",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "move ng.method:move downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "move",
        "left": 107,
        "level": 2,
        "root": "ng",
        "right": 108
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be animated",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "className",
                "altName": null,
                "description": "the CSS class that will be added to the element and then animated",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of styles that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "addClass",
        "description": "Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.\nUnlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide\nthe animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions\nor keyframes are defined on the -add-active or base CSS class).\n\nBelow is a breakdown of each step that occurs during addClass animation:\n\n| Animation Step                                                                                         | What the element class attribute looks like                        |\n|--------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n| 1. `$animate.addClass(element, 'super')` is called                                                     | `class=\"my-animation\"`                                             |\n| 2. `$animate` runs the JavaScript-defined animations detected on the element                           | `class=\"my-animation ng-animate\"`                                  |\n| 3. the `.super-add` class is added to the element                                                      | `class=\"my-animation ng-animate super-add\"`                        |\n| 4. `$animate` waits for a single animation frame (this performs a reflow)                              | `class=\"my-animation ng-animate super-add\"`                        |\n| 5. the `.super` and `.super-add-active` classes are added (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n| 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay          | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n| 7. `$animate` waits for the animation to complete (via events and timeout)                             | `class=\"my-animation ng-animate super super-add super-add-active\"` |\n| 8. The animation ends and all generated CSS classes are removed from the element                       | `class=\"my-animation super\"`                                       |\n| 9. The super class is kept on the element                                                              | `class=\"my-animation super\"`                                       |\n| 10. The returned promise is resolved.                                                                  | `class=\"my-animation super\"`                                       |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "addClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "addClass ng.method:addClass downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "addClass",
        "left": 109,
        "level": 2,
        "root": "ng",
        "right": 110
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be animated",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "className",
                "altName": null,
                "description": "the CSS class that will be animated and then removed from the element",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of styles that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "removeClass",
        "description": "Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value\nfrom the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in\norder to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if\nno CSS transitions or keyframes are defined on the -remove or base CSS classes).\n\nBelow is a breakdown of each step that occurs during removeClass animation:\n\n| Animation Step                                                                                                       | What the element class attribute looks like                        |\n|----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|\n| 1. `$animate.removeClass(element, 'super')` is called                                                                | `class=\"my-animation super\"`                                       |\n| 2. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class=\"my-animation super ng-animate\"`                            |\n| 3. the `.super-remove` class is added to the element                                                                 | `class=\"my-animation super ng-animate super-remove\"`               |\n| 4. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class=\"my-animation super ng-animate super-remove\"`               |\n| 5. the `.super-remove-active` classes are added and `.super` is removed (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n| 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n| 7. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate super-remove super-remove-active\"` |\n| 8. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                             |\n| 9. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                             |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "removeClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "removeClass ng.method:removeClass downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "removeClass",
        "left": 111,
        "level": 2,
        "root": "ng",
        "right": 112
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element which will have its CSS classes changed\nremoved from it",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "add",
                "altName": null,
                "description": "the CSS classes which will be added to the element",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "remove",
                "altName": null,
                "description": "the CSS class which will be removed from the element\nCSS classes have been set on the element",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of styles that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "setClass",
        "description": "Adds and/or removes the given CSS classes to and from the element.\nOnce complete, the `done()` callback will be fired (if provided).\n\n| Animation Step                                                                                                                               | What the element class attribute looks like                                            |\n|----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|\n| 1. `$animate.setClass(element, 'on', 'off')` is called                                                                                       | `class=\"my-animation off\"`                                                             |\n| 2. `$animate` runs the JavaScript-defined animations detected on the element                                                                 | `class=\"my-animation ng-animate off\"`                                                  |\n| 3. the `.on-add` and `.off-remove` classes are added to the element                                                                          | `class=\"my-animation ng-animate on-add off-remove off\"`                                |\n| 4. `$animate` waits for a single animation frame (this performs a reflow)                                                                    | `class=\"my-animation ng-animate on-add off-remove off\"`                                |\n| 5. the `.on`, `.on-add-active` and `.off-remove-active` classes are added and `.off` is removed (this triggers the CSS transition/animation) | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n| 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                                                | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n| 7. `$animate` waits for the animation to complete (via events and timeout)                                                                   | `class=\"my-animation ng-animate on on-add on-add-active off-remove off-remove-active\"` |\n| 8. The animation ends and all generated CSS classes are removed from the element                                                             | `class=\"my-animation on\"`                                                              |\n| 9. The returned promise is resolved.                                                                                                         | `class=\"my-animation on\"`                                                              |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "setClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "setClass ng.method:setClass downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "setClass",
        "left": 113,
        "level": 2,
        "root": "ng",
        "right": 114
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "the element that will be the focus of the enter animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "from",
                "altName": null,
                "description": "a collection of CSS styles that will be applied to the element at the start of the animation",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "to",
                "altName": null,
                "description": "a collection of CSS styles that the element will animate towards",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "className",
                "altName": null,
                "description": "an optional CSS class that will be added to the element for the duration of the animation (the default class is `ng-inline-animate`)",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "an optional collection of options that will be picked up by the CSS transition/animation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "animate",
        "kind": "function",
        "description": "Performs an inline animation on the element which applies the provided `to` and `from` CSS styles to the element.\nIf any detected CSS transition, keyframe or JavaScript matches the provided `className` value then the animation\nwill take on the provided styles. For example, if a transition animation is set for the given className then the\nprovided `from` and `to` styles will be applied alongside the given transition. If a JavaScript animation is\ndetected then the provided styles will be given in as function paramters.\n\n```js\nngModule.animation('.my-inline-animation', function() {\nreturn {\nanimate : function(element, className, from, to, done) {\n//styles\n}\n}\n});\n```\n\nBelow is a breakdown of each step that occurs during the `animate` animation:\n\n| Animation Step                                                                                                        | What the element class attribute looks like                  |\n|-----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|\n| 1. `$animate.animate(...)` is called                                                                                  | `class=\"my-animation\"`                                       |\n| 2. `$animate` waits for the next digest to start the animation                                                        | `class=\"my-animation ng-animate\"`                            |\n| 3. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class=\"my-animation ng-animate\"`                            |\n| 4. the `className` class value is added to the element                                                                | `class=\"my-animation ng-animate className\"`                  |\n| 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class=\"my-animation ng-animate className\"`                  |\n| 6. `$animate` blocks all CSS transitions on the element to ensure the `.className` class styling is applied right away| `class=\"my-animation ng-animate className\"`                  |\n| 7. `$animate` applies the provided collection of `from` CSS styles to the element                                     | `class=\"my-animation ng-animate className\"`                  |\n| 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class=\"my-animation ng-animate className\"`                  |\n| 9. `$animate` removes the CSS transition block placed on the element                                                  | `class=\"my-animation ng-animate className\"`                  |\n| 10. the `className-active` class is added (this triggers the CSS transition/animation)                                | `class=\"my-animation ng-animate className className-active\"` |\n| 11. `$animate` applies the collection of `to` CSS styles to the element which are then handled by the transition      | `class=\"my-animation ng-animate className className-active\"` |\n| 12. `$animate` waits for the animation to complete (via events and timeout)                                           | `class=\"my-animation ng-animate className className-active\"` |\n| 13. The animation ends and all generated CSS classes are removed from the element                                     | `class=\"my-animation\"`                                       |\n| 14. The returned promise is resolved.                                                                                 | `class=\"my-animation\"`                                       |",
        "return": "{Promise} the animation callback promise",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "animate",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "animate ng.method:animate downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "animate",
        "left": 115,
        "level": 2,
        "root": "ng",
        "right": 116
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Promise",
                        "type": "promise"
                    }
                ],
                "varName": "animationPromise",
                "altName": null,
                "description": "The animation promise that is returned when an animation is started.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "cancel",
        "kind": "function",
        "description": "Cancels the provided animation.",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "cancel",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "cancel ng.method:cancel downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "cancel",
        "left": 117,
        "level": 2,
        "root": "ng",
        "right": 118
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "If provided then set the animation on or off.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "If provided then the element will be used to represent the enable/disable operation",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "enabled",
        "kind": "function",
        "return": "{boolean} Current animation state.",
        "description": "Globally enables/disables animations.",
        "parentDoc": {
            "module": "ng",
            "name": "$animate"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "module": "ng",
        "id": "enabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "enabled ng.method:enabled downloaded/angular/angular.js-master/src/ngAnimate/animate.js",
        "sortOn": "enabled",
        "left": 119,
        "level": 2,
        "root": "ng",
        "right": 120
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "cacheId",
                "altName": null,
                "description": "Name or id of the newly created cache.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "Options object that specifies the cache behavior. Properties:\n\n- `{number=}` `capacity` — turns the cache into LRU cache.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$cacheFactory",
        "description": "Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to\nthem.\n\n```js\n\nvar cache = $cacheFactory('cacheId');\nexpect($cacheFactory.get('cacheId')).toBe(cache);\nexpect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();\n\ncache.put(\"key\", \"value\");\ncache.put(\"another key\", \"another value\");\n\n// We've specified no options on creation\nexpect(cache.info()).toEqual({id: 'cacheId', size: 2});\n\n```",
        "returns": "{object} Newly created cache object with the following set of methods:\n\n- `{object}` `info()` — Returns id, size, and options of cache.\n- `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns\nit.\n- `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n- `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n- `{void}` `removeAll()` — Removes all cached values.\n- `{void}` `destroy()` — Removes references to this cache from $cacheFactory.",
        "example": "<example module=\"cacheExampleApp\">\n     <file name=\"index.html\">\n       <div ng-controller=\"CacheController\">\n         <input ng-model=\"newCacheKey\" placeholder=\"Key\">\n         <input ng-model=\"newCacheValue\" placeholder=\"Value\">\n         <button ng-click=\"put(newCacheKey, newCacheValue)\">Cache</button>\n\n         <p ng-if=\"keys.length\">Cached Values</p>\n         <div ng-repeat=\"key in keys\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"cache.get(key)\"></b>\n         </div>\n\n         <p>Cache Info</p>\n         <div ng-repeat=\"(key, value) in cache.info()\">\n           <span ng-bind=\"key\"></span>\n           <span>: </span>\n           <b ng-bind=\"value\"></b>\n         </div>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('cacheExampleApp', []).\n         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {\n           $scope.keys = [];\n           $scope.cache = $cacheFactory('cacheId');\n           $scope.put = function(key, value) {\n             if ($scope.cache.get(key) === undefined) {\n               $scope.keys.push(key);\n             }\n             $scope.cache.put(key, value === undefined ? null : value);\n           };\n         }]);\n     </file>\n     <file name=\"style.css\">\n       p {\n         margin: 10px 0 3px;\n       }\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "$cacheFactory",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$cacheFactory ng.service:$cacheFactory downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "$cacheFactory",
        "left": 122,
        "level": 1,
        "root": "ng",
        "right": 127
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "info",
        "description": "Get information about all the caches that have been created",
        "returns": "{Object} - key-value map of `cacheId` to the result of calling `cache#info`",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "info",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "info ng.method:info downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "info",
        "left": 123,
        "level": 2,
        "root": "ng",
        "right": 124
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "cacheId",
                "altName": null,
                "description": "Name or id of a cache to access.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "description": "Get access to a cache object by the `cacheId` used when it was created.",
        "returns": "{object} Cache object identified by the cacheId or undefined if no such cache.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get ng.method:get downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "get",
        "left": 125,
        "level": 2,
        "root": "ng",
        "right": 126
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "$cacheFactory.Cache",
        "description": "A cache object used to store and retrieve data, primarily used by\n{@link $http $http} and the {@link ng.directive:script script} directive to cache\ntemplates and other data.\n\n```js\nangular.module('superCache')\n.factory('superCache', ['$cacheFactory', function($cacheFactory) {\nreturn $cacheFactory('super-cache');\n}]);\n```\n\nExample test:\n\n```js\nit('should behave like a cache', inject(function(superCache) {\nsuperCache.put('key', 'value');\nsuperCache.put('another key', 'another value');\n\nexpect(superCache.info()).toEqual({\nid: 'super-cache',\nsize: 2\n});\n\nsuperCache.remove('another key');\nexpect(superCache.get('another key')).toBeUndefined();\n\nsuperCache.removeAll();\nexpect(superCache.info()).toEqual({\nid: 'super-cache',\nsize: 0\n});\n}));\n```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "$cacheFactory.Cache",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "$cacheFactory.Cache ng.type:$cacheFactory.Cache downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "$cacheFactory.Cache",
        "left": 128,
        "level": 1,
        "root": "ng",
        "right": 141
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "the key under which the cached data is stored.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "the value to store alongside the key. If it is undefined, the key\nwill not be stored.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "put",
        "kind": "function",
        "description": "Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be\nretrieved later, and incrementing the size of the cache if the key was not already\npresent in the cache. If behaving like an LRU cache, it will also remove stale\nentries from the set.\n\nIt will not insert undefined values into the cache.",
        "returns": "{*} the value stored.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "put",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "put ng.method:put downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "put",
        "left": 129,
        "level": 2,
        "root": "ng",
        "right": 130
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "the key of the data to be retrieved",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "kind": "function",
        "description": "Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.",
        "returns": "{*} the value stored.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get ng.method:get downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "get",
        "left": 131,
        "level": 2,
        "root": "ng",
        "right": 132
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "the key of the entry to be removed",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "remove",
        "kind": "function",
        "description": "Removes an entry from the {@link $cacheFactory.Cache Cache} object.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "remove",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "remove ng.method:remove downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "remove",
        "left": 133,
        "level": 2,
        "root": "ng",
        "right": 134
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "removeAll",
        "kind": "function",
        "description": "Clears the cache object of any entries.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "removeAll",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "removeAll ng.method:removeAll downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "removeAll",
        "left": 135,
        "level": 2,
        "root": "ng",
        "right": 136
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "destroy",
        "kind": "function",
        "description": "Destroys the {@link $cacheFactory.Cache Cache} object entirely,\nremoving it from the {@link $cacheFactory $cacheFactory} set.",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "destroy",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "destroy ng.method:destroy downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "destroy",
        "left": 137,
        "level": 2,
        "root": "ng",
        "right": 138
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "info",
        "kind": "function",
        "description": "Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.",
        "returns": "{object} an object with the following properties:\n<ul>\n<li>**id**: the id of the cache instance</li>\n<li>**size**: the number of entries kept in the cache instance</li>\n<li>**...**: any additional properties from the options object when creating the\ncache.</li>\n</ul>",
        "parentDoc": {
            "module": "ng",
            "name": "$cacheFactory.Cache"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "info",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "info ng.method:info downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "info",
        "left": 139,
        "level": 2,
        "root": "ng",
        "right": 140
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$templateCache",
        "description": "The first time a template is used, it is loaded in the template cache for quick retrieval. You\ncan load templates directly into the cache in a `script` tag, or by consuming the\n`$templateCache` service directly.\n\nAdding via the `script` tag:\n\n```html\n<script type=\"text/ng-template\" id=\"templateId.html\">\n<p>This is the content of the template</p>\n</script>\n```\n\n**Note:** the `script` tag containing the template does not need to be included in the `head` of\nthe document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,\nelement with ng-app attribute), otherwise the template will be ignored.\n\nAdding via the `$templateCache` service:\n\n```js\nvar myApp = angular.module('myApp', []);\nmyApp.run(function($templateCache) {\n$templateCache.put('templateId.html', 'This is the content of the template');\n});\n```\n\nTo retrieve the template later, simply use it in your HTML:\n```html\n<div ng-include=\" 'templateId.html' \"></div>\n```\n\nor get it via Javascript:\n```js\n$templateCache.get('templateId.html')\n```\n\nSee {@link ng.$cacheFactory $cacheFactory}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "module": "ng",
        "id": "$templateCache",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$templateCache ng.service:$templateCache downloaded/angular/angular.js-master/src/ng/cacheFactory.js",
        "sortOn": "$templateCache",
        "left": 142,
        "level": 1,
        "root": "ng",
        "right": 143
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "DOMElement",
                        "type": "domelement"
                    }
                ],
                "varName": "element",
                "altName": null,
                "description": "Element or HTML string to compile into a template function.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "angular.Scope",
                        "type": "angular.scope"
                    },
                    {
                        "name": "cloneAttachFn",
                        "type": "cloneattachfn"
                    }
                ],
                "varName": "transclude",
                "altName": null,
                "description": "function available to directives - DEPRECATED.\n\n<div class=\"alert alert-danger\">\n**Note:** Passing a `transclude` function to the $compile function is deprecated, as it\ne.g. will not use the right outer scope. Please pass the transclude function as a\n`parentBoundTranscludeFn` to the link function instead.\n</div>",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "maxPriority",
                "altName": null,
                "description": "only apply directives lower than given priority (Only effects the\nroot element(s), not their children)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$compile",
        "kind": "function",
        "description": "Compiles an HTML string or DOM into a template and produces a template function, which\ncan then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.\n\nThe compilation is a process of walking the DOM tree and matching DOM elements to\n{@link ng.$compileProvider#directive directives}.\n\n<div class=\"alert alert-warning\">\n**Note:** This document is an in-depth reference of all directive options.\nFor a gentle introduction to directives with examples of common use cases,\nsee the {@link guide/directive directive guide}.\n</div>\n\n## Comprehensive Directive API\n\nThere are many different options for a directive.\n\nThe difference resides in the return value of the factory function.\nYou can either return a \"Directive Definition Object\" (see below) that defines the directive properties,\nor just the `postLink` function (all other properties will have the default values).\n\n<div class=\"alert alert-success\">\n**Best Practice:** It's recommended to use the \"directive definition object\" form.\n</div>\n\nHere's an example directive declared with a Directive Definition Object:\n\n```js\nvar myModule = angular.module(...);\n\nmyModule.directive('directiveName', function factory(injectables) {\nvar directiveDefinitionObject = {\npriority: 0,\ntemplate: '<div></div>', // or // function(tElement, tAttrs) { ... },\n// or\n// templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },\ntransclude: false,\nrestrict: 'A',\ntemplateNamespace: 'html',\nscope: false,\ncontroller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },\ncontrollerAs: 'stringIdentifier',\nbindToController: false,\nrequire: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],\ncompile: function compile(tElement, tAttrs, transclude) {\nreturn {\npre: function preLink(scope, iElement, iAttrs, controller) { ... },\npost: function postLink(scope, iElement, iAttrs, controller) { ... }\n}\n// or\n// return function postLink( ... ) { ... }\n},\n// or\n// link: {\n//  pre: function preLink(scope, iElement, iAttrs, controller) { ... },\n//  post: function postLink(scope, iElement, iAttrs, controller) { ... }\n// }\n// or\n// link: function postLink( ... ) { ... }\n};\nreturn directiveDefinitionObject;\n});\n```\n\n<div class=\"alert alert-warning\">\n**Note:** Any unspecified options will use the default value. You can see the default values below.\n</div>\n\nTherefore the above can be simplified as:\n\n```js\nvar myModule = angular.module(...);\n\nmyModule.directive('directiveName', function factory(injectables) {\nvar directiveDefinitionObject = {\nlink: function postLink(scope, iElement, iAttrs) { ... }\n};\nreturn directiveDefinitionObject;\n// or\n// return function postLink(scope, iElement, iAttrs) { ... }\n});\n```\n\n\n\n### Directive Definition Object\n\nThe directive definition object provides instructions to the {@link ng.$compile\ncompiler}. The attributes are:\n\n#### `multiElement`\nWhen this property is set to true, the HTML compiler will collect DOM nodes between\nnodes with the attributes `directive-name-start` and `directive-name-end`, and group them\ntogether as the directive elements. It is recommended that this feature be used on directives\nwhich are not strictly behavioural (such as {@link ngClick}), and which\ndo not manipulate or replace child nodes (such as {@link ngInclude}).\n\n#### `priority`\nWhen there are multiple directives defined on a single DOM element, sometimes it\nis necessary to specify the order in which the directives are applied. The `priority` is used\nto sort the directives before their `compile` functions get called. Priority is defined as a\nnumber. Directives with greater numerical `priority` are compiled first. Pre-link functions\nare also run in priority order, but post-link functions are run in reverse order. The order\nof directives with the same priority is undefined. The default priority is `0`.\n\n#### `terminal`\nIf set to true then the current `priority` will be the last set of directives\nwhich will execute (any directives at the current priority will still execute\nas the order of execution on same `priority` is undefined). Note that expressions\nand other directives used in the directive's template will also be excluded from execution.\n\n#### `scope`\n**If set to `true`,** then a new scope will be created for this directive. If multiple directives on the\nsame element request a new scope, only one new scope is created. The new scope rule does not\napply for the root of the template since the root of the template always gets a new scope.\n\n**If set to `{}` (object hash),** then a new \"isolate\" scope is created. The 'isolate' scope differs from\nnormal scope in that it does not prototypically inherit from the parent scope. This is useful\nwhen creating reusable components, which should not accidentally read or modify data in the\nparent scope.\n\nThe 'isolate' scope takes an object hash which defines a set of local scope properties\nderived from the parent scope. These local properties are useful for aliasing values for\ntemplates. Locals definition is a hash of local scope property to its source:\n\n* `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is\nalways a string since DOM attributes are strings. If no `attr` name is specified  then the\nattribute name is assumed to be the same as the local name.\nGiven `<widget my-attr=\"hello {{name}}\">` and widget definition\nof `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect\nthe interpolated value of `hello {{name}}`. As the `name` attribute changes so will the\n`localName` property on the widget scope. The `name` is read from the parent scope (not\ncomponent scope).\n\n* `=` or `=attr` - set up bi-directional binding between a local scope property and the\nparent scope property of name defined via the value of the `attr` attribute. If no `attr`\nname is specified then the attribute name is assumed to be the same as the local name.\nGiven `<widget my-attr=\"parentModel\">` and widget definition of\n`scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the\nvalue of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected\nin `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent\nscope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You\ncan avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If\nyou want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use\n`=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).\n\n* `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.\nIf no `attr` name is specified then the attribute name is assumed to be the same as the\nlocal name. Given `<widget my-attr=\"count = count + value\">` and widget definition of\n`scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to\na function wrapper for the `count = count + value` expression. Often it's desirable to\npass data from the isolated scope via an expression to the parent scope, this can be\ndone by passing a map of local variable names and values into the expression wrapper fn.\nFor example, if the expression is `increment(amount)` then we can specify the amount value\nby calling the `localFn` as `localFn({amount: 22})`.\n\n\n#### `bindToController`\nWhen an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will\nallow a component to have its properties bound to the controller, rather than to scope. When the controller\nis instantiated, the initial values of the isolate scope bindings are already available.\n\n#### `controller`\nController constructor function. The controller is instantiated before the\npre-linking phase and it is shared with other directives (see\n`require` attribute). This allows the directives to communicate with each other and augment\neach other's behavior. The controller is injectable (and supports bracket notation) with the following locals:\n\n* `$scope` - Current scope associated with the element\n* `$element` - Current element\n* `$attrs` - Current attributes object for the element\n* `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:\n`function([scope], cloneLinkingFn, futureParentElement)`.\n* `scope`: optional argument to override the scope.\n* `cloneLinkingFn`: optional argument to create clones of the original transcluded content.\n* `futureParentElement`:\n* defines the parent to which the `cloneLinkingFn` will add the cloned elements.\n* default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.\n* only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)\nand when the `cloneLinkinFn` is passed,\nas those elements need to created and cloned in a special way when they are defined outside their\nusual containers (e.g. like `<svg>`).\n* See also the `directive.templateNamespace` property.\n\n\n#### `require`\nRequire another directive and inject its controller as the fourth argument to the linking function. The\n`require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the\ninjected argument will be an array in corresponding order. If no such directive can be\nfound, or if the directive does not have a controller, then an error is raised (unless no link function\nis specified, in which case error checking is skipped). The name can be prefixed with:\n\n* (no prefix) - Locate the required controller on the current element. Throw an error if not found.\n* `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.\n* `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.\n* `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.\n* `?^` - Attempt to locate the required controller by searching the element and its parents or pass\n`null` to the `link` fn if not found.\n* `?^^` - Attempt to locate the required controller by searching the element's parents, or pass\n`null` to the `link` fn if not found.\n\n\n#### `controllerAs`\nIdentifier name for a reference to the controller in the directive's scope.\nThis allows the controller to be referenced from the directive template. The directive\nneeds to define a scope for this configuration to be used. Useful in the case when\ndirective is used as component.\n\n\n#### `restrict`\nString of subset of `EACM` which restricts the directive to a specific directive\ndeclaration style. If omitted, the defaults (elements and attributes) are used.\n\n* `E` - Element name (default): `<my-directive></my-directive>`\n* `A` - Attribute (default): `<div my-directive=\"exp\"></div>`\n* `C` - Class: `<div class=\"my-directive: exp;\"></div>`\n* `M` - Comment: `<!-- directive: my-directive exp -->`\n\n\n#### `templateNamespace`\nString representing the document type used by the markup in the template.\nAngularJS needs this information as those elements need to be created and cloned\nin a special way when they are defined outside their usual containers like `<svg>` and `<math>`.\n\n* `html` - All root nodes in the template are HTML. Root nodes may also be\ntop-level elements such as `<svg>` or `<math>`.\n* `svg` - The root nodes in the template are SVG elements (excluding `<math>`).\n* `math` - The root nodes in the template are MathML elements (excluding `<svg>`).\n\nIf no `templateNamespace` is specified, then the namespace is considered to be `html`.\n\n#### `template`\nHTML markup that may:\n* Replace the contents of the directive's element (default).\n* Replace the directive's element itself (if `replace` is true - DEPRECATED).\n* Wrap the contents of the directive's element (if `transclude` is true).\n\nValue may be:\n\n* A string. For example `<div red-on-hover>{{delete_str}}</div>`.\n* A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`\nfunction api below) and returns a string value.\n\n\n#### `templateUrl`\nThis is similar to `template` but the template is loaded from the specified URL, asynchronously.\n\nBecause template loading is asynchronous the compiler will suspend compilation of directives on that element\nfor later when the template has been resolved.  In the meantime it will continue to compile and link\nsibling and parent elements as though this element had not contained any directives.\n\nThe compiler does not suspend the entire compilation to wait for templates to be loaded because this\nwould result in the whole app \"stalling\" until all templates are loaded asynchronously - even in the\ncase when only one deeply nested directive has `templateUrl`.\n\nTemplate loading is asynchronous even if the template has been preloaded into the {@link $templateCache}\n\nYou can specify `templateUrl` as a string representing the URL or as a function which takes two\narguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns\na string value representing the url.  In either case, the template URL is passed through {@link\n$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.\n\n\n#### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)\nspecify what the template should replace. Defaults to `false`.\n\n* `true` - the template will replace the directive's element.\n* `false` - the template will replace the contents of the directive's element.\n\nThe replacement process migrates all of the attributes / classes from the old element to the new\none. See the {@link guide/directive#template-expanding-directive\nDirectives Guide} for an example.\n\nThere are very few scenarios where element replacement is required for the application function,\nthe main one being reusable custom components that are used within SVG contexts\n(because SVG doesn't work with custom elements in the DOM tree).\n\n#### `transclude`\nExtract the contents of the element where the directive appears and make it available to the directive.\nThe contents are compiled and provided to the directive as a*transclusion function**. See the\n{@link $compile#transclusion Transclusion} section below.\n\nThere are two kinds of transclusion depending upon whether you want to transclude just the contents of the\ndirective's element or the entire element:\n\n* `true` - transclude the content (i.e. the child nodes) of the directive's element.\n* `'element'` - transclude the whole of the directive's element including any directives on this\nelement that defined at a lower priority than this directive. When used, the `template`\nproperty is ignored.\n\n\n#### `compile`\n\n```js\nfunction compile(tElement, tAttrs, transclude) { ... }\n```\n\nThe compile function deals with transforming the template DOM. Since most directives do not do\ntemplate transformation, it is not used often. The compile function takes the following arguments:\n\n* `tElement` - template element - The element where the directive has been declared. It is\nsafe to do template transformation on the element and child elements only.\n\n* `tAttrs` - template attributes - Normalized list of attributes declared on this element shared\nbetween all directive compile functions.\n\n* `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`\n\n<div class=\"alert alert-warning\">\n**Note:** The template instance and the link instance may be different objects if the template has\nbeen cloned. For this reason it is*not** safe to do anything other than DOM transformations that\napply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration\nshould be done in a linking function rather than in a compile function.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** The compile function cannot handle directives that recursively use themselves in their\nown templates or compile functions. Compiling these directives results in an infinite loop and a\nstack overflow errors.\n\nThis can be avoided by manually using $compile in the postLink function to imperatively compile\na directive's template instead of relying on automatic template compilation via `template` or\n`templateUrl` declaration or manual compilation inside the compile function.\n</div>\n\n<div class=\"alert alert-danger\">\n**Note:** The `transclude` function that is passed to the compile function is deprecated, as it\ne.g. does not know about the right outer scope. Please use the transclude function that is passed\nto the link function instead.\n</div>\n\nA compile function can have a return value which can be either a function or an object.\n\n* returning a (post-link) function - is equivalent to registering the linking function via the\n`link` property of the config object when the compile function is empty.\n\n* returning an object with function(s) registered via `pre` and `post` properties - allows you to\ncontrol when a linking function should be called during the linking phase. See info about\npre-linking and post-linking functions below.\n\n\n#### `link`\nThis property is used only if the `compile` property is not defined.\n\n```js\nfunction link(scope, iElement, iAttrs, controller, transcludeFn) { ... }\n```\n\nThe link function is responsible for registering DOM listeners as well as updating the DOM. It is\nexecuted after the template has been cloned. This is where most of the directive logic will be\nput.\n\n* `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the\ndirective for registering {@link ng.$rootScope.Scope#$watch watches}.\n\n* `iElement` - instance element - The element where the directive is to be used. It is safe to\nmanipulate the children of the element only in `postLink` function since the children have\nalready been linked.\n\n* `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared\nbetween all directive linking functions.\n\n* `controller` - the directive's required controller instance(s) - Instances are shared\namong all directives, which allows the directives to use the controllers as a communication\nchannel. The exact value depends on the directive's `require` property:\n* `string`: the controller instance\n* `array`: array of controller instances\n* no controller(s) required: `undefined`\n\nIf a required controller cannot be found, and it is optional, the instance is `null`,\notherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.\n\n* `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.\nThis is the same as the `$transclude`\nparameter of directive controllers, see there for details.\n`function([scope], cloneLinkingFn, futureParentElement)`.\n\n#### Pre-linking function\n\nExecuted before the child elements are linked. Not safe to do DOM transformation since the\ncompiler linking function will fail to locate the correct elements for linking.\n\n#### Post-linking function\n\nExecuted after the child elements are linked.\n\nNote that child elements that contain `templateUrl` directives will not have been compiled\nand linked since they are waiting for their template to load asynchronously and their own\ncompilation and linking has been suspended until that occurs.\n\nIt is safe to do DOM transformation in the post-linking function on elements that are not waiting\nfor their async templates to be resolved.\n\n\n### Transclusion\n\nTransclusion is the process of extracting a collection of DOM element from one part of the DOM and\ncopying them to another part of the DOM, while maintaining their connection to the original AngularJS\nscope from where they were taken.\n\nTransclusion is used (often with {@link ngTransclude}) to insert the\noriginal contents of a directive's element into a specified place in the template of the directive.\nThe benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded\ncontent has access to the properties on the scope from which it was taken, even if the directive\nhas isolated scope.\nSee the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.\n\nThis makes it possible for the widget to have private state for its template, while the transcluded\ncontent has access to its originating scope.\n\n<div class=\"alert alert-warning\">\n**Note:** When testing an element transclude directive you must not place the directive at the root of the\nDOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives\nTesting Transclusion Directives}.\n</div>\n\n#### Transclusion Functions\n\nWhen a directive requests transclusion, the compiler extracts its contents and provides a*transclusion\nfunction** to the directive's `link` function and `controller`. This transclusion function is a special\n**linking function** that will return the compiled contents linked to a new transclusion scope.\n\n<div class=\"alert alert-info\">\nIf you are just using {@link ngTransclude} then you don't need to worry about this function, since\nngTransclude will deal with it for us.\n</div>\n\nIf you want to manually control the insertion and removal of the transcluded content in your directive\nthen you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery\nobject that contains the compiled DOM, which is linked to the correct transclusion scope.\n\nWhen you call a transclusion function you can pass in a*clone attach function**. This function accepts\ntwo parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded\ncontent and the `scope` is the newly created transclusion scope, to which the clone is bound.\n\n<div class=\"alert alert-info\">\n**Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function\nsince you then get a fresh clone of the original DOM and also have access to the new transclusion scope.\n</div>\n\nIt is normal practice to attach your transcluded content (`clone`) to the DOM inside your*clone\nattach function**:\n\n```js\nvar transcludedContent, transclusionScope;\n\n$transclude(function(clone, scope) {\nelement.append(clone);\ntranscludedContent = clone;\ntransclusionScope = scope;\n});\n```\n\nLater, if you want to remove the transcluded content from your DOM then you should also destroy the\nassociated transclusion scope:\n\n```js\ntranscludedContent.remove();\ntransclusionScope.$destroy();\n```\n\n<div class=\"alert alert-info\">\n**Best Practice**: if you intend to add and remove transcluded content manually in your directive\n(by calling the transclude function to get the DOM and calling `element.remove()` to remove it),\nthen you are also responsible for calling `$destroy` on the transclusion scope.\n</div>\n\nThe built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}\nautomatically destroy their transluded clones as necessary so you do not need to worry about this if\nyou are simply using {@link ngTransclude} to inject the transclusion into your directive.\n\n\n#### Transclusion Scopes\n\nWhen you call a transclude function it returns a DOM fragment that is pre-bound to a*transclusion\nscope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed\nwhen the directive's scope gets destroyed) but it inherits the properties of the scope from which it\nwas taken.\n\nFor example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look\nlike this:\n\n```html\n<div ng-app>\n<div isolate>\n<div transclusion>\n</div>\n</div>\n</div>\n```\n\nThe `$parent` scope hierarchy will look like this:\n\n```\n- $rootScope\n- isolate\n- transclusion\n```\n\nbut the scopes will inherit prototypically from different scopes to their `$parent`.\n\n```\n- $rootScope\n- transclusion\n- isolate\n```\n\n\n### Attributes\n\nThe {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the\n`link()` or `compile()` functions. It has a variety of uses.\n\naccessingNormalized attribute names:*\nDirectives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.\nthe attributes object allows for normalized access to\nthe attributes.\n\n*Directive inter-communication:* All directives share the same instance of the attributes\nobject which allows the directives to use the attributes object as inter directive\ncommunication.\n\n*Supports interpolation:* Interpolation attributes are assigned to the attribute object\nallowing other directives to read the interpolated value.\n\n*Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes\nthat contain interpolation (e.g. `src=\"{{bar}}\"`). Not only is this very efficient but it's also\nthe only way to easily get the actual value because during the linking phase the interpolation\nhasn't been evaluated yet and so the value is at this time set to `undefined`.\n\n```js\nfunction linkingFn(scope, elm, attrs, ctrl) {\n// get the attribute value\nconsole.log(attrs.ngModel);\n\n// change the attribute\nattrs.$set('ngModel', 'new value');\n\n// observe changes to interpolated attribute\nattrs.$observe('ngModel', function(value) {\nconsole.log('ngModel has changed value to ' + value);\n});\n}\n```\n\n## Example\n\n<div class=\"alert alert-warning\">\n**Note**: Typically directives are registered with `module.directive`. The example below is\nto illustrate how `$compile` works.\n</div>\n\n <example module=\"compileExample\">\n   <file name=\"index.html\">\n    <script>\n      angular.module('compileExample', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        });\n      })\n      .controller('GreeterController', ['$scope', function($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }]);\n    </script>\n    <div ng-controller=\"GreeterController\">\n      <input ng-model=\"name\"> <br>\n      <textarea ng-model=\"html\"></textarea> <br>\n      <div compile=\"html\"></div>\n    </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should auto compile', function() {\n       var textarea = $('textarea');\n       var output = $('div[compile]');\n       // The initial state reads 'Hello Angular'.\n       expect(output.getText()).toBe('Hello Angular');\n       textarea.clear();\n       textarea.sendKeys('{{name}}!');\n       expect(output.getText()).toBe('Angular!');\n     });\n   </file>\n </example>",
        "returns": "{function(scope, cloneAttachFn=, options=)} a link function which is used to bind template\n(a DOM element/tree) to a scope. Where:\n\n* `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n* `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n`template` and call the `cloneAttachFn` function allowing the caller to attach the\ncloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\ncalled as: <br> `cloneAttachFn(clonedElement, scope)` where:\n\n* `clonedElement` - is a clone of the original `element` passed into the compiler.\n* `scope` - is the current scope with which the linking function is working with.\n\n* `options` - An optional object hash with linking options. If `options` is provided, then the following\nkeys may be used to control linking behavior:\n\n* `parentBoundTranscludeFn` - the transclude function made available to\ndirectives; if given, it will be passed through to the link functions of\ndirectives found in `element` during compilation.\n* `transcludeControllers` - an object hash with keys that map controller names\nto controller instances; if given, it will make the controllers\navailable to directives.\n* `futureParentElement` - defines the parent to which the `cloneAttachFn` will add\nthe cloned elements; only needed for transcludes that are allowed to contain non html\nelements (e.g. SVG elements). See also the directive.controller property.\n\nCalling the linking function returns the element of the template. It is either the original\nelement passed in, or the clone of the element if the `cloneAttachFn` is provided.\n\nAfter linking the view is not updated until after a call to $digest which typically is done by\nAngular automatically.\n\nIf you need access to the bound view, there are two ways to do it:\n\n- If you are not asking the linking function to clone the template, create the DOM element(s)\nbefore you send them to the compiler and keep this reference around.\n```js\nvar element = $compile('<p>{{total}}</p>')(scope);\n```\n\n- if on the other hand, you need the element to be cloned, the view reference from the original\nexample would not point to the clone, but rather to the original template that was cloned. In\nthis case, you can access the clone via the cloneAttachFn:\n```js\nvar templateElement = angular.element('<p>{{total}}</p>'),\nscope = ....;\n\nvar clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {\n//attach the clone to DOM document at the right place\n});\n\n//now we have reference to the cloned DOM via `clonedElement`\n```\n\n\nFor information on how the compiler works, see the\n{@link guide/compiler Angular HTML Compiler} section of the Developer Guide.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$compile",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$compile ng.service:$compile downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$compile",
        "left": 144,
        "level": 1,
        "root": "ng",
        "right": 145
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$compileProvider",
        "description": "",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$compileProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$compileProvider ng.provider:$compileProvider downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$compileProvider",
        "left": 146,
        "level": 1,
        "root": "ng",
        "right": 155
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name of the directive in camel-case (i.e. <code>ngBind</code> which\nwill match as <code>ng-bind</code>), or an object map of directives where the keys are the\nnames and the values are the factories.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "directiveFactory",
                "altName": null,
                "description": "An injectable directive factory function. See\n{@link guide/directive} for more info.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "directive",
        "kind": "function",
        "description": "Register a new directive with the compiler.",
        "returns": "{ng.$compileProvider} Self for chaining.",
        "parentDoc": {
            "module": "ng",
            "name": "$compileProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "directive",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "directive ng.method:directive downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "directive",
        "left": 147,
        "level": 2,
        "root": "ng",
        "right": 148
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "regexp",
                "altName": null,
                "description": "New regexp to whitelist urls with.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "aHrefSanitizationWhitelist",
        "kind": "function",
        "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during a[href] sanitization.\n\nThe sanitization is a security measure aimed at preventing XSS attacks via html links.\n\nAny url about to be assigned to a[href] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
        "returns": "{RegExp|ng.$compileProvider} Current RegExp if called without value or self for\nchaining otherwise.",
        "parentDoc": {
            "module": "ng",
            "name": "$compileProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "aHrefSanitizationWhitelist",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "aHrefSanitizationWhitelist ng.method:aHrefSanitizationWhitelist downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "aHrefSanitizationWhitelist",
        "left": 149,
        "level": 2,
        "root": "ng",
        "right": 150
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "regexp",
                "altName": null,
                "description": "New regexp to whitelist urls with.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "imgSrcSanitizationWhitelist",
        "kind": "function",
        "description": "Retrieves or overrides the default regular expression that is used for whitelisting of safe\nurls during img[src] sanitization.\n\nThe sanitization is a security measure aimed at prevent XSS attacks via html links.\n\nAny url about to be assigned to img[src] via data-binding is first normalized and turned into\nan absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`\nregular expression. If a match is found, the original url is written into the dom. Otherwise,\nthe absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.",
        "returns": "{RegExp|ng.$compileProvider} Current RegExp if called without value or self for\nchaining otherwise.",
        "parentDoc": {
            "module": "ng",
            "name": "$compileProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "imgSrcSanitizationWhitelist",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "imgSrcSanitizationWhitelist ng.method:imgSrcSanitizationWhitelist downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "imgSrcSanitizationWhitelist",
        "left": 151,
        "level": 2,
        "root": "ng",
        "right": 152
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "enabled",
                "altName": null,
                "description": "update the debugInfoEnabled state if provided, otherwise just return the\ncurrent debugInfoEnabled state",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "debugInfoEnabled",
        "returns": "{*} current value if used as getter or itself (chaining) if used as setter",
        "kind": "function",
        "description": "Call this method to enable/disable various debug runtime information in the compiler such as adding\nbinding information and a reference to the current scope on to DOM elements.\nIf enabled, the compiler will add the following to DOM elements that have been bound to the scope\n* `ng-binding` CSS class\n* `$binding` data property containing an array of the binding expressions\n\nYou may want to disable this in production for a significant performance boost. See\n{@link guide/production#disabling-debug-data Disabling Debug Data} for more.\n\nThe default value is true.",
        "parentDoc": {
            "module": "ng",
            "name": "$compileProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "debugInfoEnabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "debugInfoEnabled ng.method:debugInfoEnabled downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "debugInfoEnabled",
        "left": 153,
        "level": 2,
        "root": "ng",
        "right": 154
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "$compile.directive.Attributes",
        "description": "A shared object between directive compile / linking functions which contains normalized DOM\nelement attributes. The values reflect current binding state `{{ }}`. The normalization is\nneeded since all of these are treated as equivalent in Angular:\n\n```\n<span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$compile.directive.Attributes",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "$compile.directive.Attributes ng.type:$compile.directive.Attributes downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$compile.directive.Attributes",
        "left": 156,
        "level": 1,
        "root": "ng",
        "right": 171
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name to normalize",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$normalize",
        "kind": "function",
        "description": "Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n`data-`) to its normalized, camelCase form.\n\nAlso there is special case for Moz prefix starting with upper case letter.\n\nFor further information check out the guide on {@link guide/directive#matching-directives Matching Directives}",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$normalize",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$normalize ng.method:$normalize downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$normalize",
        "left": 157,
        "level": 2,
        "root": "ng",
        "right": 158
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "classVal",
                "altName": null,
                "description": "The className value that will be added to the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$addClass",
        "kind": "function",
        "description": "Adds the CSS class value specified by the classVal parameter to the element. If animations\nare enabled then an animation will be triggered for the class addition.",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$addClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$addClass ng.method:$addClass downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$addClass",
        "left": 159,
        "level": 2,
        "root": "ng",
        "right": 160
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "classVal",
                "altName": null,
                "description": "The className value that will be removed from the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$removeClass",
        "kind": "function",
        "description": "Removes the CSS class value specified by the classVal parameter from the element. If\nanimations are enabled then an animation will be triggered for the class removal.",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$removeClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$removeClass ng.method:$removeClass downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$removeClass",
        "left": 161,
        "level": 2,
        "root": "ng",
        "right": 162
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newClasses",
                "altName": null,
                "description": "The current CSS className value",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "oldClasses",
                "altName": null,
                "description": "The former CSS className value",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$updateClass",
        "kind": "function",
        "description": "Adds and removes the appropriate CSS class values to the element based on the difference\nbetween the new and old CSS class values (specified as newClasses and oldClasses).",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$updateClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$updateClass ng.method:$updateClass downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$updateClass",
        "left": 163,
        "level": 2,
        "root": "ng",
        "right": 164
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Normalized key. (ie ngAttribute) .",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function(interpolatedValue)",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "Function that will be called whenever\n                the interpolated value of the attribute changes.\nSee the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$observe",
        "kind": "function",
        "description": "Observes an interpolated attribute.\n\nThe observer function will be invoked once during the next `$digest` following\ncompilation. The observer is then invoked whenever the interpolated value\nchanges.",
        "returns": "{function()} Returns a deregistration function for this observer.",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$observe",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$observe ng.method:$observe downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$observe",
        "left": 165,
        "level": 2,
        "root": "ng",
        "right": 166
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "$attr",
        "description": "A map of DOM element attribute names to the normalized name. This is\nneeded to do reverse lookup from normalized name back to actual name.",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$attr",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "$attr ng.property:$attr downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$attr",
        "left": 167,
        "level": 2,
        "root": "ng",
        "right": 168
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Normalized element attribute name of the property to modify. The name is\nreverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\nproperty to the original name.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "Value to set the attribute to. The value can be an interpolated string.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$set",
        "kind": "function",
        "description": "Set DOM element attribute value.",
        "parentDoc": {
            "module": "ng",
            "name": "$compile.directive.Attributes"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/compile.js",
        "module": "ng",
        "id": "$set",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$set ng.method:$set downloaded/angular/angular.js-master/src/ng/compile.js",
        "sortOn": "$set",
        "left": 169,
        "level": 2,
        "root": "ng",
        "right": 170
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$controllerProvider",
        "description": "The {@link ng.$controller $controller service} is used by Angular to create new\ncontrollers.\n\nThis provider allows controller registration via the\n{@link ng.$controllerProvider#register register} method.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/controller.js",
        "module": "ng",
        "id": "$controllerProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$controllerProvider ng.provider:$controllerProvider downloaded/angular/angular.js-master/src/ng/controller.js",
        "sortOn": "$controllerProvider",
        "left": 172,
        "level": 1,
        "root": "ng",
        "right": 177
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Controller name, or an object map of controllers where the keys are\nthe names and the values are the constructors.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "Controller constructor fn (optionally decorated with DI\nannotations in the array notation).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "register",
        "parentDoc": {
            "module": "ng",
            "name": "$controllerProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/controller.js",
        "module": "ng",
        "id": "register",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "register ng.method:register downloaded/angular/angular.js-master/src/ng/controller.js",
        "sortOn": "register",
        "left": 173,
        "level": 2,
        "root": "ng",
        "right": 174
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "allowGlobals",
        "description": "If called, allows `$controller` to find controller constructors on `window`",
        "parentDoc": {
            "module": "ng",
            "name": "$controllerProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/controller.js",
        "module": "ng",
        "id": "allowGlobals",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "allowGlobals ng.method:allowGlobals downloaded/angular/angular.js-master/src/ng/controller.js",
        "sortOn": "allowGlobals",
        "left": 175,
        "level": 2,
        "root": "ng",
        "right": 176
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "If called with a function then it's considered to be the\ncontroller constructor function. Otherwise it's considered to be a string which is used\nto retrieve the controller constructor using the following steps:\n\n* check if a controller with given name is registered via `$controllerProvider`\n* check if evaluating the string on the current scope returns a constructor\n* if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n`window` object (not recommended)\n\nThe string can use the `controller as property` syntax, where the controller instance is published\nas the specified property on the `scope`; the `scope` must be injected into `locals` param for this\nto work correctly.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Injection locals for Controller.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$controller",
        "requires": [
            "$injector"
        ],
        "return": "{Object} Instance of given controller.",
        "description": "`$controller` service is responsible for instantiating controllers.\n\nIt's just a simple call to {@link auto.$injector $injector}, but extracted into\na service, so that one can override this service with [BC version](https://gist.github.com/1649788).",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/controller.js",
        "module": "ng",
        "id": "$controller",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$controller ng.service:$controller downloaded/angular/angular.js-master/src/ng/controller.js",
        "sortOn": "$controller",
        "left": 178,
        "level": 1,
        "root": "ng",
        "right": 179
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "a",
        "restrict": "E",
        "description": "Modifies the default behavior of the html A tag so that the default action is prevented when\nthe href attribute is empty.\n\nThis change permits the easy creation of action links with the `ngClick` directive\nwithout changing the location or causing page reloads, e.g.:\n`<a href=\"\" ng-click=\"list.addItem()\">Add Item</a>`",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/a.js",
        "module": "ng",
        "id": "a",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "a ng.directive:a downloaded/angular/angular.js-master/src/ng/directive/a.js",
        "sortOn": "a",
        "left": 180,
        "level": 1,
        "root": "ng",
        "right": 181
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "template",
                        "type": "template"
                    }
                ],
                "varName": "ngHref",
                "altName": null,
                "description": "any string which can contain `{{}}` markup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngHref",
        "restrict": "A",
        "priority": "99",
        "description": "Using Angular markup like `{{hash}}` in an href attribute will\nmake the link go to the wrong URL if the user clicks it before\nAngular has a chance to replace the `{{hash}}` markup with its\nvalue. Until Angular replaces the markup the link will be broken\nand will most likely return a 404 error. The `ngHref` directive\nsolves this problem.\n\nThe wrong way to write it:\n```html\n<a href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```\n\nThe correct way to write it:\n```html\n<a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\">link1</a>\n```",
        "element": "A",
        "example": "This example shows various combinations of `href`, `ng-href` and `ng-click` attributes\nin links and their different behaviors:\n    <example>\n      <file name=\"index.html\">\n        <input ng-model=\"value\" /><br />\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should execute ng-click but not reload when href without value', function() {\n          element(by.id('link-1')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('1');\n          expect(element(by.id('link-1')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when href empty string', function() {\n          element(by.id('link-2')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('2');\n          expect(element(by.id('link-2')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\\/123$/);\n\n          element(by.id('link-3')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/123$/);\n            });\n          }, 5000, 'page should navigate to /123');\n        });\n\n        it('should execute ng-click but not reload when href empty string and name specified', function() {\n          element(by.id('link-4')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('4');\n          expect(element(by.id('link-4')).getAttribute('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when no href but name specified', function() {\n          element(by.id('link-5')).click();\n          expect(element(by.model('value')).getAttribute('value')).toEqual('5');\n          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);\n        });\n\n        it('should only change url when only ng-href', function() {\n          element(by.model('value')).clear();\n          element(by.model('value')).sendKeys('6');\n          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\\/6$/);\n\n          element(by.id('link-6')).click();\n\n          // At this point, we navigate away from an Angular page, so we need\n          // to use browser.driver to get the base webdriver.\n          browser.wait(function() {\n            return browser.driver.getCurrentUrl().then(function(url) {\n              return url.match(/\\/6$/);\n            });\n          }, 5000, 'page should navigate to /6');\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngHref",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngHref ng.directive:ngHref downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngHref",
        "left": 182,
        "level": 1,
        "root": "ng",
        "right": 183
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "template",
                        "type": "template"
                    }
                ],
                "varName": "ngSrc",
                "altName": null,
                "description": "any string which can contain `{{}}` markup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSrc",
        "restrict": "A",
        "priority": "99",
        "description": "Using Angular markup like `{{hash}}` in a `src` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrc` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n```",
        "element": "IMG",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngSrc",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSrc ng.directive:ngSrc downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngSrc",
        "left": 184,
        "level": 1,
        "root": "ng",
        "right": 185
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "template",
                        "type": "template"
                    }
                ],
                "varName": "ngSrcset",
                "altName": null,
                "description": "any string which can contain `{{}}` markup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSrcset",
        "restrict": "A",
        "priority": "99",
        "description": "Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\nwork right: The browser will fetch from the URL with the literal\ntext `{{hash}}` until Angular replaces the expression inside\n`{{hash}}`. The `ngSrcset` directive solves this problem.\n\nThe buggy way to write it:\n```html\n<img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```\n\nThe correct way to write it:\n```html\n<img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n```",
        "element": "IMG",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngSrcset",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSrcset ng.directive:ngSrcset downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngSrcset",
        "left": 186,
        "level": 1,
        "root": "ng",
        "right": 187
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngDisabled",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy,\nthen the `disabled` attribute will be set on the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngDisabled",
        "restrict": "A",
        "priority": "100",
        "description": "This directive sets the `disabled` attribute on the element if the\n{@link guide/expression expression} inside `ngDisabled` evaluates to truthy.\n\nA special directive is necessary because we cannot use interpolation inside the `disabled`\nattribute.  The following example would make the button enabled on Chrome/Firefox\nbut not on older IEs:\n\n```html\n<!-- See below for an example of ng-disabled being used correctly -->\n<div ng-init=\"isDisabled = false\">\n<button disabled=\"{{isDisabled}}\">Disabled</button>\n</div>\n```\n\nThis is because the HTML specification does not require browsers to preserve the values of\nboolean attributes such as `disabled` (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.",
        "example": "<example>\n      <file name=\"index.html\">\n        Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle button', function() {\n          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();\n        });\n      </file>\n    </example>",
        "element": "INPUT",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngDisabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngDisabled ng.directive:ngDisabled downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngDisabled",
        "left": 188,
        "level": 1,
        "root": "ng",
        "right": 189
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngChecked",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy,\nthen special attribute \"checked\" will be set on the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngChecked",
        "restrict": "A",
        "priority": "100",
        "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as checked. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngChecked` directive solves this problem for the `checked` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
        "example": "<example>\n      <file name=\"index.html\">\n        Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n        <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should check both checkBoxes', function() {\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();\n          element(by.model('master')).click();\n          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();\n        });\n      </file>\n    </example>",
        "element": "INPUT",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngChecked",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngChecked ng.directive:ngChecked downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngChecked",
        "left": 190,
        "level": 1,
        "root": "ng",
        "right": 191
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngReadonly",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy,\nthen special attribute \"readonly\" will be set on the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngReadonly",
        "restrict": "A",
        "priority": "100",
        "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as readonly. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngReadonly` directive solves this problem for the `readonly` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
        "example": "<example>\n      <file name=\"index.html\">\n        Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should toggle readonly attr', function() {\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeFalsy();\n          element(by.model('checked')).click();\n          expect(element(by.css('[type=\"text\"]')).getAttribute('readonly')).toBeTruthy();\n        });\n      </file>\n    </example>",
        "element": "INPUT",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngReadonly",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngReadonly ng.directive:ngReadonly downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngReadonly",
        "left": 192,
        "level": 1,
        "root": "ng",
        "right": 193
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngSelected",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy,\nthen special attribute \"selected\" will be set on the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSelected",
        "restrict": "A",
        "priority": "100",
        "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as selected. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngSelected` directive solves this problem for the `selected` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
        "example": "<example>\n      <file name=\"index.html\">\n        Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n        <select>\n          <option>Hello!</option>\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n        </select>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should select Greetings!', function() {\n          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();\n          element(by.model('selected')).click();\n          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();\n        });\n      </file>\n    </example>",
        "element": "OPTION",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngSelected",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSelected ng.directive:ngSelected downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngSelected",
        "left": 194,
        "level": 1,
        "root": "ng",
        "right": 195
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngOpen",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy,\nthen special attribute \"open\" will be set on the element",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngOpen",
        "restrict": "A",
        "priority": "100",
        "description": "The HTML specification does not require browsers to preserve the values of boolean attributes\nsuch as open. (Their presence means true and their absence means false.)\nIf we put an Angular interpolation expression into such an attribute then the\nbinding information would be lost when the browser removes the attribute.\nThe `ngOpen` directive solves this problem for the `open` attribute.\nThis complementary directive is not removed by the browser and so provides\na permanent reliable place to store the binding information.",
        "example": "<example>\n       <file name=\"index.html\">\n         Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"><br/>\n         <details id=\"details\" ng-open=\"open\">\n            <summary>Show/Hide me</summary>\n         </details>\n       </file>\n       <file name=\"protractor.js\" type=\"protractor\">\n         it('should toggle open', function() {\n           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();\n           element(by.model('open')).click();\n           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();\n         });\n       </file>\n     </example>",
        "element": "DETAILS",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "module": "ng",
        "id": "ngOpen",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngOpen ng.directive:ngOpen downloaded/angular/angular.js-master/src/ng/directive/attrs.js",
        "sortOn": "ngOpen",
        "left": 196,
        "level": 1,
        "root": "ng",
        "right": 197
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "form.FormController",
        "property": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "pristine",
                "altName": null,
                "description": "True if user has not interacted with the form yet.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "dirty",
                "altName": null,
                "description": "True if user has already interacted with the form.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "valid",
                "altName": null,
                "description": "True if all of the containing forms and controls are valid.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "invalid",
                "altName": null,
                "description": "True if at least one containing control or form is invalid.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "submitted",
                "altName": null,
                "description": "True if user has submitted the form even if its invalid.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "error",
                "altName": null,
                "description": "Is an object hash, containing references to controls or\nforms with failing validators, where:\n\n- keys are validation tokens (error names),\n- values are arrays of controls or forms that have a failing validator for given error name.\n\nBuilt-in validation tokens:\n\n- `email`\n- `max`\n- `maxlength`\n- `min`\n- `minlength`\n- `number`\n- `pattern`\n- `required`\n- `url`\n- `date`\n- `datetimelocal`\n- `time`\n- `week`\n- `month`",
                "optional": false,
                "defaultValue": null
            }
        ],
        "description": "`FormController` keeps track of all its controls and nested forms as well as the state of them,\nsuch as being valid/invalid or dirty/pristine.\n\nEach {@link ng.directive:form form} directive creates an instance\nof `FormController`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "form.FormController",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "form.FormController ng.type:form.FormController downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "form.FormController",
        "left": 198,
        "level": 1,
        "root": "ng",
        "right": 217
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$rollbackViewValue",
        "description": "Rollback all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is typically needed by the reset button of\na form that uses `ng-model-options` to pend updates.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$rollbackViewValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$rollbackViewValue ng.method:$rollbackViewValue downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$rollbackViewValue",
        "left": 199,
        "level": 2,
        "root": "ng",
        "right": 200
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$commitViewValue",
        "description": "Commit all form controls pending updates to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. This method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$commitViewValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$commitViewValue ng.method:$commitViewValue downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$commitViewValue",
        "left": 201,
        "level": 2,
        "root": "ng",
        "right": 202
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$addControl",
        "description": "Register a control with the form.\n\nInput elements using ngModelController do this automatically when they are linked.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$addControl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$addControl ng.method:$addControl downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$addControl",
        "left": 203,
        "level": 2,
        "root": "ng",
        "right": 204
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$removeControl",
        "description": "Deregister a control from the form.\n\nInput elements using ngModelController do this automatically when they are destroyed.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$removeControl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$removeControl ng.method:$removeControl downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$removeControl",
        "left": 205,
        "level": 2,
        "root": "ng",
        "right": 206
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setValidity",
        "description": "Sets the validity of a form control.\n\nThis method will also propagate to parent forms.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$setValidity",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setValidity ng.method:$setValidity downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$setValidity",
        "left": 207,
        "level": 2,
        "root": "ng",
        "right": 208
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setDirty",
        "description": "Sets the form to a dirty state.\n\nThis method can be called to add the 'ng-dirty' class and set the form to a dirty\nstate (ng-dirty class). This method will also propagate to parent forms.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$setDirty",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setDirty ng.method:$setDirty downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$setDirty",
        "left": 209,
        "level": 2,
        "root": "ng",
        "right": 210
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setPristine",
        "description": "Sets the form to its pristine state.\n\nThis method can be called to remove the 'ng-dirty' class and set the form to its pristine\nstate (ng-pristine class). This method will also propagate to all the controls contained\nin this form.\n\nSetting a form back to a pristine state is often useful when we want to 'reuse' a form after\nsaving or resetting it.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$setPristine",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setPristine ng.method:$setPristine downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$setPristine",
        "left": 211,
        "level": 2,
        "root": "ng",
        "right": 212
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setUntouched",
        "description": "Sets the form to its untouched state.\n\nThis method can be called to remove the 'ng-touched' class and set the form controls to their\nuntouched state (ng-untouched class).\n\nSetting a form controls back to their untouched state is often useful when setting the form\nback to its pristine state.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$setUntouched",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setUntouched ng.method:$setUntouched downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$setUntouched",
        "left": 213,
        "level": 2,
        "root": "ng",
        "right": 214
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setSubmitted",
        "description": "Sets the form to its submitted state.",
        "parentDoc": {
            "module": "ng",
            "name": "form.FormController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "$setSubmitted",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setSubmitted ng.method:$setSubmitted downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "$setSubmitted",
        "left": 215,
        "level": 2,
        "root": "ng",
        "right": 216
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngForm",
                "altName": "name",
                "description": "Name of the form. If specified, the form controller will be published into\nrelated scope, under this name.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngForm",
        "restrict": "EAC",
        "description": "Nestable alias of {@link ng.directive:form `form`} directive. HTML\ndoes not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\nsub-group of controls needs to be determined.\n\nNote: the purpose of `ngForm` is to group controls,\nbut not to be a replacement for the `<form>` tag with all of its capabilities\n(e.g. posting to the server, ...).",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "ngForm",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngForm ng.directive:ngForm downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "ngForm",
        "left": 218,
        "level": 1,
        "root": "ng",
        "right": 219
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name of the form. If specified, the form controller will be published into\nrelated scope, under this name.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "form",
        "restrict": "E",
        "description": "Directive that instantiates\n{@link form.FormController FormController}.\n\nIf the `name` attribute is specified, the form controller is published onto the current scope under\nthis name.\n\n# Alias: {@link ng.directive:ngForm `ngForm`}\n\nIn Angular, forms can be nested. This means that the outer form is valid when all of the child\nforms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\nAngular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to\n`<form>` but can be nested.  This allows you to have nested forms, which is very useful when\nusing Angular validation directives in forms that are dynamically generated using the\n{@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`\nattribute of input elements using interpolation, you have to wrap each set of repeated inputs in an\n`ngForm` directive and nest these in an outer `form` element.\n\n\n# CSS classes\n- `ng-valid` is set if the form is valid.\n- `ng-invalid` is set if the form is invalid.\n- `ng-pristine` is set if the form is pristine.\n- `ng-dirty` is set if the form is dirty.\n- `ng-submitted` is set if the form was submitted.\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n\n# Submitting a form and preventing the default action\n\nSince the role of forms in client-side Angular applications is different than in classical\nroundtrip apps, it is desirable for the browser not to translate the form submission into a full\npage reload that sends the data to the server. Instead some javascript logic should be triggered\nto handle the form submission in an application-specific way.\n\nFor this reason, Angular prevents the default action (form submission to the server) unless the\n`<form>` element has an `action` attribute specified.\n\nYou can use one of the following two ways to specify what javascript method should be called when\na form is submitted:\n\n- {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n- {@link ng.directive:ngClick ngClick} directive on the first\nbutton or input field of type submit (input[type=submit])\n\nTo prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\nor {@link ng.directive:ngClick ngClick} directives.\nThis is because of the following form submission rules in the HTML specification:\n\n- If a form has only one input field then hitting enter in this field triggers form submit\n(`ngSubmit`)\n- if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\ndoesn't trigger submit\n- if a form has one or more input fields and one or more buttons or input[type=submit] then\nhitting enter in any of the input fields will trigger the click handler on thefirst* button or\ninput[type=submit] (`ngClick`)and* a submit handler on the enclosing form (`ngSubmit`)\n\nAny pending `ngModelOptions` changes will take place immediately when an enclosing form is\nsubmitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n## Animation Hooks\n\nAnimations in ngForm are triggered when any of the associated CSS classes are added and removed.\nThese classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\nother validations that are performed within the form. Animations in ngForm are similar to how\nthey work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\nas JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style a form element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-form {\ntransition:0.5s linear all;\nbackground: white;\n}\n.my-form.ng-invalid {\nbackground: red;\ncolor:white;\n}\n</pre>",
        "example": "<example deps=\"angular-animate.js\" animations=\"true\" fixBase=\"true\" module=\"formExample\">\n      <file name=\"index.html\">\n       <script>\n         angular.module('formExample', [])\n           .controller('FormController', ['$scope', function($scope) {\n             $scope.userType = 'guest';\n           }]);\n       </script>\n       <style>\n        .my-form {\n          -webkit-transition:all linear 0.5s;\n          transition:all linear 0.5s;\n          background: transparent;\n        }\n        .my-form.ng-invalid {\n          background: red;\n        }\n       </style>\n       <form name=\"myForm\" ng-controller=\"FormController\" class=\"my-form\">\n         userType: <input name=\"input\" ng-model=\"userType\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n         <tt>userType = {{userType}}</tt><br>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should initialize to model', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n\n          expect(userType.getText()).toContain('guest');\n          expect(valid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty', function() {\n          var userType = element(by.binding('userType'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var userInput = element(by.model('userType'));\n\n          userInput.clear();\n          userInput.sendKeys('');\n\n          expect(userType.getText()).toEqual('userType =');\n          expect(valid.getText()).toContain('false');\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "module": "ng",
        "id": "form",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "form ng.directive:form downloaded/angular/angular.js-master/src/ng/directive/form.js",
        "sortOn": "form",
        "left": 220,
        "level": 1,
        "root": "ng",
        "right": 221
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Adds `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of\nany length.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "pattern",
                "altName": null,
                "description": "Similar to `ngPattern` except that the attribute value is the actual string\nthat contains the regular expression body that will be converted to a regular expression\nas in the ngPattern directive.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the ngModel value does not match\na RegExp found by evaluating the Angular expression given in the attribute value.\nIf the expression evaluates to a RegExp object then this is used directly.\nIf the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\ncharacters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ngTrim",
                "altName": null,
                "description": "If set to false Angular will not automatically trim the input.\nThis parameter is ignored for input[type=password] controls, which will never trim the\ninput.",
                "optional": true,
                "defaultValue": "true"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[text]",
        "description": "Standard HTML text input with angular data binding, inherited by most of the `input` elements.",
        "example": "<example name=\"text-input-directive\" module=\"textInputExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('textInputExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 text: 'guest',\n                 word: /^\\s*\\w*\\s*$/\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Single word: <input type=\"text\" name=\"input\" ng-model=\"example.text\"\n                               ng-pattern=\"example.word\" required ng-trim=\"false\">\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n             Single word only!</span>\n\n           <tt>text = {{example.text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('example.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('guest');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if multi word', function() {\n            input.clear();\n            input.sendKeys('hello world');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[text]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[text] ng.input:input[text] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[text]",
        "left": 222,
        "level": 1,
        "root": "ng",
        "right": 223
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO date string (yyyy-MM-dd).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO date string (yyyy-MM-dd).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[date]",
        "description": "Input with date validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601\ndate format (yyyy-MM-dd), for example: `2009-01-06`. Since many\nmodern browsers do not yet support this input type, it is important to provide cues to users on the\nexpected input format via a placeholder or label.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
        "example": "<example name=\"date-input-directive\" module=\"dateInputExample\">\n     <file name=\"index.html\">\n       <script>\n          angular.module('dateInputExample', [])\n            .controller('DateController', ['$scope', function($scope) {\n              $scope.example = {\n                value: new Date(2013, 9, 22)\n              };\n            }]);\n       </script>\n       <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n          Pick a date in 2013:\n          <input type=\"date\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n              placeholder=\"yyyy-MM-dd\" min=\"2013-01-01\" max=\"2013-12-31\" required />\n          <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n              Required!</span>\n          <span class=\"error\" ng-show=\"myForm.input.$error.date\">\n              Not a valid date!</span>\n           <tt>value = {{example.value | date: \"yyyy-MM-dd\"}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n       </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        var value = element(by.binding('example.value | date: \"yyyy-MM-dd\"'));\n        var valid = element(by.binding('myForm.input.$valid'));\n        var input = element(by.model('example.value'));\n\n        // currently protractor/webdriver does not support\n        // sending keys to all known HTML5 input controls\n        // for various browsers (see https://github.com/angular/protractor/issues/562).\n        function setInput(val) {\n          // set the value of the element and force validation.\n          var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n          \"ipt.value = '\" + val + \"';\" +\n          \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n          browser.executeScript(scr);\n        }\n\n        it('should initialize to model', function() {\n          expect(value.getText()).toContain('2013-10-22');\n          expect(valid.getText()).toContain('myForm.input.$valid = true');\n        });\n\n        it('should be invalid if empty', function() {\n          setInput('');\n          expect(value.getText()).toEqual('value =');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n\n        it('should be invalid if over max', function() {\n          setInput('2015-01-01');\n          expect(value.getText()).toContain('');\n          expect(valid.getText()).toContain('myForm.input.$valid = false');\n        });\n     </file>\n     </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[date]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[date] ng.input:input[date] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[date]",
        "left": 224,
        "level": 1,
        "root": "ng",
        "right": 225
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO datetime format (yyyy-MM-ddTHH:mm:ss).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[datetime-local]",
        "description": "Input with datetime validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
        "example": "<example name=\"datetimelocal-input-directive\" module=\"dateExample\">\n    <file name=\"index.html\">\n      <script>\n        angular.module('dateExample', [])\n          .controller('DateController', ['$scope', function($scope) {\n            $scope.example = {\n              value: new Date(2010, 11, 28, 14, 57)\n            };\n          }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a date between in 2013:\n        <input type=\"datetime-local\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"yyyy-MM-ddTHH:mm:ss\" min=\"2001-01-01T00:00:00\" max=\"2013-12-31T00:00:00\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.datetimelocal\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"yyyy-MM-ddTHH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM-ddTHH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2010-12-28T14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01-01T23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[datetime-local]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[datetime-local] ng.input:input[datetime-local] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[datetime-local]",
        "left": 226,
        "level": 1,
        "root": "ng",
        "right": 227
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO time format (HH:mm:ss).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be a\nvalid ISO time format (HH:mm:ss).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[time]",
        "description": "Input with time validation and transformation. In browsers that do not yet support\nthe HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nlocal time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a\nDate object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
        "example": "<example name=\"time-input-directive\" module=\"timeExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('timeExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(1970, 0, 1, 14, 57, 0)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a between 8am and 5pm:\n        <input type=\"time\" id=\"exampleInput\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"HH:mm:ss\" min=\"08:00:00\" max=\"17:00:00\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.time\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"HH:mm:ss\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"HH:mm:ss\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('14:57:00');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('23:59:00');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[time]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[time] ng.input:input[time] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[time]",
        "left": 228,
        "level": 1,
        "root": "ng",
        "right": 229
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be a\nvalid ISO week format (yyyy-W##).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must be\na valid ISO week format (yyyy-W##).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[week]",
        "description": "Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support\nthe HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nweek format (yyyy-W##), for example: `2013-W02`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
        "example": "<example name=\"week-input-directive\" module=\"weekExample\">\n    <file name=\"index.html\">\n      <script>\n      angular.module('weekExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 0, 3)\n          };\n        }]);\n      </script>\n      <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n        Pick a date between in 2013:\n        <input id=\"exampleInput\" type=\"week\" name=\"input\" ng-model=\"example.value\"\n            placeholder=\"YYYY-W##\" min=\"2012-W32\" max=\"2013-W52\" required />\n        <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n            Required!</span>\n        <span class=\"error\" ng-show=\"myForm.input.$error.week\">\n            Not a valid date!</span>\n        <tt>value = {{example.value | date: \"yyyy-Www\"}}</tt><br/>\n        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-Www\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-W01');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-W01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n    </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[week]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[week] ng.input:input[week] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[week]",
        "left": 230,
        "level": 1,
        "root": "ng",
        "right": 231
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`. This must be\na valid ISO month format (yyyy-MM).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`. This must\nbe a valid ISO month format (yyyy-MM).",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[month]",
        "description": "Input with month validation and transformation. In browsers that do not yet support\nthe HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601\nmonth format (yyyy-MM), for example: `2009-01`.\n\nThe model must always be a Date object, otherwise Angular will throw an error.\nInvalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.\nIf the model is not set to the first of the month, the next view to model update will set it\nto the first of the month.\n\nThe timezone to be used to read/write the `Date` instance in the model can be defined using\n{@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.",
        "example": "<example name=\"month-input-directive\" module=\"monthExample\">\n   <file name=\"index.html\">\n     <script>\n      angular.module('monthExample', [])\n        .controller('DateController', ['$scope', function($scope) {\n          $scope.example = {\n            value: new Date(2013, 9, 1)\n          };\n        }]);\n     </script>\n     <form name=\"myForm\" ng-controller=\"DateController as dateCtrl\">\n       Pick a month in 2013:\n       <input id=\"exampleInput\" type=\"month\" name=\"input\" ng-model=\"example.value\"\n          placeholder=\"yyyy-MM\" min=\"2013-01\" max=\"2013-12\" required />\n       <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n          Required!</span>\n       <span class=\"error\" ng-show=\"myForm.input.$error.month\">\n          Not a valid month!</span>\n       <tt>value = {{example.value | date: \"yyyy-MM\"}}</tt><br/>\n       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n     </form>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n      var value = element(by.binding('example.value | date: \"yyyy-MM\"'));\n      var valid = element(by.binding('myForm.input.$valid'));\n      var input = element(by.model('example.value'));\n\n      // currently protractor/webdriver does not support\n      // sending keys to all known HTML5 input controls\n      // for various browsers (https://github.com/angular/protractor/issues/562).\n      function setInput(val) {\n        // set the value of the element and force validation.\n        var scr = \"var ipt = document.getElementById('exampleInput'); \" +\n        \"ipt.value = '\" + val + \"';\" +\n        \"angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('\" + val + \"'); });\";\n        browser.executeScript(scr);\n      }\n\n      it('should initialize to model', function() {\n        expect(value.getText()).toContain('2013-10');\n        expect(valid.getText()).toContain('myForm.input.$valid = true');\n      });\n\n      it('should be invalid if empty', function() {\n        setInput('');\n        expect(value.getText()).toEqual('value =');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n\n      it('should be invalid if over max', function() {\n        setInput('2015-01');\n        expect(value.getText()).toContain('');\n        expect(valid.getText()).toContain('myForm.input.$valid = false');\n      });\n   </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[month]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[month] ng.input:input[month] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[month]",
        "left": 232,
        "level": 1,
        "root": "ng",
        "right": 233
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "min",
                "altName": null,
                "description": "Sets the `min` validation error key if the value entered is less than `min`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "max",
                "altName": null,
                "description": "Sets the `max` validation error key if the value entered is greater than `max`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of\nany length.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "pattern",
                "altName": null,
                "description": "Similar to `ngPattern` except that the attribute value is the actual string\nthat contains the regular expression body that will be converted to a regular expression\nas in the ngPattern directive.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the ngModel value does not match\na RegExp found by evaluating the Angular expression given in the attribute value.\nIf the expression evaluates to a RegExp object then this is used directly.\nIf the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\ncharacters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[number]",
        "description": "Text input with number validation and transformation. Sets the `number` validation\nerror if not a valid number.\n\n<div class=\"alert alert-warning\">\nThe model must always be of type `number` otherwise Angular will throw an error.\nBe aware that a string containing a number is not enough. See the {@link ngModel:numfmt}\nerror docs for more information and an example of how to convert your model if necessary.\n</div>",
        "example": "<example name=\"number-input-directive\" module=\"numberExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('numberExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.example = {\n                 value: 12\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Number: <input type=\"number\" name=\"input\" ng-model=\"example.value\"\n                          min=\"0\" max=\"99\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.number\">\n             Not valid number!</span>\n           <tt>value = {{example.value}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var value = element(by.binding('example.value'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('example.value'));\n\n          it('should initialize to model', function() {\n            expect(value.getText()).toContain('12');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if over max', function() {\n            input.clear();\n            input.sendKeys('123');\n            expect(value.getText()).toEqual('value =');\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[number]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[number] ng.input:input[number] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[number]",
        "left": 234,
        "level": 1,
        "root": "ng",
        "right": 235
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of\nany length.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "pattern",
                "altName": null,
                "description": "Similar to `ngPattern` except that the attribute value is the actual string\nthat contains the regular expression body that will be converted to a regular expression\nas in the ngPattern directive.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the ngModel value does not match\na RegExp found by evaluating the Angular expression given in the attribute value.\nIf the expression evaluates to a RegExp object then this is used directly.\nIf the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\ncharacters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[url]",
        "description": "Text input with URL validation. Sets the `url` validation error key if the content is not a\nvalid URL.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[url]` uses a regex to validate urls that is derived from the regex\nused in Chromium. If you need stricter validation, you can use `ng-pattern` or modify\nthe built-in validators (see the {@link guide/forms Forms guide})\n</div>",
        "example": "<example name=\"url-input-directive\" module=\"urlExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('urlExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.url = {\n                 text: 'http://google.com'\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           URL: <input type=\"url\" name=\"input\" ng-model=\"url.text\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n             Not valid url!</span>\n           <tt>text = {{url.text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('url.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('url.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('http://google.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not url', function() {\n            input.clear();\n            input.sendKeys('box');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[url]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[url] ng.input:input[url] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[url]",
        "left": 236,
        "level": 1,
        "root": "ng",
        "right": 237
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of\nany length.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "pattern",
                "altName": null,
                "description": "Similar to `ngPattern` except that the attribute value is the actual string\nthat contains the regular expression body that will be converted to a regular expression\nas in the ngPattern directive.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the ngModel value does not match\na RegExp found by evaluating the Angular expression given in the attribute value.\nIf the expression evaluates to a RegExp object then this is used directly.\nIf the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`\ncharacters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[email]",
        "description": "Text input with email validation. Sets the `email` validation error key if not a valid email\naddress.\n\n<div class=\"alert alert-warning\">\n**Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex\nused in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can\nuse `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})\n</div>",
        "example": "<example name=\"email-input-directive\" module=\"emailExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('emailExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.email = {\n                 text: 'me@example.com'\n               };\n             }]);\n         </script>\n           <form name=\"myForm\" ng-controller=\"ExampleController\">\n             Email: <input type=\"email\" name=\"input\" ng-model=\"email.text\" required>\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n               Not valid email!</span>\n             <tt>text = {{email.text}}</tt><br/>\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n           </form>\n         </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var text = element(by.binding('email.text'));\n          var valid = element(by.binding('myForm.input.$valid'));\n          var input = element(by.model('email.text'));\n\n          it('should initialize to model', function() {\n            expect(text.getText()).toContain('me@example.com');\n            expect(valid.getText()).toContain('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input.clear();\n            input.sendKeys('');\n            expect(text.getText()).toEqual('text =');\n            expect(valid.getText()).toContain('false');\n          });\n\n          it('should be invalid if not email', function() {\n            input.clear();\n            input.sendKeys('xxx');\n\n            expect(valid.getText()).toContain('false');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[email]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[email] ng.input:input[email] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[email]",
        "left": 238,
        "level": 1,
        "root": "ng",
        "right": 239
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to which the expression should be set when selected.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngValue",
                "altName": null,
                "description": "Angular expression which sets the value to which the expression should\nbe set when selected.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[radio]",
        "description": "HTML radio button.",
        "example": "<example name=\"radio-input-directive\" module=\"radioExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('radioExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.color = {\n                 name: 'blue'\n               };\n               $scope.specialValue = {\n                 \"id\": \"12345\",\n                 \"value\": \"green\"\n               };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           <input type=\"radio\" ng-model=\"color.name\" value=\"red\">  Red <br/>\n           <input type=\"radio\" ng-model=\"color.name\" ng-value=\"specialValue\"> Green <br/>\n           <input type=\"radio\" ng-model=\"color.name\" value=\"blue\"> Blue <br/>\n           <tt>color = {{color.name | json}}</tt><br/>\n          </form>\n          Note that `ng-value=\"specialValue\"` sets radio item's value to be the value of `$scope.specialValue`.\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var color = element(by.binding('color.name'));\n\n            expect(color.getText()).toContain('blue');\n\n            element.all(by.model('color.name')).get(0).click();\n\n            expect(color.getText()).toContain('red');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[radio]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[radio] ng.input:input[radio] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[radio]",
        "left": 240,
        "level": 1,
        "root": "ng",
        "right": 241
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngTrueValue",
                "altName": null,
                "description": "The value to which the expression should be set when selected.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngFalseValue",
                "altName": null,
                "description": "The value to which the expression should be set when not selected.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "input",
        "name": "input[checkbox]",
        "description": "HTML checkbox.",
        "example": "<example name=\"checkbox-input-directive\" module=\"checkboxExample\">\n        <file name=\"index.html\">\n         <script>\n           angular.module('checkboxExample', [])\n             .controller('ExampleController', ['$scope', function($scope) {\n               $scope.checkboxModel = {\n                value1 : true,\n                value2 : 'YES'\n              };\n             }]);\n         </script>\n         <form name=\"myForm\" ng-controller=\"ExampleController\">\n           Value1: <input type=\"checkbox\" ng-model=\"checkboxModel.value1\"> <br/>\n           Value2: <input type=\"checkbox\" ng-model=\"checkboxModel.value2\"\n                          ng-true-value=\"'YES'\" ng-false-value=\"'NO'\"> <br/>\n           <tt>value1 = {{checkboxModel.value1}}</tt><br/>\n           <tt>value2 = {{checkboxModel.value2}}</tt><br/>\n          </form>\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          it('should change state', function() {\n            var value1 = element(by.binding('checkboxModel.value1'));\n            var value2 = element(by.binding('checkboxModel.value2'));\n\n            expect(value1.getText()).toContain('true');\n            expect(value2.getText()).toContain('YES');\n\n            element(by.model('checkboxModel.value1')).click();\n            element(by.model('checkboxModel.value2')).click();\n\n            expect(value1.getText()).toContain('false');\n            expect(value2.getText()).toContain('NO');\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input[checkbox]",
        "path": "angular/api",
        "groupId": 5,
        "type": "input",
        "handler": "ngdoc",
        "search": "input[checkbox] ng.input:input[checkbox] downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input[checkbox]",
        "left": 242,
        "level": 1,
        "root": "ng",
        "right": 243
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\nlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the value does not match the\nRegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\npatterns defined as scope expressions.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ngTrim",
                "altName": null,
                "description": "If set to false Angular will not automatically trim the input.",
                "optional": true,
                "defaultValue": "true"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "textarea",
        "restrict": "E",
        "description": "HTML textarea element control with angular data-binding. The data-binding and validation\nproperties of this element are exactly the same as those of the\n{@link ng.directive:input input element}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "textarea",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "textarea ng.directive:textarea downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "textarea",
        "left": 244,
        "level": 1,
        "root": "ng",
        "right": 245
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "Sets `required` validation error key if the value is not entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Sets `required` attribute if set to true",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMinlength",
                "altName": null,
                "description": "Sets `minlength` validation error key if the value is shorter than\nminlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "ngMaxlength",
                "altName": null,
                "description": "Sets `maxlength` validation error key if the value is longer than\nmaxlength. Setting the attribute to a negative or non-numeric value, allows view values of any\nlength.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngPattern",
                "altName": null,
                "description": "Sets `pattern` validation error key if the value does not match the\nRegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\npatterns defined as scope expressions.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "Angular expression to be executed when input changes due to user\ninteraction with the input element.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ngTrim",
                "altName": null,
                "description": "If set to false Angular will not automatically trim the input.\nThis parameter is ignored for input[type=password] controls, which will never trim the\ninput.",
                "optional": true,
                "defaultValue": "true"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "input",
        "restrict": "E",
        "description": "HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,\ninput state control, and validation.\nInput control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.\n\n<div class=\"alert alert-warning\">\n**Note:** Not every feature offered is available for all input types.\nSpecifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.\n</div>",
        "example": "<example name=\"input-directive\" module=\"inputExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('inputExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.user = {name: 'guest', last: 'visitor'};\n            }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <form name=\"myForm\">\n           User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n           <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n             Required!</span><br>\n           Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n             ng-minlength=\"3\" ng-maxlength=\"10\">\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n             Too short!</span>\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n             Too long!</span><br>\n         </form>\n         <hr>\n         <tt>user = {{user}}</tt><br/>\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n       </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var user = element(by.exactBinding('user'));\n        var userNameValid = element(by.binding('myForm.userName.$valid'));\n        var lastNameValid = element(by.binding('myForm.lastName.$valid'));\n        var lastNameError = element(by.binding('myForm.lastName.$error'));\n        var formValid = element(by.binding('myForm.$valid'));\n        var userNameInput = element(by.model('user.name'));\n        var userLastInput = element(by.model('user.last'));\n\n        it('should initialize to model', function() {\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if empty when required', function() {\n          userNameInput.clear();\n          userNameInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"last\":\"visitor\"}');\n          expect(userNameValid.getText()).toContain('false');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be valid if empty when min length is set', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(lastNameValid.getText()).toContain('true');\n          expect(formValid.getText()).toContain('true');\n        });\n\n        it('should be invalid if less than required min length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('xx');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('minlength');\n          expect(formValid.getText()).toContain('false');\n        });\n\n        it('should be invalid if longer than max length', function() {\n          userLastInput.clear();\n          userLastInput.sendKeys('some ridiculously long name');\n\n          expect(user.getText()).toContain('{\"name\":\"guest\"}');\n          expect(lastNameValid.getText()).toContain('false');\n          expect(lastNameError.getText()).toContain('maxlength');\n          expect(formValid.getText()).toContain('false');\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "input",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "input ng.directive:input downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "input",
        "left": 246,
        "level": 1,
        "root": "ng",
        "right": 247
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngValue",
                "altName": null,
                "description": "angular expression, whose value will be bound to the `value` attribute\nof the `input` element",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngValue",
        "description": "Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},\nso that when the element is selected, the {@link ngModel `ngModel`} of that element is set to\nthe bound value.\n\n`ngValue` is useful when dynamically generating lists of radio buttons using\n{@link ngRepeat `ngRepeat`}, as shown below.\n\nLikewise, `ngValue` can be used to generate `<option>` elements for\nthe {@link select `select`} element. In that case however, only strings are supported\nfor the `value `attribute, so the resulting `ngModel` will always be a string.\nSupport for `select` models with non-string values is available via `ngOptions`.",
        "element": "input",
        "example": "<example name=\"ngValue-directive\" module=\"valueExample\">\n      <file name=\"index.html\">\n       <script>\n          angular.module('valueExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.names = ['pizza', 'unicorns', 'robots'];\n              $scope.my = { favorite: 'unicorns' };\n            }]);\n       </script>\n        <form ng-controller=\"ExampleController\">\n          <h2>Which is your favorite?</h2>\n            <label ng-repeat=\"name in names\" for=\"{{name}}\">\n              {{name}}\n              <input type=\"radio\"\n                     ng-model=\"my.favorite\"\n                     ng-value=\"name\"\n                     id=\"{{name}}\"\n                     name=\"favorite\">\n            </label>\n          <div>You chose {{my.favorite}}</div>\n        </form>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        var favorite = element(by.binding('my.favorite'));\n\n        it('should initialize to model', function() {\n          expect(favorite.getText()).toContain('unicorns');\n        });\n        it('should bind the values to the inputs', function() {\n          element.all(by.model('my.favorite')).get(0).click();\n          expect(favorite.getText()).toContain('pizza');\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "module": "ng",
        "id": "ngValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngValue ng.directive:ngValue downloaded/angular/angular.js-master/src/ng/directive/input.js",
        "sortOn": "ngValue",
        "left": 248,
        "level": 1,
        "root": "ng",
        "right": 249
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngBind",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngBind",
        "restrict": "AC",
        "description": "The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\nwith the value of a given expression, and to update the text content when the value of that\nexpression changes.\n\nTypically, you don't use `ngBind` directly, but instead you use the double curly markup like\n`{{ expression }}` which is similar but less verbose.\n\nIt is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily\ndisplayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an\nelement attribute, it makes the bindings invisible to the user while the page is loading.\n\nAn alternative solution to this problem would be using the\n{@link ng.directive:ngCloak ngCloak} directive.",
        "element": "ANY",
        "example": "Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n   <example module=\"bindExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.name = 'Whirled';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Enter name: <input type=\"text\" ng-model=\"name\"><br>\n         Hello <span ng-bind=\"name\"></span>!\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var nameInput = element(by.model('name'));\n\n         expect(element(by.binding('name')).getText()).toBe('Whirled');\n         nameInput.clear();\n         nameInput.sendKeys('world');\n         expect(element(by.binding('name')).getText()).toBe('world');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "module": "ng",
        "id": "ngBind",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngBind ng.directive:ngBind downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "sortOn": "ngBind",
        "left": 250,
        "level": 1,
        "root": "ng",
        "right": 251
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngBindTemplate",
                "altName": null,
                "description": "template of form\n<tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngBindTemplate",
        "description": "The `ngBindTemplate` directive specifies that the element\ntext content should be replaced with the interpolation of the template\nin the `ngBindTemplate` attribute.\nUnlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`\nexpressions. This directive is needed since some HTML elements\n(such as TITLE and OPTION) cannot contain SPAN elements.",
        "element": "ANY",
        "example": "Try it here: enter text in text box and watch the greeting change.\n   <example module=\"bindExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('bindExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.salutation = 'Hello';\n             $scope.name = 'World';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n        Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n        Name: <input type=\"text\" ng-model=\"name\"><br>\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind', function() {\n         var salutationElem = element(by.binding('salutation'));\n         var salutationInput = element(by.model('salutation'));\n         var nameInput = element(by.model('name'));\n\n         expect(salutationElem.getText()).toBe('Hello World!');\n\n         salutationInput.clear();\n         salutationInput.sendKeys('Greetings');\n         nameInput.clear();\n         nameInput.sendKeys('user');\n\n         expect(salutationElem.getText()).toBe('Greetings user!');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "module": "ng",
        "id": "ngBindTemplate",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngBindTemplate ng.directive:ngBindTemplate downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "sortOn": "ngBindTemplate",
        "left": 252,
        "level": 1,
        "root": "ng",
        "right": 253
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngBindHtml",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngBindHtml",
        "description": "Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,\nthe resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.\nTo utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link\nngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}\nin your module's dependencies, you need to include \"angular-sanitize.js\" in your application.\n\nYou may also bypass sanitization for values you know are safe. To do so, bind to\nan explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example\nunder {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.\n\nNote: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you\nwill have an exception (instead of an exploit.)",
        "element": "ANY",
        "example": "<example module=\"bindHtmlExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n        <p ng-bind-html=\"myHTML\"></p>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n       angular.module('bindHtmlExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.myHTML =\n              'I am an <code>HTML</code>string with ' +\n              '<a href=\"#\">links!</a> and other <em>stuff</em>';\n         }]);\n     </file>\n\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-bind-html', function() {\n         expect(element(by.binding('myHTML')).getText()).toBe(\n             'I am an HTMLstring with links! and other stuff');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "module": "ng",
        "id": "ngBindHtml",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngBindHtml ng.directive:ngBindHtml downloaded/angular/angular.js-master/src/ng/directive/ngBind.js",
        "sortOn": "ngBindHtml",
        "left": 254,
        "level": 1,
        "root": "ng",
        "right": 255
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngChange",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon change\nin input value.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngChange",
        "description": "Evaluate the given expression when the user changes the input.\nThe expression is evaluated immediately, unlike the JavaScript onchange event\nwhich only triggers at the end of a change (usually, when the user leaves the\nform element or presses the return key).\n\nThe `ngChange` expression is only evaluated when a change in the input value causes\na new value to be committed to the model.\n\nIt will not be evaluated:\n* if the value returned from the `$parsers` transformation pipeline has not changed\n* if the input has continued to be invalid since the model will stay `null`\n* if the model is changed programmatically and not by a change to the input value\n\n\nNote, this directive requires `ngModel` to be present.",
        "element": "input",
        "example": "<example name=\"ngChange-directive\" module=\"changeExample\">\n<file name=\"index.html\">\n<script>\nangular.module('changeExample', [])\n.controller('ExampleController', ['$scope', function($scope) {\n$scope.counter = 0;\n$scope.change = function() {\n$scope.counter++;\n};\n}]);\n</script>\n<div ng-controller=\"ExampleController\">\n<input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n<input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n<label for=\"ng-change-example2\">Confirmed</label><br />\n<tt>debug = {{confirmed}}</tt><br/>\n<tt>counter = {{counter}}</tt><br/>\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\nvar counter = element(by.binding('counter'));\nvar debug = element(by.binding('confirmed'));\n\nit('should evaluate the expression if changing from view', function() {\nexpect(counter.getText()).toContain('0');\n\nelement(by.id('ng-change-example1')).click();\n\nexpect(counter.getText()).toContain('1');\nexpect(debug.getText()).toContain('true');\n});\n\nit('should not evaluate the expression if changing from model', function() {\nelement(by.id('ng-change-example2')).click();\n\nexpect(counter.getText()).toContain('0');\nexpect(debug.getText()).toContain('true');\n});\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngChange.js",
        "module": "ng",
        "id": "ngChange",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngChange ng.directive:ngChange downloaded/angular/angular.js-master/src/ng/directive/ngChange.js",
        "sortOn": "ngChange",
        "left": 256,
        "level": 1,
        "root": "ng",
        "right": 257
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngClass",
                "altName": null,
                "description": "{@link guide/expression Expression} to eval. The result\nof the evaluation can be a string representing space delimited class\nnames, an array, or a map of class names to boolean values. In the case of a map, the\nnames of the properties whose values are truthy will be added as css classes to the\nelement.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngClass",
        "restrict": "AC",
        "description": "The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding\nan expression that represents all classes to be added.\n\nThe directive operates in three different ways, depending on which of three types the expression\nevaluates to:\n\n1. If the expression evaluates to a string, the string should be one or more space-delimited class\nnames.\n\n2. If the expression evaluates to an object, then for each key-value pair of the\nobject with a truthy value the corresponding key is used as a class name.\n\n3. If the expression evaluates to an array, each element of the array should either be a string as in\ntype 1 or an object as in type 2. This means that you can mix strings and objects together in an array\nto give you more control over what CSS classes appear. See the code below for an example of this.\n\n\nThe directive won't add duplicate classes if a particular class was already set.\n\nWhen the expression changes, the previously added classes are removed and only then are the\nnew classes added.",
        "animations": "**add** - happens just before the class is applied to the elements\n\n**remove** - happens just before the class is removed from the element",
        "element": "ANY",
        "example": "Example that demonstrates basic bindings via ngClass directive.\n   <example>\n     <file name=\"index.html\">\n       <p ng-class=\"{strike: deleted, bold: important, red: error}\">Map Syntax Example</p>\n       <input type=\"checkbox\" ng-model=\"deleted\"> deleted (apply \"strike\" class)<br>\n       <input type=\"checkbox\" ng-model=\"important\"> important (apply \"bold\" class)<br>\n       <input type=\"checkbox\" ng-model=\"error\"> error (apply \"red\" class)\n       <hr>\n       <p ng-class=\"style\">Using String Syntax</p>\n       <input type=\"text\" ng-model=\"style\" placeholder=\"Type: bold strike red\">\n       <hr>\n       <p ng-class=\"[style1, style2, style3]\">Using Array Syntax</p>\n       <input ng-model=\"style1\" placeholder=\"Type: bold, strike or red\"><br>\n       <input ng-model=\"style2\" placeholder=\"Type: bold, strike or red\"><br>\n       <input ng-model=\"style3\" placeholder=\"Type: bold, strike or red\"><br>\n       <hr>\n       <p ng-class=\"[style4, {orange: warning}]\">Using Array and Map Syntax</p>\n       <input ng-model=\"style4\" placeholder=\"Type: bold, strike\"><br>\n       <input type=\"checkbox\" ng-model=\"warning\"> warning (apply \"orange\" class)\n     </file>\n     <file name=\"style.css\">\n       .strike {\n           text-decoration: line-through;\n       }\n       .bold {\n           font-weight: bold;\n       }\n       .red {\n           color: red;\n       }\n       .orange {\n           color: orange;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var ps = element.all(by.css('p'));\n\n       it('should let you toggle the class', function() {\n\n         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);\n         expect(ps.first().getAttribute('class')).not.toMatch(/red/);\n\n         element(by.model('important')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/bold/);\n\n         element(by.model('error')).click();\n         expect(ps.first().getAttribute('class')).toMatch(/red/);\n       });\n\n       it('should let you toggle string example', function() {\n         expect(ps.get(1).getAttribute('class')).toBe('');\n         element(by.model('style')).clear();\n         element(by.model('style')).sendKeys('red');\n         expect(ps.get(1).getAttribute('class')).toBe('red');\n       });\n\n       it('array example should have 3 classes', function() {\n         expect(ps.get(2).getAttribute('class')).toBe('');\n         element(by.model('style1')).sendKeys('bold');\n         element(by.model('style2')).sendKeys('strike');\n         element(by.model('style3')).sendKeys('red');\n         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');\n       });\n\n       it('array with map example should have 2 classes', function() {\n         expect(ps.last().getAttribute('class')).toBe('');\n         element(by.model('style4')).sendKeys('bold');\n         element(by.model('warning')).click();\n         expect(ps.last().getAttribute('class')).toBe('bold orange');\n       });\n     </file>\n   </example>\n\n   ## Animations\n\n   The example below demonstrates how to perform animations using ngClass.\n\n   <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n     <file name=\"index.html\">\n      <input id=\"setbtn\" type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n      <input id=\"clearbtn\" type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n      <br>\n      <span class=\"base-class\" ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n       .base-class {\n         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n       }\n\n       .base-class.my-class {\n         color: red;\n         font-size:3em;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class', function() {\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n\n         element(by.id('setbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).\n           toMatch(/my-class/);\n\n         element(by.id('clearbtn')).click();\n\n         expect(element(by.css('.base-class')).getAttribute('class')).not.\n           toMatch(/my-class/);\n       });\n     </file>\n   </example>\n\n\n   ## ngClass and pre-existing CSS3 Transitions/Animations\n   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.\n   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder\n   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure\n   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and\n   {@link ng.$animate#removeClass $animate.removeClass}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "module": "ng",
        "id": "ngClass",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngClass ng.directive:ngClass downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "sortOn": "ngClass",
        "left": 258,
        "level": 1,
        "root": "ng",
        "right": 259
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngClassOdd",
                "altName": null,
                "description": "{@link guide/expression Expression} to eval. The result\nof the evaluation can be a string representing space delimited class names or an array.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngClassOdd",
        "restrict": "AC",
        "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
        "element": "ANY",
        "example": "<example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}}\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "module": "ng",
        "id": "ngClassOdd",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngClassOdd ng.directive:ngClassOdd downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "sortOn": "ngClassOdd",
        "left": 260,
        "level": 1,
        "root": "ng",
        "right": 261
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngClassEven",
                "altName": null,
                "description": "{@link guide/expression Expression} to eval. The\nresult of the evaluation can be a string representing space delimited class names or an array.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngClassEven",
        "restrict": "AC",
        "description": "The `ngClassOdd` and `ngClassEven` directives work exactly as\n{@link ng.directive:ngClass ngClass}, except they work in\nconjunction with `ngRepeat` and take effect only on odd (even) rows.\n\nThis directive can be applied only within the scope of an\n{@link ng.directive:ngRepeat ngRepeat}.",
        "element": "ANY",
        "example": "<example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}} &nbsp; &nbsp; &nbsp;\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).\n           toMatch(/odd/);\n         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "module": "ng",
        "id": "ngClassEven",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngClassEven ng.directive:ngClassEven downloaded/angular/angular.js-master/src/ng/directive/ngClass.js",
        "sortOn": "ngClassEven",
        "left": 262,
        "level": 1,
        "root": "ng",
        "right": 263
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngCloak",
        "restrict": "AC",
        "description": "The `ngCloak` directive is used to prevent the Angular html template from being briefly\ndisplayed by the browser in its raw (uncompiled) form while your application is loading. Use this\ndirective to avoid the undesirable flicker effect caused by the html template display.\n\nThe directive can be applied to the `<body>` element, but the preferred usage is to apply\nmultiple `ngCloak` directives to small portions of the page to permit progressive rendering\nof the browser view.\n\n`ngCloak` works in cooperation with the following css rule embedded within `angular.js` and\n`angular.min.js`.\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```css\n[ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\ndisplay: none !important;\n}\n```\n\nWhen this css rule is loaded by the browser, all html elements (including their children) that\nare tagged with the `ngCloak` directive are hidden. When Angular encounters this directive\nduring the compilation of the template it deletes the `ngCloak` element attribute, making\nthe compiled element visible.\n\nFor the best result, the `angular.js` script must be loaded in the head section of the html\ndocument; alternatively, the css rule above must be included in the external stylesheet of the\napplication.\n\nLegacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\ncannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\nclass `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.",
        "element": "ANY",
        "example": "<example>\n     <file name=\"index.html\">\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n        <div id=\"template2\" ng-cloak class=\"ng-cloak\">{{ 'hello IE7' }}</div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should remove the template directive and css class', function() {\n         expect($('#template1').getAttribute('ng-cloak')).\n           toBeNull();\n         expect($('#template2').getAttribute('ng-cloak')).\n           toBeNull();\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngCloak.js",
        "module": "ng",
        "id": "ngCloak",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngCloak ng.directive:ngCloak downloaded/angular/angular.js-master/src/ng/directive/ngCloak.js",
        "sortOn": "ngCloak",
        "left": 264,
        "level": 1,
        "root": "ng",
        "right": 265
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngController",
                "altName": null,
                "description": "Name of a constructor function registered with the current\n{@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}\nthat on the current scope evaluates to a constructor function.\n\nThe controller instance can be published into a scope property by specifying\n`ng-controller=\"as propertyName\"`.\n\nIf the current `$controllerProvider` is configured to use globals (via\n{@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may\nalso be the name of a globally accessible constructor function (not recommended).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngController",
        "description": "The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular\nsupports the principles behind the Model-View-Controller design pattern.\n\nMVC components in angular:\n\n* Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties\nare accessed through bindings.\n* View — The template (HTML with data bindings) that is rendered into the View.\n* Controller — The `ngController` directive specifies a Controller class; the class contains business\nlogic behind the application to decorate the scope with functions and values\n\nNote that you can also attach controllers to the DOM by declaring it in a route definition\nvia the {@link ngRoute.$route $route} service. A common mistake is to declare the controller\nagain using `ng-controller` in the template itself.  This will cause the controller to be attached\nand executed twice.",
        "element": "ANY",
        "scope": true,
        "priority": "500",
        "example": "Here is a simple form for editing user contact information. Adding, removing, clearing, and\ngreeting are methods declared on the controller (see source tab). These methods can\neasily be called from the angular markup. Any changes to the data are automatically reflected\nin the View without the need for a manual update.\n\nTwo different declaration styles are included below:\n\n* one binds methods and properties directly onto the controller using `this`:\n`ng-controller=\"SettingsController1 as settings\"`\n* one injects `$scope` into the controller:\n`ng-controller=\"SettingsController2\"`\n\nThe second option is more common in the Angular community, and is generally used in boilerplates\nand in this guide. However, there are advantages to binding properties directly to the controller\nand avoiding scope.\n\n* Using `controller as` makes it obvious which controller you are accessing in the template when\nmultiple controllers apply to an element.\n* If you are writing your controllers as classes you have easier access to the properties and\nmethods, which will appear on the scope, from inside the controller code.\n* Since there is always a `.` in the bindings, you don't have to worry about prototypal\ninheritance masking primitives.\n\nThis example demonstrates the `controller as` syntax.\n\n<example name=\"ngControllerAs\" module=\"controllerAsExample\">\n<file name=\"index.html\">\n<div id=\"ctrl-as-exmpl\" ng-controller=\"SettingsController1 as settings\">\nName: <input type=\"text\" ng-model=\"settings.name\"/>\n[ <a href=\"\" ng-click=\"settings.greet()\">greet</a> ]<br/>\nContact:\n<ul>\n<li ng-repeat=\"contact in settings.contacts\">\n<select ng-model=\"contact.type\">\n<option>phone</option>\n<option>email</option>\n</select>\n<input type=\"text\" ng-model=\"contact.value\"/>\n[ <a href=\"\" ng-click=\"settings.clearContact(contact)\">clear</a>\n| <a href=\"\" ng-click=\"settings.removeContact(contact)\">X</a> ]\n</li>\n<li>[ <a href=\"\" ng-click=\"settings.addContact()\">add</a> ]</li>\n</ul>\n</div>\n</file>\n<file name=\"app.js\">\nangular.module('controllerAsExample', [])\n.controller('SettingsController1', SettingsController1);\n\nfunction SettingsController1() {\nthis.name = \"John Smith\";\nthis.contacts = [\n{type: 'phone', value: '408 555 1212'},\n{type: 'email', value: 'john.smith@example.org'} ];\n}\n\nSettingsController1.prototype.greet = function() {\nalert(this.name);\n};\n\nSettingsController1.prototype.addContact = function() {\nthis.contacts.push({type: 'email', value: 'yourname@example.org'});\n};\n\nSettingsController1.prototype.removeContact = function(contactToRemove) {\nvar index = this.contacts.indexOf(contactToRemove);\nthis.contacts.splice(index, 1);\n};\n\nSettingsController1.prototype.clearContact = function(contact) {\ncontact.type = 'phone';\ncontact.value = '';\n};\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\nit('should check controller as', function() {\nvar container = element(by.id('ctrl-as-exmpl'));\nexpect(container.element(by.model('settings.name'))\n.getAttribute('value')).toBe('John Smith');\n\nvar firstRepeat =\ncontainer.element(by.repeater('contact in settings.contacts').row(0));\nvar secondRepeat =\ncontainer.element(by.repeater('contact in settings.contacts').row(1));\n\nexpect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('408 555 1212');\n\nexpect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('john.smith@example.org');\n\nfirstRepeat.element(by.linkText('clear')).click();\n\nexpect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('');\n\ncontainer.element(by.linkText('add')).click();\n\nexpect(container.element(by.repeater('contact in settings.contacts').row(2))\n.element(by.model('contact.value'))\n.getAttribute('value'))\n.toBe('yourname@example.org');\n});\n</file>\n</example>\n\nThis example demonstrates the \"attach to `$scope`\" style of controller.\n\n<example name=\"ngController\" module=\"controllerExample\">\n<file name=\"index.html\">\n<div id=\"ctrl-exmpl\" ng-controller=\"SettingsController2\">\nName: <input type=\"text\" ng-model=\"name\"/>\n[ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\nContact:\n<ul>\n<li ng-repeat=\"contact in contacts\">\n<select ng-model=\"contact.type\">\n<option>phone</option>\n<option>email</option>\n</select>\n<input type=\"text\" ng-model=\"contact.value\"/>\n[ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n| <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n</li>\n<li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n</ul>\n</div>\n</file>\n<file name=\"app.js\">\nangular.module('controllerExample', [])\n.controller('SettingsController2', ['$scope', SettingsController2]);\n\nfunction SettingsController2($scope) {\n$scope.name = \"John Smith\";\n$scope.contacts = [\n{type:'phone', value:'408 555 1212'},\n{type:'email', value:'john.smith@example.org'} ];\n\n$scope.greet = function() {\nalert($scope.name);\n};\n\n$scope.addContact = function() {\n$scope.contacts.push({type:'email', value:'yourname@example.org'});\n};\n\n$scope.removeContact = function(contactToRemove) {\nvar index = $scope.contacts.indexOf(contactToRemove);\n$scope.contacts.splice(index, 1);\n};\n\n$scope.clearContact = function(contact) {\ncontact.type = 'phone';\ncontact.value = '';\n};\n}\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\nit('should check controller', function() {\nvar container = element(by.id('ctrl-exmpl'));\n\nexpect(container.element(by.model('name'))\n.getAttribute('value')).toBe('John Smith');\n\nvar firstRepeat =\ncontainer.element(by.repeater('contact in contacts').row(0));\nvar secondRepeat =\ncontainer.element(by.repeater('contact in contacts').row(1));\n\nexpect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('408 555 1212');\nexpect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('john.smith@example.org');\n\nfirstRepeat.element(by.linkText('clear')).click();\n\nexpect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))\n.toBe('');\n\ncontainer.element(by.linkText('add')).click();\n\nexpect(container.element(by.repeater('contact in contacts').row(2))\n.element(by.model('contact.value'))\n.getAttribute('value'))\n.toBe('yourname@example.org');\n});\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngController.js",
        "module": "ng",
        "id": "ngController",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngController ng.directive:ngController downloaded/angular/angular.js-master/src/ng/directive/ngController.js",
        "sortOn": "ngController",
        "left": 266,
        "level": 1,
        "root": "ng",
        "right": 267
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngCsp",
        "element": "html",
        "description": "Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n\nThis is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.\n\nCSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\nFor Angular to be CSP compatible there are only two things that we need to do differently:\n\n- don't use `Function` constructor to generate optimized value getters\n- don't inject custom stylesheet into the document\n\nAngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`\ndirective will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will\nevaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\nbe raised.\n\nCSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically\nincludes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).\nTo make those directives work in CSP mode, include the `angular-csp.css` manually.\n\nAngular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This\nautodetection however triggers a CSP error to be logged in the console:\n\n```\nRefused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of\nscript in the following Content Security Policy directive: \"default-src 'self'\". Note that\n'script-src' was not explicitly set, so 'default-src' is used as a fallback.\n```\n\nThis error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`\ndirective on the root element of the application or on the `angular.js` script tag, whichever\nappears first in the html document.\n\n*Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*",
        "example": "// Note: the suffix `.csp` in the example name triggers\n      // csp mode in our http server!\n      <example name=\"example.csp\" module=\"cspExample\" ng-csp=\"true\">\n        <file name=\"index.html\">\n          <div ng-controller=\"MainController as ctrl\">\n            <div>\n              <button ng-click=\"ctrl.inc()\" id=\"inc\">Increment</button>\n              <span id=\"counter\">\n                {{ctrl.counter}}\n              </span>\n            </div>\n\n            <div>\n              <button ng-click=\"ctrl.evil()\" id=\"evil\">Evil</button>\n              <span id=\"evilError\">\n                {{ctrl.evilError}}\n              </span>\n            </div>\n          </div>\n        </file>\n        <file name=\"script.js\">\n           angular.module('cspExample', [])\n             .controller('MainController', function() {\n                this.counter = 0;\n                this.inc = function() {\n                  this.counter++;\n                };\n                this.evil = function() {\n                  // jshint evil:true\n                  try {\n                    eval('1+2');\n                  } catch (e) {\n                    this.evilError = e.message;\n                  }\n                };\n              });\n        </file>\n        <file name=\"protractor.js\" type=\"protractor\">\n          var util, webdriver;\n\n          var incBtn = element(by.id('inc'));\n          var counter = element(by.id('counter'));\n          var evilBtn = element(by.id('evil'));\n          var evilError = element(by.id('evilError'));\n\n          function getAndClearSevereErrors() {\n            return browser.manage().logs().get('browser').then(function(browserLog) {\n              return browserLog.filter(function(logEntry) {\n                return logEntry.level.value > webdriver.logging.Level.WARNING.value;\n              });\n            });\n          }\n\n          function clearErrors() {\n            getAndClearSevereErrors();\n          }\n\n          function expectNoErrors() {\n            getAndClearSevereErrors().then(function(filteredLog) {\n              expect(filteredLog.length).toEqual(0);\n              if (filteredLog.length) {\n                console.log('browser console errors: ' + util.inspect(filteredLog));\n              }\n            });\n          }\n\n          function expectError(regex) {\n            getAndClearSevereErrors().then(function(filteredLog) {\n              var found = false;\n              filteredLog.forEach(function(log) {\n                if (log.message.match(regex)) {\n                  found = true;\n                }\n              });\n              if (!found) {\n                throw new Error('expected an error that matches ' + regex);\n              }\n            });\n          }\n\n          beforeEach(function() {\n            util = require('util');\n            webdriver = require('protractor/node_modules/selenium-webdriver');\n          });\n\n          // For now, we only test on Chrome,\n          // as Safari does not load the page with Protractor's injected scripts,\n          // and Firefox webdriver always disables content security policy (#6358)\n          if (browser.params.browser !== 'chrome') {\n            return;\n          }\n\n          it('should not report errors when the page is loaded', function() {\n            // clear errors so we are not dependent on previous tests\n            clearErrors();\n            // Need to reload the page as the page is already loaded when\n            // we come here\n            browser.driver.getCurrentUrl().then(function(url) {\n              browser.get(url);\n            });\n            expectNoErrors();\n          });\n\n          it('should evaluate expressions', function() {\n            expect(counter.getText()).toEqual('0');\n            incBtn.click();\n            expect(counter.getText()).toEqual('1');\n            expectNoErrors();\n          });\n\n          it('should throw and report an error when using \"eval\"', function() {\n            evilBtn.click();\n            expect(evilError.getText()).toMatch(/Content Security Policy/);\n            expectError(/Content Security Policy/);\n          });\n        </file>\n      </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngCsp.js",
        "module": "ng",
        "id": "ngCsp",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngCsp ng.directive:ngCsp downloaded/angular/angular.js-master/src/ng/directive/ngCsp.js",
        "sortOn": "ngCsp",
        "left": 268,
        "level": 1,
        "root": "ng",
        "right": 269
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngClick",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nclick. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngClick",
        "description": "The ngClick directive allows you to specify custom behavior when\nan element is clicked.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n        Increment\n      </button>\n      <span>\n        count: {{count}}\n      </span>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-click', function() {\n         expect(element(by.binding('count')).getText()).toMatch('0');\n         element(by.css('button')).click();\n         expect(element(by.binding('count')).getText()).toMatch('1');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngClick",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngClick ng.directive:ngClick downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngClick",
        "left": 270,
        "level": 1,
        "root": "ng",
        "right": 271
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngDblclick",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\na dblclick. (The Event object is available as `$event`)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngDblclick",
        "description": "The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-dblclick=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on double click)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngDblclick",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngDblclick ng.directive:ngDblclick downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngDblclick",
        "left": 272,
        "level": 1,
        "root": "ng",
        "right": 273
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMousedown",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmousedown. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMousedown",
        "description": "The ngMousedown directive allows you to specify custom behavior on mousedown event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mousedown=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse down)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMousedown",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMousedown ng.directive:ngMousedown downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMousedown",
        "left": 274,
        "level": 1,
        "root": "ng",
        "right": 275
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMouseup",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmouseup. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMouseup",
        "description": "Specify custom behavior on mouseup event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mouseup=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (on mouse up)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMouseup",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMouseup ng.directive:ngMouseup downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMouseup",
        "left": 276,
        "level": 1,
        "root": "ng",
        "right": 277
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMouseover",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmouseover. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMouseover",
        "description": "Specify custom behavior on mouseover event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mouseover=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse is over)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMouseover",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMouseover ng.directive:ngMouseover downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMouseover",
        "left": 278,
        "level": 1,
        "root": "ng",
        "right": 279
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMouseenter",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmouseenter. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMouseenter",
        "description": "Specify custom behavior on mouseenter event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mouseenter=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse enters)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMouseenter",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMouseenter ng.directive:ngMouseenter downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMouseenter",
        "left": 280,
        "level": 1,
        "root": "ng",
        "right": 281
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMouseleave",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmouseleave. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMouseleave",
        "description": "Specify custom behavior on mouseleave event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mouseleave=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse leaves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMouseleave",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMouseleave ng.directive:ngMouseleave downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMouseleave",
        "left": 282,
        "level": 1,
        "root": "ng",
        "right": 283
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMousemove",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nmousemove. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMousemove",
        "description": "Specify custom behavior on mousemove event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <button ng-mousemove=\"count = count + 1\" ng-init=\"count=0\">\n        Increment (when mouse moves)\n      </button>\n      count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngMousemove",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMousemove ng.directive:ngMousemove downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngMousemove",
        "left": 284,
        "level": 1,
        "root": "ng",
        "right": 285
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngKeydown",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nkeydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngKeydown",
        "description": "Specify custom behavior on keydown event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <input ng-keydown=\"count = count + 1\" ng-init=\"count=0\">\n      key down count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngKeydown",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngKeydown ng.directive:ngKeydown downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngKeydown",
        "left": 286,
        "level": 1,
        "root": "ng",
        "right": 287
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngKeyup",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nkeyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngKeyup",
        "description": "Specify custom behavior on keyup event.",
        "element": "ANY",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n       <p>Typing in the input box below updates the key count</p>\n       <input ng-keyup=\"count = count + 1\" ng-init=\"count=0\"> key up count: {{count}}\n\n       <p>Typing in the input box below updates the keycode</p>\n       <input ng-keyup=\"event=$event\">\n       <p>event keyCode: {{ event.keyCode }}</p>\n       <p>event altKey: {{ event.altKey }}</p>\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngKeyup",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngKeyup ng.directive:ngKeyup downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngKeyup",
        "left": 288,
        "level": 1,
        "root": "ng",
        "right": 289
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngKeypress",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nkeypress. ({@link guide/expression#-event- Event object is available as `$event`}\nand can be interrogated for keyCode, altKey, etc.)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngKeypress",
        "description": "Specify custom behavior on keypress event.",
        "element": "ANY",
        "example": "<example>\n     <file name=\"index.html\">\n      <input ng-keypress=\"count = count + 1\" ng-init=\"count=0\">\n      key press count: {{count}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngKeypress",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngKeypress ng.directive:ngKeypress downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngKeypress",
        "left": 290,
        "level": 1,
        "root": "ng",
        "right": 291
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngSubmit",
                "altName": null,
                "description": "{@link guide/expression Expression} to eval.\n({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSubmit",
        "description": "Enables binding angular expressions to onsubmit events.\n\nAdditionally it prevents the default action (which for form means sending the request to the\nserver and reloading the current page), but only if the form does not contain `action`,\n`data-action`, or `x-action` attributes.\n\n<div class=\"alert alert-warning\">\n**Warning:** Be careful not to cause \"double-submission\" by using both the `ngClick` and\n`ngSubmit` handlers together. See the\n{@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}\nfor a detailed discussion of when `ngSubmit` may be triggered.\n</div>",
        "element": "form",
        "priority": "0",
        "example": "<example module=\"submitExample\">\n     <file name=\"index.html\">\n      <script>\n        angular.module('submitExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.list = [];\n            $scope.text = 'hello';\n            $scope.submit = function() {\n              if ($scope.text) {\n                $scope.list.push(this.text);\n                $scope.text = '';\n              }\n            };\n          }]);\n      </script>\n      <form ng-submit=\"submit()\" ng-controller=\"ExampleController\">\n        Enter text and hit enter:\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n        <pre>list={{list}}</pre>\n      </form>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-submit', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n         expect(element(by.model('text')).getAttribute('value')).toBe('');\n       });\n       it('should ignore empty strings', function() {\n         expect(element(by.binding('list')).getText()).toBe('list=[]');\n         element(by.css('#submit')).click();\n         element(by.css('#submit')).click();\n         expect(element(by.binding('list')).getText()).toContain('hello');\n        });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngSubmit",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSubmit ng.directive:ngSubmit downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngSubmit",
        "left": 292,
        "level": 1,
        "root": "ng",
        "right": 293
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngFocus",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nfocus. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngFocus",
        "description": "Specify custom behavior on focus event.\n\nNote: As the `focus` event is executed synchronously when calling `input.focus()`\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
        "element": "window, input, select, textarea, a",
        "priority": "0",
        "example": "See {@link ng.directive:ngClick ngClick}",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngFocus",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngFocus ng.directive:ngFocus downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngFocus",
        "left": 294,
        "level": 1,
        "root": "ng",
        "right": 295
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngBlur",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\nblur. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngBlur",
        "description": "Specify custom behavior on blur event.\n\nA [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when\nan element has lost focus.\n\nNote: As the `blur` event is executed synchronously also during DOM manipulations\n(e.g. removing a focussed input),\nAngularJS executes the expression using `scope.$evalAsync` if the event is fired\nduring an `$apply` to ensure a consistent state.",
        "element": "window, input, select, textarea, a",
        "priority": "0",
        "example": "See {@link ng.directive:ngClick ngClick}",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngBlur",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngBlur ng.directive:ngBlur downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngBlur",
        "left": 296,
        "level": 1,
        "root": "ng",
        "right": 297
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngCopy",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\ncopy. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngCopy",
        "description": "Specify custom behavior on copy event.",
        "element": "window, input, select, textarea, a",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <input ng-copy=\"copied=true\" ng-init=\"copied=false; value='copy me'\" ng-model=\"value\">\n      copied: {{copied}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngCopy",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngCopy ng.directive:ngCopy downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngCopy",
        "left": 298,
        "level": 1,
        "root": "ng",
        "right": 299
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngCut",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\ncut. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngCut",
        "description": "Specify custom behavior on cut event.",
        "element": "window, input, select, textarea, a",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <input ng-cut=\"cut=true\" ng-init=\"cut=false; value='cut me'\" ng-model=\"value\">\n      cut: {{cut}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngCut",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngCut ng.directive:ngCut downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngCut",
        "left": 300,
        "level": 1,
        "root": "ng",
        "right": 301
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngPaste",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate upon\npaste. ({@link guide/expression#-event- Event object is available as `$event`})",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngPaste",
        "description": "Specify custom behavior on paste event.",
        "element": "window, input, select, textarea, a",
        "priority": "0",
        "example": "<example>\n     <file name=\"index.html\">\n      <input ng-paste=\"paste=true\" ng-init=\"paste=false\" placeholder='paste here'>\n      pasted: {{paste}}\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "module": "ng",
        "id": "ngPaste",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngPaste ng.directive:ngPaste downloaded/angular/angular.js-master/src/ng/directive/ngEventDirs.js",
        "sortOn": "ngPaste",
        "left": 302,
        "level": 1,
        "root": "ng",
        "right": 303
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngIf",
                "altName": null,
                "description": "If the {@link guide/expression expression} is falsy then\nthe element is removed from the DOM tree. If it is truthy a copy of the compiled\nelement is added to the DOM tree.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngIf",
        "restrict": "A",
        "description": "The `ngIf` directive removes or recreates a portion of the DOM tree based on an\n{expression}. If the expression assigned to `ngIf` evaluates to a false\nvalue then the element is removed from the DOM, otherwise a clone of the\nelement is reinserted into the DOM.\n\n`ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\nelement in the DOM rather than changing its visibility via the `display` css property.  A common\ncase when this difference is significant is when using css selectors that rely on an element's\nposition within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.\n\nNote that when an element is removed using `ngIf` its scope is destroyed and a new scope\nis created when the element is restored.  The scope created within `ngIf` inherits from\nits parent scope using\n[prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).\nAn important implication of this is if `ngModel` is used within `ngIf` to bind to\na javascript primitive defined in the parent scope. In this case any modifications made to the\nvariable within the child scope will override (hide) the value in the parent scope.\n\nAlso, `ngIf` recreates elements using their compiled state. An example of this behavior\nis if an element's class attribute is directly modified after it's compiled, using something like\njQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\nthe added class will be lost because the original compiled state is used to regenerate the element.\n\nAdditionally, you can provide animations via the `ngAnimate` module to animate the `enter`\nand `leave` effects.",
        "animations": "enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container\nleave - happens just before the `ngIf` contents are removed from the DOM",
        "element": "ANY",
        "scope": true,
        "priority": "600",
        "example": "<example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /><br/>\n      Show when checked:\n      <span ng-if=\"checked\" class=\"animate-if\">\n        This is removed when the checkbox is unchecked.\n      </span>\n    </file>\n    <file name=\"animations.css\">\n      .animate-if {\n        background:white;\n        border:1px solid black;\n        padding:10px;\n      }\n\n      .animate-if.ng-enter, .animate-if.ng-leave {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .animate-if.ng-enter,\n      .animate-if.ng-leave.ng-leave-active {\n        opacity:0;\n      }\n\n      .animate-if.ng-leave,\n      .animate-if.ng-enter.ng-enter-active {\n        opacity:1;\n      }\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngIf.js",
        "module": "ng",
        "id": "ngIf",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngIf ng.directive:ngIf downloaded/angular/angular.js-master/src/ng/directive/ngIf.js",
        "sortOn": "ngIf",
        "left": 304,
        "level": 1,
        "root": "ng",
        "right": 305
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngInclude",
                "altName": "src",
                "description": "angular expression evaluating to URL. If the source is a string constant,\nmake sure you wrap it in*single** quotes, e.g. `src=\"'myPartialTemplate.html'\"`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "onload",
                "altName": null,
                "description": "Expression to evaluate when a new partial is loaded.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "autoscroll",
                "altName": null,
                "description": "Whether `ngInclude` should call {@link ng.$anchorScroll\n$anchorScroll} to scroll the viewport after the content is loaded.\n\n- If the attribute is not set, disable scrolling.\n- If the attribute is set without value, enable scrolling.\n- Otherwise enable scrolling only if the expression evaluates to truthy value.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngInclude",
        "restrict": "ECA",
        "description": "Fetches, compiles and includes an external HTML fragment.\n\nBy default, the template URL is restricted to the same domain and protocol as the\napplication document. This is done by calling {@link $sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols\nyou may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or\n{@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link\nng.$sce Strict Contextual Escaping}.\n\nIn addition, the browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy may further restrict whether the template is successfully loaded.\nFor example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`\naccess on some browsers.",
        "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
        "scope": true,
        "priority": "400",
        "example": "<example module=\"includeExample\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n     <div ng-controller=\"ExampleController\">\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n        <option value=\"\">(blank)</option>\n       </select>\n       url of the template: <code>{{template.url}}</code>\n       <hr/>\n       <div class=\"slide-animate-container\">\n         <div class=\"slide-animate\" ng-include=\"template.url\"></div>\n       </div>\n     </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('includeExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.templates =\n            [ { name: 'template1.html', url: 'template1.html'},\n              { name: 'template2.html', url: 'template2.html'} ];\n          $scope.template = $scope.templates[0];\n        }]);\n     </file>\n    <file name=\"template1.html\">\n      Content of template1.html\n    </file>\n    <file name=\"template2.html\">\n      Content of template2.html\n    </file>\n    <file name=\"animations.css\">\n      .slide-animate-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .slide-animate {\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter, .slide-animate.ng-leave {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        display:block;\n        padding:10px;\n      }\n\n      .slide-animate.ng-enter {\n        top:-50px;\n      }\n      .slide-animate.ng-enter.ng-enter-active {\n        top:0;\n      }\n\n      .slide-animate.ng-leave {\n        top:0;\n      }\n      .slide-animate.ng-leave.ng-leave-active {\n        top:50px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var templateSelect = element(by.model('template'));\n      var includeElem = element(by.css('[ng-include]'));\n\n      it('should load template1.html', function() {\n        expect(includeElem.getText()).toMatch(/Content of template1.html/);\n      });\n\n      it('should load template2.html', function() {\n        if (browser.params.browser == 'firefox') {\n          // Firefox can't handle using selects\n          // See https://github.com/angular/protractor/issues/480\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(2).click();\n        expect(includeElem.getText()).toMatch(/Content of template2.html/);\n      });\n\n      it('should change to blank', function() {\n        if (browser.params.browser == 'firefox') {\n          // Firefox can't handle using selects\n          return;\n        }\n        templateSelect.click();\n        templateSelect.all(by.css('option')).get(0).click();\n        expect(includeElem.isPresent()).toBe(false);\n      });\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "module": "ng",
        "id": "ngInclude",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngInclude ng.directive:ngInclude downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "sortOn": "ngInclude",
        "left": 306,
        "level": 1,
        "root": "ng",
        "right": 313
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "String",
                        "type": "string"
                    }
                ],
                "varName": "src",
                "altName": null,
                "description": "URL of content to load.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$includeContentRequested",
        "eventType": "emit on the scope ngInclude was declared in",
        "description": "Emitted every time the ngInclude content is requested.",
        "parentDoc": {
            "module": "ng",
            "name": "ngInclude"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "module": "ng",
        "id": "$includeContentRequested",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$includeContentRequested ng.event:$includeContentRequested downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "sortOn": "$includeContentRequested",
        "left": 307,
        "level": 2,
        "root": "ng",
        "right": 308
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "String",
                        "type": "string"
                    }
                ],
                "varName": "src",
                "altName": null,
                "description": "URL of content to load.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$includeContentLoaded",
        "eventType": "emit on the current ngInclude scope",
        "description": "Emitted every time the ngInclude content is reloaded.",
        "parentDoc": {
            "module": "ng",
            "name": "ngInclude"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "module": "ng",
        "id": "$includeContentLoaded",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$includeContentLoaded ng.event:$includeContentLoaded downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "sortOn": "$includeContentLoaded",
        "left": 309,
        "level": 2,
        "root": "ng",
        "right": 310
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "String",
                        "type": "string"
                    }
                ],
                "varName": "src",
                "altName": null,
                "description": "URL of content to load.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$includeContentError",
        "eventType": "emit on the scope ngInclude was declared in",
        "description": "Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)",
        "parentDoc": {
            "module": "ng",
            "name": "ngInclude"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "module": "ng",
        "id": "$includeContentError",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$includeContentError ng.event:$includeContentError downloaded/angular/angular.js-master/src/ng/directive/ngInclude.js",
        "sortOn": "$includeContentError",
        "left": 311,
        "level": 2,
        "root": "ng",
        "right": 312
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngInit",
                "altName": null,
                "description": "{@link guide/expression Expression} to eval.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngInit",
        "restrict": "AC",
        "description": "The `ngInit` directive allows you to evaluate an expression in the\ncurrent scope.\n\n<div class=\"alert alert-danger\">\nThe only appropriate use of `ngInit` is for aliasing special properties of\n{@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you\nshould use {@link guide/controller controllers} rather than `ngInit`\nto initialize values on a scope.\n</div>\n<div class=\"alert alert-warning\">\n**Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make\nsure you have parenthesis for correct precedence:\n<pre class=\"prettyprint\">\n`<div ng-init=\"test1 = (data | orderBy:'name')\"></div>`\n</pre>\n</div>",
        "priority": "450",
        "element": "ANY",
        "example": "<example module=\"initExample\">\n     <file name=\"index.html\">\n   <script>\n     angular.module('initExample', [])\n       .controller('ExampleController', ['$scope', function($scope) {\n         $scope.list = [['a', 'b'], ['c', 'd']];\n       }]);\n   </script>\n   <div ng-controller=\"ExampleController\">\n     <div ng-repeat=\"innerList in list\" ng-init=\"outerIndex = $index\">\n       <div ng-repeat=\"value in innerList\" ng-init=\"innerIndex = $index\">\n          <span class=\"example-init\">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>\n       </div>\n     </div>\n   </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should alias index positions', function() {\n         var elements = element.all(by.css('.example-init'));\n         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');\n         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');\n         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');\n         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngInit.js",
        "module": "ng",
        "id": "ngInit",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngInit ng.directive:ngInit downloaded/angular/angular.js-master/src/ng/directive/ngInit.js",
        "sortOn": "ngInit",
        "left": 314,
        "level": 1,
        "root": "ng",
        "right": 315
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngList",
                "altName": null,
                "description": "optional delimiter that should be used to split the value.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngList",
        "description": "Text input that converts between a delimited string and an array of strings. The default\ndelimiter is a comma followed by a space - equivalent to `ng-list=\", \"`. You can specify a custom\ndelimiter as the value of the `ngList` attribute - for example, `ng-list=\" | \"`.\n\nThe behaviour of the directive is affected by the use of the `ngTrim` attribute.\n* If `ngTrim` is set to `\"false\"` then whitespace around both the separator and each\nlist item is respected. This implies that the user of the directive is responsible for\ndealing with whitespace but also allows you to use whitespace as a delimiter, such as a\ntab or newline character.\n* Otherwise whitespace around the delimiter is ignored when splitting (although it is respected\nwhen joining the list items back together) and whitespace around each list item is stripped\nbefore it is added to the model.\n\n### Example with Validation\n\n<example name=\"ngList-directive\" module=\"listExample\">\n<file name=\"app.js\">\nangular.module('listExample', [])\n.controller('ExampleController', ['$scope', function($scope) {\n$scope.names = ['morpheus', 'neo', 'trinity'];\n}]);\n</file>\n<file name=\"index.html\">\n<form name=\"myForm\" ng-controller=\"ExampleController\">\nList: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n<span class=\"error\" ng-show=\"myForm.namesInput.$error.required\">\nRequired!</span>\n<br>\n<tt>names = {{names}}</tt><br/>\n<tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n<tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n<tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n<tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n</form>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\nvar listInput = element(by.model('names'));\nvar names = element(by.exactBinding('names'));\nvar valid = element(by.binding('myForm.namesInput.$valid'));\nvar error = element(by.css('span.error'));\n\nit('should initialize to model', function() {\nexpect(names.getText()).toContain('[\"morpheus\",\"neo\",\"trinity\"]');\nexpect(valid.getText()).toContain('true');\nexpect(error.getCssValue('display')).toBe('none');\n});\n\nit('should be invalid if empty', function() {\nlistInput.clear();\nlistInput.sendKeys('');\n\nexpect(names.getText()).toContain('');\nexpect(valid.getText()).toContain('false');\nexpect(error.getCssValue('display')).not.toBe('none');\n});\n</file>\n</example>\n\n### Example - splitting on whitespace\n<example name=\"ngList-directive-newlines\">\n<file name=\"index.html\">\n<textarea ng-model=\"list\" ng-list=\"&#10;\" ng-trim=\"false\"></textarea>\n<pre>{{ list | json }}</pre>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\nit(\"should split the text by newlines\", function() {\nvar listInput = element(by.model('list'));\nvar output = element(by.binding('list | json'));\nlistInput.sendKeys('abc\\ndef\\nghi');\nexpect(output.getText()).toContain('[\\n  \"abc\",\\n  \"def\",\\n  \"ghi\"\\n]');\n});\n</file>\n</example>",
        "element": "input",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngList.js",
        "module": "ng",
        "id": "ngList",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngList ng.directive:ngList downloaded/angular/angular.js-master/src/ng/directive/ngList.js",
        "sortOn": "ngList",
        "left": 316,
        "level": 1,
        "root": "ng",
        "right": 317
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "ngModel.NgModelController",
        "property": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "viewValue",
                "altName": null,
                "description": "Actual string value in the view.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "modelValue",
                "altName": null,
                "description": "The value in the model that the control is bound to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "parsers",
                "altName": null,
                "description": "Array of functions to execute, as a pipeline, whenever\n       the control reads value from the DOM. The functions are called in array order, each passing\n       its return value through to the next. The last return value is forwarded to the\n       {@link ngModel.NgModelController#$validators `$validators`} collection.\n\nParsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue\n`$viewValue`}.\n\nReturning `undefined` from a parser means a parse error occurred. In that case,\nno {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`\nwill be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}\nis set to `true`. The parse error is stored in `ngModel.$error.parse`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "formatters",
                "altName": null,
                "description": "Array of functions to execute, as a pipeline, whenever\n       the model value changes. The functions are called in reverse array order, each passing the value through to the\n       next. The last return value is used as the actual DOM value.\n       Used to format / convert values for display in the control.\n```js\nfunction formatter(value) {\nif (value) {\nreturn value.toUpperCase();\n}\n}\nngModel.$formatters.push(formatter);\n```",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "validators",
                "altName": null,
                "description": "A collection of validators that are applied\nwhenever the model value changes. The key value within the object refers to the name of the\nvalidator while the function refers to the validation operation. The validation operation is\nprovided with the model value as an argument and must return a true or false value depending\non the response of that validation.\n\n```js\nngModel.$validators.validCharacters = function(modelValue, viewValue) {\nvar value = modelValue || viewValue;\nreturn /[0-9]+/.test(value) &&\n/[a-z]+/.test(value) &&\n/[A-Z]+/.test(value) &&\n/\\W+/.test(value);\n};\n```",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "asyncValidators",
                "altName": null,
                "description": "A collection of validations that are expected to\nperform an asynchronous validation (e.g. a HTTP request). The validation function that is provided\nis expected to return a promise when it is run during the model validation process. Once the promise\nis delivered then the validation status will be set to true when fulfilled and false when rejected.\nWhen the asynchronous validators are triggered, each of the validators will run in parallel and the model\nvalue will only be updated once all validators have been fulfilled. As long as an asynchronous validator\nis unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators\nwill only run once all synchronous validators have passed.\n\nPlease note that if $http is used then it is important that the server returns a success HTTP response code\nin order to fulfill the validation and a status level of `4xx` in order to reject the validation.\n\n```js\nngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {\nvar value = modelValue || viewValue;\n\n// Lookup user by username\nreturn $http.get('/api/users/' + value).\nthen(function resolved() {\n//username exists, this means validation fails\nreturn $q.reject('exists');\n}, function rejected() {\n//username does not exist, therefore this validation passes\nreturn true;\n});\n};\n```",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "viewChangeListeners",
                "altName": null,
                "description": "Array of functions to execute whenever the\nview value has changed. It is called with no arguments, and its return value is ignored.\nThis can be used in place of additional $watches against the model value.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "error",
                "altName": null,
                "description": "An object hash with all failing validator ids as keys.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "pending",
                "altName": null,
                "description": "An object hash with all pending validator ids as keys.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "untouched",
                "altName": null,
                "description": "True if control has not lost focus yet.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "touched",
                "altName": null,
                "description": "True if control has lost focus.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "pristine",
                "altName": null,
                "description": "True if user has not interacted with the control yet.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "dirty",
                "altName": null,
                "description": "True if user has already interacted with the control.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "valid",
                "altName": null,
                "description": "True if there is no error.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "invalid",
                "altName": null,
                "description": "True if at least one error on the control.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "name",
                "altName": null,
                "description": "The name attribute of the control.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "description": "`NgModelController` provides API for the {@link ngModel `ngModel`} directive.\nThe controller contains services for data-binding, validation, CSS updates, and value formatting\nand parsing. It purposefully does not contain any logic which deals with DOM rendering or\nlistening to DOM events.\nSuch DOM related logic should be provided by other directives which make use of\n`NgModelController` for data-binding to control elements.\nAngular provides this DOM logic for most {@link input `input`} elements.\nAt the end of this page you can find a {@link ngModel.NgModelController#custom-control-example\ncustom control example} that uses `ngModelController` to bind to `contenteditable` elements.",
        "example": "### Custom Control Example\nThis example shows how to use `NgModelController` with a custom control to achieve\ndata-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\ncollaborate together to achieve the desired result.\n\n`contenteditable` is an HTML5 attribute, which tells the browser to let the element\ncontents be edited in place by the user.\n\nWe are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}\nmodule to automatically remove \"bad\" content like inline event listener (e.g. `<span onclick=\"...\">`).\nHowever, as we are using `$sce` the model can still decide to provide unsafe content if it marks\nthat content using the `$sce` service.\n\n<example name=\"NgModelController\" module=\"customControl\" deps=\"angular-sanitize.js\">\n    <file name=\"style.css\">\n      [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n      .ng-invalid {\n        border: 1px solid red;\n      }\n\n    </file>\n    <file name=\"script.js\">\n      angular.module('customControl', ['ngSanitize']).\n        directive('contenteditable', ['$sce', function($sce) {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if (!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));\n              };\n\n              // Listen for change events to enable binding\n              element.on('blur keyup change', function() {\n                scope.$evalAsync(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                var html = element.html();\n                // When we clear the content editable the browser leaves a <br> behind\n                // If strip-br attribute is provided then we strip this out\n                if ( attrs.stripBr && html == '<br>' ) {\n                  html = '';\n                }\n                ngModel.$setViewValue(html);\n              }\n            }\n          };\n        }]);\n    </file>\n    <file name=\"index.html\">\n      <form name=\"myForm\">\n       <div contenteditable\n            name=\"myWidget\" ng-model=\"userContent\"\n            strip-br=\"true\"\n            required>Change me!</div>\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n       <hr>\n       <textarea ng-model=\"userContent\"></textarea>\n      </form>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n    it('should data-bind and become invalid', function() {\n      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {\n        // SafariDriver can't handle contenteditable\n        // and Firefox driver can't clear contenteditables very well\n        return;\n      }\n      var contentEditable = element(by.css('[contenteditable]'));\n      var content = 'Change me!';\n\n      expect(contentEditable.getText()).toEqual(content);\n\n      contentEditable.clear();\n      contentEditable.sendKeys(protractor.Key.BACK_SPACE);\n      expect(contentEditable.getText()).toEqual('');\n      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);\n    });\n    </file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "ngModel.NgModelController",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "ngModel.NgModelController ng.type:ngModel.NgModelController downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "ngModel.NgModelController",
        "left": 318,
        "level": 1,
        "root": "ng",
        "right": 341
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$render",
        "description": "Called when the view needs to be updated. It is expected that the user of the ng-model\ndirective will implement this method.\n\nThe `$render()` method is invoked in the following situations:\n\n* `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\ncommitted value then `$render()` is called to update the input control.\n* The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\nthe `$viewValue` are different from last time.\n\nSince `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n`$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`\nor `$viewValue` are objects (rather than a string or number) then `$render()` will not be\ninvoked if you only change a property on the objects.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$render",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$render ng.method:$render downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$render",
        "left": 319,
        "level": 2,
        "root": "ng",
        "right": 320
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value of the input to check for emptiness.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$isEmpty",
        "description": "This is called when we need to determine if the value of an input is empty.\n\nFor instance, the required directive does this to work out if the input has data or not.\n\nThe default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n\nYou can override this for input directives whose concept of being empty is different from the\ndefault. The `checkboxInputType` directive does this because in its case a value of `false`\nimplies empty.",
        "returns": "{boolean} True if `value` is \"empty\".",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$isEmpty",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$isEmpty ng.method:$isEmpty downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$isEmpty",
        "left": 321,
        "level": 2,
        "root": "ng",
        "right": 322
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "validationErrorKey",
                "altName": null,
                "description": "Name of the validator. The `validationErrorKey` will be assigned\nto either `$error[validationErrorKey]` or `$pending[validationErrorKey]`\n(for unfulfilled `$asyncValidators`), so that it is available for data-binding.\nThe `validationErrorKey` should be in camelCase and will get converted into dash-case\nfor class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\nclass and can be bound to as  `{{someForm.someControl.$error.myError}}` .",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "isValid",
                "altName": null,
                "description": "Whether the current state is valid (true), invalid (false), pending (undefined),\nor skipped (null). Pending is used for unfulfilled `$asyncValidators`.\nSkipped is used by Angular when validators do not run because of parse errors and\nwhen `$asyncValidators` do not run because any of the `$validators` failed.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setValidity",
        "description": "Change the validity state, and notify the form.\n\nThis method can be called within $parsers/$formatters or a custom validation implementation.\nHowever, in most cases it should be sufficient to use the `ngModel.$validators` and\n`ngModel.$asyncValidators` collections which will call `$setValidity` automatically.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setValidity",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setValidity ng.method:$setValidity downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setValidity",
        "left": 323,
        "level": 2,
        "root": "ng",
        "right": 324
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setPristine",
        "description": "Sets the control to its pristine state.\n\nThis method can be called to remove the `ng-dirty` class and set the control to its pristine\nstate (`ng-pristine` class). A model is considered to be pristine when the control\nhas not been changed from when first compiled.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setPristine",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setPristine ng.method:$setPristine downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setPristine",
        "left": 325,
        "level": 2,
        "root": "ng",
        "right": 326
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setDirty",
        "description": "Sets the control to its dirty state.\n\nThis method can be called to remove the `ng-pristine` class and set the control to its dirty\nstate (`ng-dirty` class). A model is considered to be dirty when the control has been changed\nfrom when first compiled.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setDirty",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setDirty ng.method:$setDirty downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setDirty",
        "left": 327,
        "level": 2,
        "root": "ng",
        "right": 328
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setUntouched",
        "description": "Sets the control to its untouched state.\n\nThis method can be called to remove the `ng-touched` class and set the control to its\nuntouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\nby default, however this function can be used to restore that state if the model has\nalready been touched by the user.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setUntouched",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setUntouched ng.method:$setUntouched downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setUntouched",
        "left": 329,
        "level": 2,
        "root": "ng",
        "right": 330
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setTouched",
        "description": "Sets the control to its touched state.\n\nThis method can be called to remove the `ng-untouched` class and set the control to its\ntouched state (`ng-touched` class). A model is considered to be touched when the user has\nfirst focused the control element and then shifted focus away from the control (blur event).",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setTouched",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setTouched ng.method:$setTouched downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setTouched",
        "left": 331,
        "level": 2,
        "root": "ng",
        "right": 332
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$rollbackViewValue",
        "description": "Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,\nwhich may be caused by a pending debounced event or because the input is waiting for a some\nfuture event.\n\nIf you have an input that uses `ng-model-options` to set up debounced events or events such\nas blur you can have a situation where there is a period when the `$viewValue`\nis out of synch with the ngModel's `$modelValue`.\n\nIn this case, you can run into difficulties if you try to update the ngModel's `$modelValue`\nprogrammatically before these debounced/future events have resolved/occurred, because Angular's\ndirty checking mechanism is not able to tell whether the model has actually changed or not.\n\nThe `$rollbackViewValue()` method should be called before programmatically changing the model of an\ninput which may have such events pending. This is important in order to make sure that the\ninput field will be updated with the new model value and any pending operations are cancelled.\n\n<example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n<file name=\"app.js\">\nangular.module('cancel-update-example', [])\n\n.controller('CancelUpdateController', ['$scope', function($scope) {\n$scope.resetWithCancel = function(e) {\nif (e.keyCode == 27) {\n$scope.myForm.myInput1.$rollbackViewValue();\n$scope.myValue = '';\n}\n};\n$scope.resetWithoutCancel = function(e) {\nif (e.keyCode == 27) {\n$scope.myValue = '';\n}\n};\n}]);\n</file>\n<file name=\"index.html\">\n<div ng-controller=\"CancelUpdateController\">\n<p>Try typing something in each input.  See that the model only updates when you\nblur off the input.\n</p>\n<p>Now see what happens if you start typing then press the Escape key</p>\n\n<form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n<p>With $rollbackViewValue()</p>\n<input name=\"myInput1\" ng-model=\"myValue\" ng-keydown=\"resetWithCancel($event)\"><br/>\nmyValue: \"{{ myValue }}\"\n\n<p>Without $rollbackViewValue()</p>\n<input name=\"myInput2\" ng-model=\"myValue\" ng-keydown=\"resetWithoutCancel($event)\"><br/>\nmyValue: \"{{ myValue }}\"\n</form>\n</div>\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$rollbackViewValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$rollbackViewValue ng.method:$rollbackViewValue downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$rollbackViewValue",
        "left": 333,
        "level": 2,
        "root": "ng",
        "right": 334
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$validate",
        "description": "Runs each of the registered validators (first synchronous validators and then\nasynchronous validators).\nIf the validity changes to invalid, the model will be set to `undefined`,\nunless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\nIf the validity changes to valid, it will set the model to the last available valid\nmodelValue, i.e. either the last parsed value or the last value set from the scope.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$validate",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$validate ng.method:$validate downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$validate",
        "left": 335,
        "level": 2,
        "root": "ng",
        "right": 336
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$commitViewValue",
        "description": "Commit a pending update to the `$modelValue`.\n\nUpdates may be pending by a debounced event or because the input is waiting for a some future\nevent defined in `ng-model-options`. this method is rarely needed as `NgModelController`\nusually handles calling this in response to input events.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$commitViewValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$commitViewValue ng.method:$commitViewValue downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$commitViewValue",
        "left": 337,
        "level": 2,
        "root": "ng",
        "right": 338
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "Value from the view.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "trigger",
                "altName": null,
                "description": "Event that triggered the update.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$setViewValue",
        "description": "Update the view value.\n\nThis method should be called when an input directive want to change the view value; typically,\nthis is done from within a DOM event handler.\n\nFor example {@link ng.directive:input input} calls it when the value of the input changes and\n{@link ng.directive:select select} calls it when an option is selected.\n\nIf the new `value` is an object (rather than a string or a number), we should make a copy of the\nobject before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep\nwatch of objects, it only looks for a change of identity. If you only change the property of\nthe object then ngModel will not realise that the object has changed and will not invoke the\n`$parsers` and `$validators` pipelines.\n\nFor this reason, you should not change properties of the copy once it has been passed to\n`$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.\n\nWhen this method is called, the new `value` will be staged for committing through the `$parsers`\nand `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\nvalue sent directly for processing, finally to be applied to `$modelValue` and then the\n**expression** specified in the `ng-model` attribute.\n\nLastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.\n\nIn case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\nand the `default` trigger is not listed, all those actions will remain pending until one of the\n`updateOn` events is triggered on the DOM element.\nAll these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\ndirective is used with a custom debounce for this particular event.\n\nNote that calling this function does not trigger a `$digest`.",
        "parentDoc": {
            "module": "ng",
            "name": "ngModel.NgModelController"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "$setViewValue",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$setViewValue ng.method:$setViewValue downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "$setViewValue",
        "left": 339,
        "level": 2,
        "root": "ng",
        "right": 340
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngModel",
        "element": "input",
        "priority": "1",
        "description": "The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a\nproperty on the scope using {@link ngModel.NgModelController NgModelController},\nwhich is created and exposed by this directive.\n\n`ngModel` is responsible for:\n\n- Binding the view into the model, which other directives such as `input`, `textarea` or `select`\nrequire.\n- Providing validation behavior (i.e. required, number, email, url).\n- Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).\n- Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.\n- Registering the control with its parent {@link ng.directive:form form}.\n\nNote: `ngModel` will try to bind to the property given by evaluating the expression on the\ncurrent scope. If the property doesn't already exist on this scope, it will be created\nimplicitly and added to the scope.\n\nFor best practices on using `ngModel`, see:\n\n- [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)\n\nFor basic examples, how to use `ngModel`, see:\n\n- {@link ng.directive:input input}\n- {@link input[text] text}\n- {@link input[checkbox] checkbox}\n- {@link input[radio] radio}\n- {@link input[number] number}\n- {@link input[email] email}\n- {@link input[url] url}\n- {@link input[date] date}\n- {@link input[datetime-local] datetime-local}\n- {@link input[time] time}\n- {@link input[month] month}\n- {@link input[week] week}\n- {@link ng.directive:select select}\n- {@link ng.directive:textarea textarea}\n\n# CSS classes\nThe following CSS classes are added and removed on the associated input/select/textarea element\ndepending on the validity of the model.\n\n- `ng-valid`: the model is valid\n- `ng-invalid`: the model is invalid\n- `ng-valid-[key]`: for each valid key added by `$setValidity`\n- `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n- `ng-pristine`: the control hasn't been interacted with yet\n- `ng-dirty`: the control has been interacted with\n- `ng-touched`: the control has been blurred\n- `ng-untouched`: the control hasn't been blurred\n- `ng-pending`: any `$asyncValidators` are unfulfilled\n\nKeep in mind that ngAnimate can detect each of these classes when added and removed.\n\n## Animation Hooks\n\nAnimations within models are triggered when any of the associated CSS classes are added and removed\non the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,\n`.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.\nThe animations that are triggered within ngModel are similar to how they work in ngClass and\nanimations can be hooked into using CSS transitions, keyframes as well as JS animations.\n\nThe following example shows a simple way to utilize CSS transitions to style an input element\nthat has been rendered as invalid after it has been validated:\n\n<pre>\n//be sure to include ngAnimate as a module to hook into more\n//advanced animations\n.my-input {\ntransition:0.5s linear all;\nbackground: white;\n}\n.my-input.ng-invalid {\nbackground: red;\ncolor:white;\n}\n</pre>",
        "example": "<example name=\"ngModel-getter-setter\" module=\"getterSetterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <form name=\"userForm\">\n           Name:\n           <input type=\"text\" name=\"userName\"\n                  ng-model=\"user.name\"\n                  ng-model-options=\"{ getterSetter: true }\" />\n         </form>\n         <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n       </div>\n     </file>\n     <file name=\"app.js\">\n       angular.module('getterSetterExample', [])\n         .controller('ExampleController', ['$scope', function($scope) {\n           var _name = 'Brian';\n           $scope.user = {\n             name: function(newName) {\n               if (angular.isDefined(newName)) {\n                 _name = newName;\n               }\n               return _name;\n             }\n           };\n         }]);\n     </file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "ngModel",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngModel ng.directive:ngModel downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "ngModel",
        "left": 342,
        "level": 1,
        "root": "ng",
        "right": 343
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "ngModelOptions",
                "altName": null,
                "description": "options to apply to the current model. Valid keys are:\n- `updateOn`: string specifying which event should the input be bound to. You can set several\nevents using an space delimited list. There is a special event called `default` that\nmatches the default events belonging of the control.\n- `debounce`: integer value which contains the debounce model update value in milliseconds. A\nvalue of 0 triggers an immediate update. If an object is supplied instead, you can specify a\ncustom value for each event. For example:\n`ng-model-options=\"{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }\"`\n- `allowInvalid`: boolean value which indicates that the model can be set with values that did\nnot validate correctly instead of the default behavior of setting the model to undefined.\n- `getterSetter`: boolean value which determines whether or not to treat functions bound to\n       `ngModel` as getters/setters.\n- `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for\n`<input type=\"date\">`, `<input type=\"time\">`, ... . It understands UTC/GMT and the\ncontinental US time zone abbreviations, but for general use, use a time zone offset, for\nexample, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\nIf not specified, the timezone of the browser will be used.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngModelOptions",
        "description": "Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of\nevents that will trigger a model update and/or a debouncing delay so that the actual update only\ntakes place when a timer expires; this timer will be reset after another change takes place.\n\nGiven the nature of `ngModelOptions`, the value displayed inside input fields in the view might\nbe different from the value in the actual model. This means that if you update the model you\nshould also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in\norder to make sure it is synchronized with the model and that any debounced action is canceled.\n\nThe easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}\nmethod is by making sure the input is placed inside a form that has a `name` attribute. This is\nimportant because `form` controllers are published to the related scope under the name in their\n`name` attribute.\n\nAny pending changes will take place immediately when an enclosing form is submitted via the\n`submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\nto have access to the updated model.\n\n`ngModelOptions` has an effect on the element it's declared on and its descendants.",
        "example": "The following example shows how to override immediate updates. Changes on the inputs within the\n  form will update the model only when the control loses focus (blur event). If `escape` key is\n  pressed while the input field is focused, the value is reset to the value in the current model.\n\n  <example name=\"ngModelOptions-directive-blur\" module=\"optionsExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ updateOn: 'blur' }\"\n                 ng-keyup=\"cancel($event)\" /><br />\n\n          Other data:\n          <input type=\"text\" ng-model=\"user.data\" /><br />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('optionsExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.user = { name: 'say', data: '' };\n\n          $scope.cancel = function(e) {\n            if (e.keyCode == 27) {\n              $scope.userForm.userName.$rollbackViewValue();\n            }\n          };\n        }]);\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var model = element(by.binding('user.name'));\n      var input = element(by.model('user.name'));\n      var other = element(by.model('user.data'));\n\n      it('should allow custom events', function() {\n        input.sendKeys(' hello');\n        input.click();\n        expect(model.getText()).toEqual('say');\n        other.click();\n        expect(model.getText()).toEqual('say hello');\n      });\n\n      it('should $rollbackViewValue when model changes', function() {\n        input.sendKeys(' hello');\n        expect(input.getAttribute('value')).toEqual('say hello');\n        input.sendKeys(protractor.Key.ESCAPE);\n        expect(input.getAttribute('value')).toEqual('say');\n        other.click();\n        expect(model.getText()).toEqual('say');\n      });\n    </file>\n  </example>\n\n  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.\n  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.\n\n  <example name=\"ngModelOptions-directive-debounce\" module=\"optionsExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ debounce: 1000 }\" />\n          <button ng-click=\"userForm.userName.$rollbackViewValue(); user.name=''\">Clear</button><br />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('optionsExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.user = { name: 'say' };\n        }]);\n    </file>\n  </example>\n\n  This one shows how to bind to getter/setters:\n\n  <example name=\"ngModelOptions-directive-getter-setter\" module=\"getterSetterExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <form name=\"userForm\">\n          Name:\n          <input type=\"text\" name=\"userName\"\n                 ng-model=\"user.name\"\n                 ng-model-options=\"{ getterSetter: true }\" />\n        </form>\n        <pre>user.name = <span ng-bind=\"user.name()\"></span></pre>\n      </div>\n    </file>\n    <file name=\"app.js\">\n      angular.module('getterSetterExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          var _name = 'Brian';\n          $scope.user = {\n            name: function(newName) {\n              return angular.isDefined(newName) ? (_name = newName) : _name;\n            }\n          };\n        }]);\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "module": "ng",
        "id": "ngModelOptions",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngModelOptions ng.directive:ngModelOptions downloaded/angular/angular.js-master/src/ng/directive/ngModel.js",
        "sortOn": "ngModelOptions",
        "left": 344,
        "level": 1,
        "root": "ng",
        "right": 345
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngNonBindable",
        "restrict": "AC",
        "priority": "1000",
        "description": "The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current\nDOM element. This is useful if the element contains what appears to be Angular directives and\nbindings but which should be ignored by Angular. This could be the case if you have a site that\ndisplays snippets of code, for instance.",
        "element": "ANY",
        "example": "<example>\n      <file name=\"index.html\">\n        <div>Normal: {{1 + 2}}</div>\n        <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n       it('should check ng-non-bindable', function() {\n         expect(element(by.binding('1 + 2')).getText()).toContain('3');\n         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \\+ 2/);\n       });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngNonBindable.js",
        "module": "ng",
        "id": "ngNonBindable",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngNonBindable ng.directive:ngNonBindable downloaded/angular/angular.js-master/src/ng/directive/ngNonBindable.js",
        "sortOn": "ngNonBindable",
        "left": 346,
        "level": 1,
        "root": "ng",
        "right": 347
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngModel",
                "altName": null,
                "description": "Assignable angular expression to data-bind to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Property name of the form under which the control is published.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "required",
                "altName": null,
                "description": "The control is considered valid only if value is entered.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngRequired",
                "altName": null,
                "description": "Adds `required` attribute and `required` validation constraint to\nthe element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n`required` when you want to data-bind to the `required` attribute.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "comprehension_expression",
                        "type": "comprehension_expression"
                    }
                ],
                "varName": "ngOptions",
                "altName": null,
                "description": "in one of the following forms:\n\n* for array data sources:\n* `label`*`for`** `value`*`in`** `array`\n* `select`*`as`** `label`*`for`** `value`*`in`** `array`\n* `label`*`group by`** `group`*`for`** `value`*`in`** `array`\n* `label`*`disable when`** `disable`*`for`** `value`*`in`** `array`\n* `label`*`group by`** `group`*`for`** `value`*`in`** `array`*`track by`** `trackexpr`\n* `label`*`disable when`** `disable`*`for`** `value`*`in`** `array`*`track by`** `trackexpr`\n* `label`*`for`** `value`*`in`** `array` | orderBy:`orderexpr`*`track by`** `trackexpr`\n(for including a filter with `track by`)\n* for object data sources:\n* `label`*`for (`**`key`*`,`** `value`**`) in`** `object`\n* `select`*`as`** `label`*`for (`**`key`*`,`** `value`**`) in`** `object`\n* `label`*`group by`** `group`*`for (`**`key`**`,`** `value`**`) in`** `object`\n* `label`*`disable when`** `disable`*`for (`**`key`**`,`** `value`**`) in`** `object`\n* `select`*`as`** `label`*`group by`** `group`\n**`for` `(`**`key`**`,`** `value`**`) in`** `object`\n* `select`*`as`** `label`*`disable when`** `disable`\n**`for` `(`**`key`**`,`** `value`**`) in`** `object`\n\nWhere:\n\n* `array` / `object`: an expression which evaluates to an array / object to iterate over.\n* `value`: local variable which will refer to each item in the `array` or each property value\nof `object` during iteration.\n* `key`: local variable which will refer to a property name in `object` during iteration.\n* `label`: The result of this expression will be the label for `<option>` element. The\n`expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n* `select`: The result of this expression will be bound to the model of the parent `<select>`\nelement. If not specified, `select` expression will default to `value`.\n* `group`: The result of this expression will be used to group options using the `<optgroup>`\nDOM element.\n* `disable`: The result of this expression will be used to disable the rendered `<option>`\nelement. Return `true` to disable.\n* `trackexpr`: Used when working with an array of objects. The result of this expression will be\nused to identify the objects in the array. The `trackexpr` will most likely refer to the\n`value` variable (e.g. `value.propertyName`). With this the selection is preserved\neven when the options are recreated (e.g. reloaded from the server).",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngOptions",
        "restrict": "A",
        "description": "The `ngOptions` attribute can be used to dynamically generate a list of `<option>`\nelements for the `<select>` element using the array or object obtained by evaluating the\n`ngOptions` comprehension expression.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a\nsimilar result. However, `ngOptions` provides some benefits such as reducing memory and\nincreasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select`*`as`** part of the\ncomprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound\nto a non-string value. This is because an option element can only be bound to string values at\npresent.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-warning\">\n**Note:** By default, `ngModel` compares by reference, not value. This is important when binding to an\narray of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/). When using `track by`\nin an `ngOptions` expression, however, deep equality checks will be performed.\n</div>\n\n## `select`*`as`**\n\nUsing `select`*`as`** will bind the result of the `select` expression to the model, but\nthe value of the `<select>` and `<option>` html elements will be either the index (for array data sources)\nor property name (for object data sources) of the value within the collection. If a*`track by`** expression\nis used, the result of that expression will be set as the value of the `option` and `select` elements.\n\n\n### `select`*`as`** and*`track by`**\n\n<div class=\"alert alert-warning\">\nDo not use `select`*`as`** and*`track by`** in the same expression. They are not designed to work together.\n</div>\n\nConsider the following example:\n\n```html\n<select ng-options=\"item.subItem as item.label for item in values track by item.id\" ng-model=\"selected\">\n```\n\n```js\n$scope.values = [{\nid: 1,\nlabel: 'aLabel',\nsubItem: { name: 'aSubItem' }\n}, {\nid: 2,\nlabel: 'bLabel',\nsubItem: { name: 'bSubItem' }\n}];\n\n$scope.selected = { name: 'aSubItem' };\n```\n\nWith the purpose of preserving the selection, the*`track by`** expression is always applied to the element\nof the data source (to `item` in this example). To calculate whether an element is selected, we do the\nfollowing:\n\n1. Apply*`track by`** to the elements in the array. In the example: `[1, 2]`\n2. Apply*`track by`** to the already selected value in `ngModel`.\nIn the example: this is not possible as*`track by`** refers to `item.id`, but the selected\nvalue from `ngModel` is `{name: 'aSubItem'}`, so the*`track by`** expression is applied to\na wrong object, the selected element can't be found, `<select>` is always reset to the \"not\nselected\" option.",
        "example": "<example module=\"selectExample\">\n      <file name=\"index.html\">\n        <script>\n        angular.module('selectExample', [])\n          .controller('ExampleController', ['$scope', function($scope) {\n            $scope.colors = [\n              {name:'black', shade:'dark'},\n              {name:'white', shade:'light', notAnOption: true},\n              {name:'red', shade:'dark'},\n              {name:'blue', shade:'dark', notAnOption: true},\n              {name:'yellow', shade:'light', notAnOption: false}\n            ];\n            $scope.myColor = $scope.colors[2]; // red\n          }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          <ul>\n            <li ng-repeat=\"color in colors\">\n              Name: <input ng-model=\"color.name\">\n              <input type=\"checkbox\" ng-model=\"color.notAnOption\"> Disabled?\n              [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n            </li>\n            <li>\n              [<a href ng-click=\"colors.push({})\">add</a>]\n            </li>\n          </ul>\n          <hr/>\n          Color (null not allowed):\n          <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\"></select><br>\n\n          Color (null allowed):\n          <span  class=\"nullable\">\n            <select ng-model=\"myColor\" ng-options=\"color.name for color in colors\">\n              <option value=\"\">-- choose color --</option>\n            </select>\n          </span><br/>\n\n          Color grouped by shade:\n          <select ng-model=\"myColor\" ng-options=\"color.name group by color.shade for color in colors\">\n          </select><br/>\n\n          Color grouped by shade, with some disabled:\n          <select ng-model=\"myColor\"\n                  ng-options=\"color.name group by color.shade disable when color.notAnOption for color in colors\">\n          </select><br/>\n\n\n\n          Select <a href ng-click=\"myColor = { name:'not in list', shade: 'other' }\">bogus</a>.<br>\n          <hr/>\n          Currently selected: {{ {selected_color:myColor} }}\n          <div style=\"border:solid 1px black; height:20px\"\n               ng-style=\"{'background-color':myColor.name}\">\n          </div>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n         it('should check ng-options', function() {\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');\n           element.all(by.model('myColor')).first().click();\n           element.all(by.css('select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');\n           element(by.css('.nullable select[ng-model=\"myColor\"]')).click();\n           element.all(by.css('.nullable select[ng-model=\"myColor\"] option')).first().click();\n           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');\n         });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngOptions.js",
        "module": "ng",
        "id": "ngOptions",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngOptions ng.directive:ngOptions downloaded/angular/angular.js-master/src/ng/directive/ngOptions.js",
        "sortOn": "ngOptions",
        "left": 348,
        "level": 1,
        "root": "ng",
        "right": 349
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "count",
                "altName": null,
                "description": "The variable to be bound to.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "when",
                "altName": null,
                "description": "The mapping between plural category to its corresponding strings.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "offset",
                "altName": null,
                "description": "Offset to deduct from the total number.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngPluralize",
        "restrict": "EA",
        "description": "`ngPluralize` is a directive that displays messages according to en-US localization rules.\nThese rules are bundled with angular.js, but can be overridden\n(see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\nby specifying the mappings between\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nand the strings to be displayed.\n\n# Plural categories and explicit number rules\nThere are two\n[plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)\nin Angular's default en-US locale: \"one\" and \"other\".\n\nWhile a plural category may match many numbers (for example, in en-US locale, \"other\" can match\nany number that is not 1), an explicit number rule can only match one number. For example, the\nexplicit number rule for \"3\" matches the number 3. There are examples of plural categories\nand explicit number rules throughout the rest of this documentation.\n\n# Configuring ngPluralize\nYou configure ngPluralize by providing 2 attributes: `count` and `when`.\nYou can also provide an optional attribute, `offset`.\n\nThe value of the `count` attribute can be either a string or an {@link guide/expression\nAngular expression}; these are evaluated on the current scope for its bound value.\n\nThe `when` attribute specifies the mappings between plural categories and the actual\nstring to be displayed. The value of the attribute should be a JSON object.\n\nThe following example shows how to configure ngPluralize:\n\n```html\n<ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n'one': '1 person is viewing.',\n'other': '{} people are viewing.'}\">\n</ng-pluralize>\n```\n\nIn the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\nspecify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\nwould be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\nother numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\nshow \"a dozen people are viewing\".\n\nYou can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted\ninto pluralized strings. In the previous example, Angular will replace `{}` with\n<span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\nfor <span ng-non-bindable>{{numberExpression}}</span>.\n\nIf no rule is defined for a category, then an empty string is displayed and a warning is generated.\nNote that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.\n\n# Configuring ngPluralize with offset\nThe `offset` attribute allows further customization of pluralized text, which can result in\na better user experience. For example, instead of the message \"4 people are viewing this document\",\nyou might display \"John, Kate and 2 others are viewing this document\".\nThe offset attribute allows you to offset a number by any desired value.\nLet's take a look at an example:\n\n```html\n<ng-pluralize count=\"personCount\" offset=2\nwhen=\"{'0': 'Nobody is viewing.',\n'1': '{{person1}} is viewing.',\n'2': '{{person1}} and {{person2}} are viewing.',\n'one': '{{person1}}, {{person2}} and one other person are viewing.',\n'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n</ng-pluralize>\n```\n\nNotice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be shown.\nWhen three people view the document, no explicit number rule is found, so\nan offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\nIn this case, plural category 'one' is matched and \"John, Mary and one other person are viewing\"\nis shown.\n\nNote that when you specify offsets, you must provide explicit number rules for\nnumbers from 0 up to and including the offset. If you use an offset of 3, for example,\nyou must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\nplural categories \"one\" and \"other\".",
        "example": "<example module=\"pluralizeExample\">\n      <file name=\"index.html\">\n        <script>\n          angular.module('pluralizeExample', [])\n            .controller('ExampleController', ['$scope', function($scope) {\n              $scope.person1 = 'Igor';\n              $scope.person2 = 'Misko';\n              $scope.personCount = 1;\n            }]);\n        </script>\n        <div ng-controller=\"ExampleController\">\n          Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n          Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n          Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n          <!--- Example with simple pluralization rules for en locale --->\n          Without Offset:\n          <ng-pluralize count=\"personCount\"\n                        when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n          </ng-pluralize><br>\n\n          <!--- Example with offset --->\n          With Offset(2):\n          <ng-pluralize count=\"personCount\" offset=2\n                        when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n          </ng-pluralize>\n        </div>\n      </file>\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should show correct pluralized string', function() {\n          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var countInput = element(by.model('personCount'));\n\n          expect(withoutOffset.getText()).toEqual('1 person is viewing.');\n          expect(withOffset.getText()).toEqual('Igor is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('0');\n\n          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');\n          expect(withOffset.getText()).toEqual('Nobody is viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('2');\n\n          expect(withoutOffset.getText()).toEqual('2 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('3');\n\n          expect(withoutOffset.getText()).toEqual('3 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');\n\n          countInput.clear();\n          countInput.sendKeys('4');\n\n          expect(withoutOffset.getText()).toEqual('4 people are viewing.');\n          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');\n        });\n        it('should show data-bound names', function() {\n          var withOffset = element.all(by.css('ng-pluralize')).get(1);\n          var personCount = element(by.model('personCount'));\n          var person1 = element(by.model('person1'));\n          var person2 = element(by.model('person2'));\n          personCount.clear();\n          personCount.sendKeys('4');\n          person1.clear();\n          person1.sendKeys('Di');\n          person2.clear();\n          person2.sendKeys('Vojta');\n          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngPluralize.js",
        "module": "ng",
        "id": "ngPluralize",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngPluralize ng.directive:ngPluralize downloaded/angular/angular.js-master/src/ng/directive/ngPluralize.js",
        "sortOn": "ngPluralize",
        "left": 350,
        "level": 1,
        "root": "ng",
        "right": 351
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "repeat_expression",
                        "type": "repeat_expression"
                    }
                ],
                "varName": "ngRepeat",
                "altName": null,
                "description": "The expression indicating how to enumerate a collection. These\nformats are currently supported:\n\n* `variable in expression` – where variable is the user defined loop variable and `expression`\nis a scope expression giving the collection to enumerate.\n\nFor example: `album in artist.albums`.\n\n* `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\nand `expression` is the scope expression giving the collection to enumerate.\n\nFor example: `(name, age) in {'adam':10, 'amalie':12}`.\n\n* `variable in expression track by tracking_expression` – You can also provide an optional tracking expression\nwhich can be used to associate the objects in the collection with the DOM elements. If no tracking expression\nis specified, ng-repeat associates elements by identity. It is an error to have\nmore than one tracking expression value resolve to the same key. (This would mean that two distinct objects are\nmapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be\napplied before the tracking expression.\n\nFor example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements\nwill be associated by item identity in the array.\n\nFor example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n`$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\nwith the corresponding item in the array by identity. Moving the same object in array would move the DOM\nelement in the same way in the DOM.\n\nFor example: `item in items track by item.id` is a typical pattern when the items come from the database. In this\ncase the object identity does not matter. Two objects are considered equivalent as long as their `id`\nproperty is same.\n\nFor example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter\nto items in conjunction with a tracking expression.\n\n* `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the\nintermediate results of the repeater after the filters have been applied. Typically this is used to render a special message\nwhen a filter is active on the repeater, but the filtered result set is empty.\n\nFor example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after\nthe items have been processed through the filter.\n\nPlease note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end\n(and not as operator, inside an expression).\n\nFor example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngRepeat",
        "description": "The `ngRepeat` directive instantiates a template once per item from a collection. Each template\ninstance gets its own scope, where the given loop variable is set to the current collection item,\nand `$index` is set to the item index or key.\n\nSpecial properties are exposed on the local scope of each template instance, including:\n\n| Variable  | Type            | Details                                                                     |\n|-----------|-----------------|-----------------------------------------------------------------------------|\n| `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |\n| `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |\n| `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |\n| `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |\n| `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |\n| `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |\n\nCreating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.\nThis may be useful when, for instance, nesting ngRepeats.\n\n\n# Iterating over object properties\n\nIt is possible to get `ngRepeat` to iterate over the properties of an object using the following\nsyntax:\n\n```js\n<div ng-repeat=\"(key, value) in myObj\"> ... </div>\n```\n\nYou need to be aware that the JavaScript specification does not define the order of keys\nreturned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive\nused to sort the keys alphabetically.)\n\nVersion 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser\nwhen running `for key in myObj`. It seems that browsers generally follow the strategy of providing\nkeys in the order in which they were defined, although there are exceptions when keys are deleted\nand reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues\n\nIf this is not desired, the recommended workaround is to convert your object into an array\nthat is sorted into the order that you prefer before providing it to `ngRepeat`.  You could\ndo this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)\nor implement a `$watch` on the object yourself.\n\n\n# Tracking and Duplicates\n\nWhen the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:\n\n* When an item is added, a new instance of the template is added to the DOM.\n* When an item is removed, its template instance is removed from the DOM.\n* When items are reordered, their respective templates are reordered in the DOM.\n\nBy default, `ngRepeat` does not allow duplicate items in arrays. This is because when\nthere are duplicates, it is not possible to maintain a one-to-one mapping between collection\nitems and DOM elements.\n\nIf you do need to repeat duplicate items, you can substitute the default tracking behavior\nwith your own using the `track by` expression.\n\nFor example, you may track items by the index of each item in the collection, using the\nspecial scope property `$index`:\n```html\n<div ng-repeat=\"n in [42, 42, 43, 43] track by $index\">\n{{n}}\n</div>\n```\n\nYou may use arbitrary expressions in `track by`, including references to custom functions\non the scope:\n```html\n<div ng-repeat=\"n in [42, 42, 43, 43] track by myTrackingFunction(n)\">\n{{n}}\n</div>\n```\n\nIf you are working with objects that have an identifier property, you can track\nby the identifier instead of the whole object. Should you reload your data later, `ngRepeat`\nwill not have to rebuild the DOM elements for items it has already rendered, even if the\nJavaScript objects in the collection have been substituted for new ones:\n```html\n<div ng-repeat=\"model in collection track by model.id\">\n{{model.name}}\n</div>\n```\n\nWhen no `track by` expression is provided, it is equivalent to tracking by the built-in\n`$id` function, which tracks items by their identity:\n```html\n<div ng-repeat=\"obj in collection track by $id(obj)\">\n{{obj.prop}}\n</div>\n```\n\n# Special repeat start and end points\nTo repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending\nthe range of the repeater by defining explicit start and end points by using*ng-repeat-start** and*ng-repeat-end** respectively.\nThe*ng-repeat-start** directive works the same as*ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)\nup to and including the ending HTML tag where*ng-repeat-end** is placed.\n\nThe example below makes use of this feature:\n```html\n<header ng-repeat-start=\"item in items\">\nHeader {{ item }}\n</header>\n<div class=\"body\">\nBody {{ item }}\n</div>\n<footer ng-repeat-end>\nFooter {{ item }}\n</footer>\n```\n\nAnd with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:\n```html\n<header>\nHeader A\n</header>\n<div class=\"body\">\nBody A\n</div>\n<footer>\nFooter A\n</footer>\n<header>\nHeader B\n</header>\n<div class=\"body\">\nBody B\n</div>\n<footer>\nFooter B\n</footer>\n```\n\nThe custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such\nas*data-ng-repeat-start**,*x-ng-repeat-start** and*ng:repeat-start**).",
        "animations": "**.enter** - when a new item is added to the list or when an item is revealed after a filter\n\n**.leave** - when an item is removed from the list or when an item is filtered out\n\n**.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered",
        "element": "ANY",
        "scope": true,
        "priority": "1000",
        "example": "This example initializes the scope to a list of names and\nthen uses `ngRepeat` to display every person:\n  <example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-init=\"friends = [\n        {name:'John', age:25, gender:'boy'},\n        {name:'Jessie', age:30, gender:'girl'},\n        {name:'Johanna', age:28, gender:'girl'},\n        {name:'Joy', age:15, gender:'girl'},\n        {name:'Mary', age:28, gender:'girl'},\n        {name:'Peter', age:95, gender:'boy'},\n        {name:'Sebastian', age:50, gender:'boy'},\n        {name:'Erika', age:27, gender:'girl'},\n        {name:'Patrick', age:40, gender:'boy'},\n        {name:'Samantha', age:60, gender:'girl'}\n      ]\">\n        I have {{friends.length}} friends. They are:\n        <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" />\n        <ul class=\"example-animate-container\">\n          <li class=\"animate-repeat\" ng-repeat=\"friend in friends | filter:q as results\">\n            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n          </li>\n          <li class=\"animate-repeat\" ng-if=\"results.length == 0\">\n            <strong>No results found...</strong>\n          </li>\n        </ul>\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .example-animate-container {\n        background:white;\n        border:1px solid black;\n        list-style:none;\n        margin:0;\n        padding:0 10px;\n      }\n\n      .animate-repeat {\n        line-height:40px;\n        list-style:none;\n        box-sizing:border-box;\n      }\n\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter,\n      .animate-repeat.ng-leave {\n        -webkit-transition:all linear 0.5s;\n        transition:all linear 0.5s;\n      }\n\n      .animate-repeat.ng-leave.ng-leave-active,\n      .animate-repeat.ng-move,\n      .animate-repeat.ng-enter {\n        opacity:0;\n        max-height:0;\n      }\n\n      .animate-repeat.ng-leave,\n      .animate-repeat.ng-move.ng-move-active,\n      .animate-repeat.ng-enter.ng-enter-active {\n        opacity:1;\n        max-height:40px;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var friends = element.all(by.repeater('friend in friends'));\n\n      it('should render initial data set', function() {\n        expect(friends.count()).toBe(10);\n        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');\n        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');\n        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');\n        expect(element(by.binding('friends.length')).getText())\n            .toMatch(\"I have 10 friends. They are:\");\n      });\n\n       it('should update repeater when filter predicate changes', function() {\n         expect(friends.count()).toBe(10);\n\n         element(by.model('q')).sendKeys('ma');\n\n         expect(friends.count()).toBe(2);\n         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');\n         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');\n       });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngRepeat.js",
        "module": "ng",
        "id": "ngRepeat",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngRepeat ng.directive:ngRepeat downloaded/angular/angular.js-master/src/ng/directive/ngRepeat.js",
        "sortOn": "ngRepeat",
        "left": 352,
        "level": 1,
        "root": "ng",
        "right": 353
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngShow",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy\nthen the element is shown or hidden respectively.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngShow",
        "description": "The `ngShow` directive shows or hides the given HTML element based on the expression\nprovided to the `ngShow` attribute. The element is shown or hidden by removing or adding\nthe `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is visible) -->\n<div ng-show=\"myValue\"></div>\n\n<!-- when $scope.myValue is falsy (element is hidden) -->\n<div ng-show=\"myValue\" class=\"ng-hide\"></div>\n```\n\nWhen the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope\nwith extra animation classes that can be added.\n\n```css\n.ng-hide:not(.ng-hide-animate) {\n/&#42; this is just another form of hiding an element &#42;/\ndisplay: block!important;\nposition: absolute;\ntop: -9999px;\nleft: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngShow`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass except that\nyou must also include the !important flag to override the display property\nso that you can perform an animation when the element is hidden during the time of the animation.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\n/&#42; this is required as of 1.3x to properly\napply all styling in a show/hide animation &#42;/\ntransition: 0s linear all;\n}\n\n.my-element.ng-hide-add-active,\n.my-element.ng-hide-remove-active {\n/&#42; the transition is defined in the active class &#42;/\ntransition: 1s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
        "animations": "addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible\nremoveClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden",
        "element": "ANY",
        "example": "<example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <div class=\"check-element animate-show\" ng-show=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </div>\n      </div>\n      <div>\n        Hide:\n        <div class=\"check-element animate-show\" ng-hide=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </div>\n      </div>\n    </file>\n    <file name=\"glyphicons.css\">\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n    </file>\n    <file name=\"animations.css\">\n      .animate-show {\n        line-height: 20px;\n        opacity: 1;\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n\n      .animate-show.ng-hide-add.ng-hide-add-active,\n      .animate-show.ng-hide-remove.ng-hide-remove-active {\n        -webkit-transition: all linear 0.5s;\n        transition: all linear 0.5s;\n      }\n\n      .animate-show.ng-hide {\n        line-height: 0;\n        opacity: 0;\n        padding: 0 10px;\n      }\n\n      .check-element {\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n      it('should check ng-show / ng-hide', function() {\n        expect(thumbsUp.isDisplayed()).toBeFalsy();\n        expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n        element(by.model('checked')).click();\n\n        expect(thumbsUp.isDisplayed()).toBeTruthy();\n        expect(thumbsDown.isDisplayed()).toBeFalsy();\n      });\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngShowHide.js",
        "module": "ng",
        "id": "ngShow",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngShow ng.directive:ngShow downloaded/angular/angular.js-master/src/ng/directive/ngShowHide.js",
        "sortOn": "ngShow",
        "left": 354,
        "level": 1,
        "root": "ng",
        "right": 355
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngHide",
                "altName": null,
                "description": "If the {@link guide/expression expression} is truthy then\nthe element is shown or hidden respectively.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngHide",
        "description": "The `ngHide` directive shows or hides the given HTML element based on the expression\nprovided to the `ngHide` attribute. The element is shown or hidden by removing or adding\nthe `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined\nin AngularJS and sets the display style to none (using an !important flag).\nFor CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).\n\n```html\n<!-- when $scope.myValue is truthy (element is hidden) -->\n<div ng-hide=\"myValue\" class=\"ng-hide\"></div>\n\n<!-- when $scope.myValue is falsy (element is visible) -->\n<div ng-hide=\"myValue\"></div>\n```\n\nWhen the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class\nattribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed\nfrom the element causing the element not to appear hidden.\n\n## Why is !important used?\n\nYou may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector\ncan be easily overridden by heavier selectors. For example, something as simple\nas changing the display style on a HTML list item would make hidden elements appear visible.\nThis also becomes a bigger issue when dealing with CSS frameworks.\n\nBy using !important, the show and hide behavior will work as expected despite any clash between CSS selector\nspecificity (when !important isn't used with any conflicting styles). If a developer chooses to override the\nstyling to change how to hide an element then it is just a matter of using !important in their own CSS code.\n\n### Overriding `.ng-hide`\n\nBy default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change\nthe hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`\nclass in CSS:\n\n```css\n.ng-hide {\n/&#42; this is just another form of hiding an element &#42;/\ndisplay: block!important;\nposition: absolute;\ntop: -9999px;\nleft: -9999px;\n}\n```\n\nBy default you don't need to override in CSS anything and the animations will work around the display style.\n\n## A note about animations with `ngHide`\n\nAnimations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression\nis true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`\nCSS class is added and removed for you instead of your own CSS class.\n\n```css\n//\n//a working example can be found at the bottom of this page\n//\n.my-element.ng-hide-add, .my-element.ng-hide-remove {\ntransition: 0.5s linear all;\n}\n\n.my-element.ng-hide-add { ... }\n.my-element.ng-hide-add.ng-hide-add-active { ... }\n.my-element.ng-hide-remove { ... }\n.my-element.ng-hide-remove.ng-hide-remove-active { ... }\n```\n\nKeep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display\nproperty to block during animation states--ngAnimate will handle the style toggling automatically for you.",
        "animations": "removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden\naddClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible",
        "element": "ANY",
        "example": "<example module=\"ngAnimate\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <div class=\"check-element animate-hide\" ng-show=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </div>\n      </div>\n      <div>\n        Hide:\n        <div class=\"check-element animate-hide\" ng-hide=\"checked\">\n          <span class=\"glyphicon glyphicon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </div>\n      </div>\n    </file>\n    <file name=\"glyphicons.css\">\n      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);\n    </file>\n    <file name=\"animations.css\">\n      .animate-hide {\n        -webkit-transition: all linear 0.5s;\n        transition: all linear 0.5s;\n        line-height: 20px;\n        opacity: 1;\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n\n      .animate-hide.ng-hide {\n        line-height: 0;\n        opacity: 0;\n        padding: 0 10px;\n      }\n\n      .check-element {\n        padding: 10px;\n        border: 1px solid black;\n        background: white;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));\n      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));\n\n      it('should check ng-show / ng-hide', function() {\n        expect(thumbsUp.isDisplayed()).toBeFalsy();\n        expect(thumbsDown.isDisplayed()).toBeTruthy();\n\n        element(by.model('checked')).click();\n\n        expect(thumbsUp.isDisplayed()).toBeTruthy();\n        expect(thumbsDown.isDisplayed()).toBeFalsy();\n      });\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngShowHide.js",
        "module": "ng",
        "id": "ngHide",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngHide ng.directive:ngHide downloaded/angular/angular.js-master/src/ng/directive/ngShowHide.js",
        "sortOn": "ngHide",
        "left": 356,
        "level": 1,
        "root": "ng",
        "right": 357
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngStyle",
                "altName": null,
                "description": "{@link guide/expression Expression} which evals to an\nobject whose keys are CSS style names and values are corresponding values for those CSS\nkeys.\n\nSince some CSS style names are not valid keys for an object, they must be quoted.\nSee the 'background-color' style in the example below.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngStyle",
        "restrict": "AC",
        "description": "The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.",
        "element": "ANY",
        "example": "<example>\n     <file name=\"index.html\">\n        <input type=\"button\" value=\"set color\" ng-click=\"myStyle={color:'red'}\">\n        <input type=\"button\" value=\"set background\" ng-click=\"myStyle={'background-color':'blue'}\">\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n        <br/>\n        <span ng-style=\"myStyle\">Sample Text</span>\n        <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n       span {\n         color: black;\n       }\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var colorSpan = element(by.css('span'));\n\n       it('should check ng-style', function() {\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n         element(by.css('input[value=\\'set color\\']')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');\n         element(by.css('input[value=clear]')).click();\n         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngStyle.js",
        "module": "ng",
        "id": "ngStyle",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngStyle ng.directive:ngStyle downloaded/angular/angular.js-master/src/ng/directive/ngStyle.js",
        "sortOn": "ngStyle",
        "left": 358,
        "level": 1,
        "root": "ng",
        "right": 359
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "ngSwitch",
                "altName": "on",
                "description": "expression to match against <tt>ng-switch-when</tt>.\nOn child elements add:\n\n* `ngSwitchWhen`: the case statement to match against. If match then this\ncase will be displayed. If the same match appears multiple times, all the\nelements will be displayed.\n* `ngSwitchDefault`: the default case when no other case match. If there\nare multiple default cases, all of them will be displayed when no other\ncase match.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSwitch",
        "restrict": "EA",
        "description": "The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.\nElements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location\nas specified in the template.\n\nThe directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\nfrom the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element\nmatches the value obtained from the evaluated expression. In other words, you define a container element\n(where you place the directive), place an expression on the*`on=\"...\"` attribute**\n(or the*`ng-switch=\"...\"` attribute**), define any inner elements inside of the directive and place\na when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when attribute then an element with the default\nattribute is displayed.\n\n<div class=\"alert alert-info\">\nBe aware that the attribute values to match against cannot be expressions. They are interpreted\nas literal string values to match against.\nFor example,*`ng-switch-when=\"someVal\"`** will match against the string `\"someVal\"` not against the\nvalue of the expression `$scope.someVal`.\n</div>",
        "animations": "enter - happens after the ngSwitch contents change and the matched child element is placed inside the container\nleave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM",
        "usage": "```\n<ANY ng-switch=\"expression\">\n<ANY ng-switch-when=\"matchValue1\">...</ANY>\n<ANY ng-switch-when=\"matchValue2\">...</ANY>\n<ANY ng-switch-default>...</ANY>\n</ANY>\n```",
        "scope": true,
        "priority": "1200",
        "example": "<example module=\"switchExample\" deps=\"angular-animate.js\" animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <select ng-model=\"selection\" ng-options=\"item for item in items\">\n        </select>\n        <tt>selection={{selection}}</tt>\n        <hr/>\n        <div class=\"animate-switch-container\"\n          ng-switch on=\"selection\">\n            <div class=\"animate-switch\" ng-switch-when=\"settings\">Settings Div</div>\n            <div class=\"animate-switch\" ng-switch-when=\"home\">Home Span</div>\n            <div class=\"animate-switch\" ng-switch-default>default</div>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('switchExample', ['ngAnimate'])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.items = ['settings', 'home', 'other'];\n          $scope.selection = $scope.items[0];\n        }]);\n    </file>\n    <file name=\"animations.css\">\n      .animate-switch-container {\n        position:relative;\n        background:white;\n        border:1px solid black;\n        height:40px;\n        overflow:hidden;\n      }\n\n      .animate-switch {\n        padding:10px;\n      }\n\n      .animate-switch.ng-animate {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n      }\n\n      .animate-switch.ng-leave.ng-leave-active,\n      .animate-switch.ng-enter {\n        top:-50px;\n      }\n      .animate-switch.ng-leave,\n      .animate-switch.ng-enter.ng-enter-active {\n        top:0;\n      }\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      var switchElem = element(by.css('[ng-switch]'));\n      var select = element(by.model('selection'));\n\n      it('should start in settings', function() {\n        expect(switchElem.getText()).toMatch(/Settings Div/);\n      });\n      it('should change to home', function() {\n        select.all(by.css('option')).get(1).click();\n        expect(switchElem.getText()).toMatch(/Home Span/);\n      });\n      it('should select default', function() {\n        select.all(by.css('option')).get(2).click();\n        expect(switchElem.getText()).toMatch(/default/);\n      });\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngSwitch.js",
        "module": "ng",
        "id": "ngSwitch",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSwitch ng.directive:ngSwitch downloaded/angular/angular.js-master/src/ng/directive/ngSwitch.js",
        "sortOn": "ngSwitch",
        "left": 360,
        "level": 1,
        "root": "ng",
        "right": 361
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngTransclude",
        "restrict": "EAC",
        "description": "Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n\nAny existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.",
        "element": "ANY",
        "example": "<example module=\"transcludeExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('transcludeExample', [])\n          .directive('pane', function(){\n             return {\n               restrict: 'E',\n               transclude: true,\n               scope: { title:'@' },\n               template: '<div style=\"border: 1px solid black;\">' +\n                           '<div style=\"background-color: gray\">{{title}}</div>' +\n                           '<ng-transclude></ng-transclude>' +\n                         '</div>'\n             };\n         })\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.title = 'Lorem Ipsum';\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n         }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input ng-model=\"title\"> <br/>\n         <textarea ng-model=\"text\"></textarea> <br/>\n         <pane title=\"{{title}}\">{{text}}</pane>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n        it('should have transcluded', function() {\n          var titleElement = element(by.model('title'));\n          titleElement.clear();\n          titleElement.sendKeys('TITLE');\n          var textElement = element(by.model('text'));\n          textElement.clear();\n          textElement.sendKeys('TEXT');\n          expect(element(by.binding('title')).getText()).toEqual('TITLE');\n          expect(element(by.binding('text')).getText()).toEqual('TEXT');\n        });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/ngTransclude.js",
        "module": "ng",
        "id": "ngTransclude",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngTransclude ng.directive:ngTransclude downloaded/angular/angular.js-master/src/ng/directive/ngTransclude.js",
        "sortOn": "ngTransclude",
        "left": 362,
        "level": 1,
        "root": "ng",
        "right": 363
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "Must be set to `'text/ng-template'`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "id",
                "altName": null,
                "description": "Cache name of the template.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "script",
        "restrict": "E",
        "description": "Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the\ntemplate can be used by {@link ng.directive:ngInclude `ngInclude`},\n{@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the\n`<script>` element must be specified as `text/ng-template`, and a cache name for the template must be\nassigned through the element's `id`, which can then be used as a directive's `templateUrl`.",
        "example": "<example>\n    <file name=\"index.html\">\n      <script type=\"text/ng-template\" id=\"/tpl.html\">\n        Content of the template.\n      </script>\n\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n    </file>\n    <file name=\"protractor.js\" type=\"protractor\">\n      it('should load template defined inside script tag', function() {\n        element(by.css('#tpl-link')).click();\n        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);\n      });\n    </file>\n  </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/script.js",
        "module": "ng",
        "id": "script",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "script ng.directive:script downloaded/angular/angular.js-master/src/ng/directive/script.js",
        "sortOn": "script",
        "left": 364,
        "level": 1,
        "root": "ng",
        "right": 365
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "select.SelectController",
        "description": "The controller for the `<select>` directive. This provides support for reading\nand writing the selected value(s) of the control and also coordinates dynamically\nadded `<option>` elements, perhaps by an `ngRepeat` directive.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/select.js",
        "module": "ng",
        "id": "select.SelectController",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "select.SelectController ng.type:select.SelectController downloaded/angular/angular.js-master/src/ng/directive/select.js",
        "sortOn": "select.SelectController",
        "left": 366,
        "level": 1,
        "root": "ng",
        "right": 367
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "select",
        "restrict": "E",
        "description": "HTML `SELECT` element with angular data-binding.\n\nIn many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions\nngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing\nmemory and increasing speed by not creating a new scope for each repeated instance, as well as providing\nmore flexibility in how the `<select>`'s model is assigned via the `select`*`as`** part of the\ncomprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound\nto a non-string value. This is because an option element can only be bound to string values at\npresent.\n\nWhen an item in the `<select>` menu is selected, the array element or object property\nrepresented by the selected option will be bound to the model identified by the `ngModel`\ndirective.\n\nIf the viewValue contains a value that doesn't match any of the options then the control\nwill automatically add an \"unknown\" option, which it then removes when this is resolved.\n\nOptionally, a single hard-coded `<option>` element, with the value set to an empty string, can\nbe nested into the `<select>` element. This element will then represent the `null` or \"not selected\"\noption. See example below for demonstration.\n\n<div class=\"alert alert-warning\">\n**Note:** By default, `ngModel` compares by reference, not value. This is important when binding to an\narray of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/). When using `track by`\nin an `ngOptions` expression, however, deep equality checks will be performed.\n</div>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/directive/select.js",
        "module": "ng",
        "id": "select",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "select ng.directive:select downloaded/angular/angular.js-master/src/ng/directive/select.js",
        "sortOn": "select",
        "left": 368,
        "level": 1,
        "root": "ng",
        "right": 369
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$document",
        "requires": [
            "$window"
        ],
        "description": "A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.",
        "example": "<example module=\"documentExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n         <p>$document title: <b ng-bind=\"title\"></b></p>\n         <p>window.document title: <b ng-bind=\"windowTitle\"></b></p>\n       </div>\n     </file>\n     <file name=\"script.js\">\n       angular.module('documentExample', [])\n         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {\n           $scope.title = $document[0].title;\n           $scope.windowTitle = angular.element(window.document)[0].title;\n         }]);\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/document.js",
        "module": "ng",
        "id": "$document",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$document ng.service:$document downloaded/angular/angular.js-master/src/ng/document.js",
        "sortOn": "$document",
        "left": 370,
        "level": 1,
        "root": "ng",
        "right": 371
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Error",
                        "type": "error"
                    }
                ],
                "varName": "exception",
                "altName": null,
                "description": "Exception associated with the error.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "cause",
                "altName": null,
                "description": "optional information about the context in which\nthe error was thrown.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$exceptionHandler",
        "requires": [
            "ng.$log"
        ],
        "description": "Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation simply delegates to `$log.error` which logs it into\nthe browser console.\n\nIn unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n{@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n\n## Example:\n\n```js\nangular.module('exceptionOverride', []).factory('$exceptionHandler', function() {\nreturn function(exception, cause) {\nexception.message += ' (caused by \"' + cause + '\")';\nthrow exception;\n};\n});\n```\n\nThis example will override the normal action of `$exceptionHandler`, to make angular\nexceptions fail hard when they happen, instead of just logging to the console.\n\n<hr />\nNote, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`\nmethods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}\n(unless executed during a digest).\n\nIf you wish, you can manually delegate exceptions, e.g.\n`try { ... } catch(e) { $exceptionHandler(e); }`",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/exceptionHandler.js",
        "module": "ng",
        "id": "$exceptionHandler",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$exceptionHandler ng.service:$exceptionHandler downloaded/angular/angular.js-master/src/ng/exceptionHandler.js",
        "sortOn": "$exceptionHandler",
        "left": 372,
        "level": 1,
        "root": "ng",
        "right": 373
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$filterProvider",
        "description": "Filters are just functions which transform input to an output. However filters need to be\nDependency Injected. To achieve this a filter definition consists of a factory function which is\nannotated with dependencies and is responsible for creating a filter function.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>\n\n```js\n// Filter registration\nfunction MyModule($provide, $filterProvider) {\n// create a service to demonstrate injection (not always needed)\n$provide.value('greet', function(name){\nreturn 'Hello ' + name + '!';\n});\n\n// register a filter factory which uses the\n// greet service to demonstrate DI.\n$filterProvider.register('greet', function(greet){\n// return the filter function which uses the greet service\n// to generate salutation\nreturn function(text) {\n// filters need to be forgiving so check input validity\nreturn text && greet(text) || text;\n};\n});\n}\n```\n\nThe filter function is registered with the `$injector` under the filter name suffix with\n`Filter`.\n\n```js\nit('should be the same instance', inject(\nfunction($filterProvider) {\n$filterProvider.register('reverse', function(){\nreturn ...;\n});\n},\nfunction($filter, reverseFilter) {\nexpect($filter('reverse')).toBe(reverseFilter);\n});\n```\n\n\nFor more information about how angular filters work, and how to create your own filters, see\n{@link guide/filter Filters} in the Angular Developer Guide.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter.js",
        "module": "ng",
        "id": "$filterProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$filterProvider ng.provider:$filterProvider downloaded/angular/angular.js-master/src/ng/filter.js",
        "sortOn": "$filterProvider",
        "left": 374,
        "level": 1,
        "root": "ng",
        "right": 377
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name of the filter function, or an object map of filters where\nthe keys are the filter names and the values are the filter factories.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed. If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "register",
        "returns": "{Object} Registered filter instance, or if a map of filters was provided then a map\nof the registered filter instances.",
        "parentDoc": {
            "module": "ng",
            "name": "$filterProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter.js",
        "module": "ng",
        "id": "register",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "register ng.method:register downloaded/angular/angular.js-master/src/ng/filter.js",
        "sortOn": "register",
        "left": 375,
        "level": 2,
        "root": "ng",
        "right": 376
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "String",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name of the filter function to retrieve",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$filter",
        "kind": "function",
        "description": "Filters are used for formatting data displayed to the user.\n\nThe general syntax in templates is as follows:\n\n{{ expression [| filter_name[:parameter_value] ... ] }}",
        "return": "{Function} the filter function",
        "example": "<example name=\"$filter\" module=\"filterExample\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainCtrl\">\n        <h3>{{ originalText }}</h3>\n        <h3>{{ filteredText }}</h3>\n       </div>\n     </file>\n\n     <file name=\"script.js\">\n      angular.module('filterExample', [])\n      .controller('MainCtrl', function($scope, $filter) {\n        $scope.originalText = 'hello';\n        $scope.filteredText = $filter('uppercase')($scope.originalText);\n      });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter.js",
        "module": "ng",
        "id": "$filter",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$filter ng.service:$filter downloaded/angular/angular.js-master/src/ng/filter.js",
        "sortOn": "$filter",
        "left": 378,
        "level": 1,
        "root": "ng",
        "right": 379
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "array",
                "altName": null,
                "description": "The source array.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "The predicate to be used for selecting items from\n`array`.\n\nCan be one of:\n\n- `string`: The string is used for matching against the contents of the `array`. All strings or\nobjects with string properties in `array` that match this string will be returned. This also\napplies to nested object properties.\nThe predicate can be negated by prefixing the string with `!`.\n\n- `Object`: A pattern object can be used to filter specific properties on objects contained\nby `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\nwhich have property `name` containing \"M\" and property `phone` containing \"1\". A special\nproperty name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\nproperty of the object or its nested object properties. That's equivalent to the simple\nsubstring match with a `string` as described above. The predicate can be negated by prefixing\nthe string with `!`.\nFor example `{name: \"!M\"}` predicate will return an array of items which have property `name`\nnot containing \"M\".\n\nNote that a named property will match properties on the same level only, while the special\n`$` property will match properties on the same level or deeper. E.g. an array item like\n`{name: {first: 'John', last: 'Doe'}}` will*not** be matched by `{name: 'John'}`, but\n**will** be matched by `{$: 'John'}`.\n\n- `function(value, index)`: A predicate function can be used to write arbitrary filters. The\nfunction is called for each element of `array`. The final result is an array of those\nelements that the predicate returned true for.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "actual",
                        "type": "actual"
                    },
                    {
                        "name": "expected",
                        "type": "expected"
                    },
                    {
                        "name": "true",
                        "type": "true"
                    },
                    {
                        "name": "undefined",
                        "type": "undefined"
                    }
                ],
                "varName": "comparator",
                "altName": null,
                "description": "Comparator which is used in\ndetermining if the expected value (from the filter expression) and actual value (from\nthe object in the array) should be considered a match.\n\nCan be one of:\n\n- `function(actual, expected)`:\nThe function will be given the object value and the predicate value to compare and\nshould return true if both values should be considered equal.\n\n- `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.\nThis is essentially strict comparison of expected and actual.\n\n- `false|undefined`: A short hand for a function which will look for a substring match in case\ninsensitive way.\n\nPrimitive values are converted to strings. Objects are not compared against primitives,\nunless they have a custom `toString` method (e.g. `Date` objects).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "filter",
        "kind": "function",
        "description": "Selects a subset of items from `array` and returns it as a new array.",
        "example": "<example>\n     <file name=\"index.html\">\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                                {name:'Mary', phone:'800-BIG-MARY'},\n                                {name:'Mike', phone:'555-4321'},\n                                {name:'Adam', phone:'555-5678'},\n                                {name:'Julie', phone:'555-8765'},\n                                {name:'Juliette', phone:'555-5678'}]\"></div>\n\n       Search: <input ng-model=\"searchText\">\n       <table id=\"searchTextResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friend in friends | filter:searchText\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         </tr>\n       </table>\n       <hr>\n       Any: <input ng-model=\"search.$\"> <br>\n       Name only <input ng-model=\"search.name\"><br>\n       Phone only <input ng-model=\"search.phone\"><br>\n       Equality <input type=\"checkbox\" ng-model=\"strict\"><br>\n       <table id=\"searchObjResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friendObj in friends | filter:search:strict\">\n           <td>{{friendObj.name}}</td>\n           <td>{{friendObj.phone}}</td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var expectFriendNames = function(expectedNames, key) {\n         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {\n           arr.forEach(function(wd, i) {\n             expect(wd.getText()).toMatch(expectedNames[i]);\n           });\n         });\n       };\n\n       it('should search across all fields when filtering with a string', function() {\n         var searchText = element(by.model('searchText'));\n         searchText.clear();\n         searchText.sendKeys('m');\n         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');\n\n         searchText.clear();\n         searchText.sendKeys('76');\n         expectFriendNames(['John', 'Julie'], 'friend');\n       });\n\n       it('should search in specific fields when filtering with a predicate object', function() {\n         var searchAny = element(by.model('search.$'));\n         searchAny.clear();\n         searchAny.sendKeys('i');\n         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');\n       });\n       it('should use a equal comparison when comparator is true', function() {\n         var searchName = element(by.model('search.name'));\n         var strict = element(by.model('strict'));\n         searchName.clear();\n         searchName.sendKeys('Julie');\n         strict.click();\n         expectFriendNames(['Julie'], 'friendObj');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filter.js",
        "module": "ng",
        "id": "filter",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "filter ng.filter:filter downloaded/angular/angular.js-master/src/ng/filter/filter.js",
        "sortOn": "filter",
        "left": 380,
        "level": 1,
        "root": "ng",
        "right": 381
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "amount",
                "altName": null,
                "description": "Input to filter.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "symbol",
                "altName": null,
                "description": "Currency symbol or identifier to be displayed.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "fractionSize",
                "altName": null,
                "description": "Number of decimal places to round the amount to, defaults to default max fraction size for current locale",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "currency",
        "kind": "function",
        "description": "Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\nsymbol for current locale is used.",
        "returns": "{string} Formatted number.",
        "example": "<example module=\"currencyExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('currencyExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.amount = 1234.56;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"number\" ng-model=\"amount\"> <br>\n         default currency symbol ($): <span id=\"currency-default\">{{amount | currency}}</span><br>\n         custom currency identifier (USD$): <span id=\"currency-custom\">{{amount | currency:\"USD$\"}}</span>\n         no fractions (0): <span id=\"currency-no-fractions\">{{amount | currency:\"USD$\":0}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should init with 1234.56', function() {\n         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');\n         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');\n       });\n       it('should update', function() {\n         if (browser.params.browser == 'safari') {\n           // Safari does not understand the minus key. See\n           // https://github.com/angular/protractor/issues/481\n           return;\n         }\n         element(by.model('amount')).clear();\n         element(by.model('amount')).sendKeys('-1234');\n         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');\n         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');\n         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "currency",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "currency ng.filter:currency downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "currency",
        "left": 382,
        "level": 1,
        "root": "ng",
        "right": 383
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "number",
                "altName": null,
                "description": "Number to format.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "fractionSize",
                "altName": null,
                "description": "Number of decimal places to round the number to.\nIf this is not provided then the fraction size is computed from the current locale's number\nformatting pattern. In the case of the default locale, it will be 3.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "number",
        "kind": "function",
        "description": "Formats a number as text.\n\nIf the input is not a number an empty string is returned.\n\nIf the input is an infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.",
        "returns": "{string} Number rounded to decimalPlaces and places a “,” after each third digit.",
        "example": "<example module=\"numberFilterExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('numberFilterExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.val = 1234.56789;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Enter number: <input ng-model='val'><br>\n         Default formatting: <span id='number-default'>{{val | number}}</span><br>\n         No fractions: <span>{{val | number:0}}</span><br>\n         Negative number: <span>{{-val | number:4}}</span>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format numbers', function() {\n         expect(element(by.id('number-default')).getText()).toBe('1,234.568');\n         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');\n       });\n\n       it('should update', function() {\n         element(by.model('val')).clear();\n         element(by.model('val')).sendKeys('3374.333');\n         expect(element(by.id('number-default')).getText()).toBe('3,374.333');\n         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');\n         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');\n      });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "number",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "number ng.filter:number downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "number",
        "left": 384,
        "level": 1,
        "root": "ng",
        "right": 385
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Date",
                        "type": "date"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "date",
                "altName": null,
                "description": "Date to format either as Date object, milliseconds (string or\nnumber) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its\nshorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\nspecified in the string input, the time is considered to be in the local timezone.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "format",
                "altName": null,
                "description": "Formatting rules (see Description). If not specified,\n`mediumDate` is used.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "timezone",
                "altName": null,
                "description": "Timezone to be used for formatting. It understands UTC/GMT and the\ncontinental US time zone abbreviations, but for general use, use a time zone offset, for\nexample, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)\nIf not specified, the timezone of the browser will be used.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "date",
        "kind": "function",
        "description": "Formats `date` to a string based on the requested `format`.\n\n`format` string can be composed of the following elements:\n\n* `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n* `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n* `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n* `'MMMM'`: Month in year (January-December)\n* `'MMM'`: Month in year (Jan-Dec)\n* `'MM'`: Month in year, padded (01-12)\n* `'M'`: Month in year (1-12)\n* `'dd'`: Day in month, padded (01-31)\n* `'d'`: Day in month (1-31)\n* `'EEEE'`: Day in Week,(Sunday-Saturday)\n* `'EEE'`: Day in Week, (Sun-Sat)\n* `'HH'`: Hour in day, padded (00-23)\n* `'H'`: Hour in day (0-23)\n* `'hh'`: Hour in AM/PM, padded (01-12)\n* `'h'`: Hour in AM/PM, (1-12)\n* `'mm'`: Minute in hour, padded (00-59)\n* `'m'`: Minute in hour (0-59)\n* `'ss'`: Second in minute, padded (00-59)\n* `'s'`: Second in minute (0-59)\n* `'sss'`: Millisecond in second, padded (000-999)\n* `'a'`: AM/PM marker\n* `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n* `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year\n* `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year\n* `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')\n* `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')\n\n`format` string can also be one of the following predefined\n{@link guide/i18n localizable formats}:\n\n* `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n(e.g. Sep 3, 2010 12:05:08 PM)\n* `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)\n* `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale\n(e.g. Friday, September 3, 2010)\n* `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)\n* `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n* `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n* `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)\n* `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)\n\n`format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.\n`\"h 'in the morning'\"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence\n(e.g. `\"h 'o''clock'\"`).",
        "returns": "{string} Formatted string or the input if input is not recognized as date/millis.",
        "example": "<example>\n     <file name=\"index.html\">\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n           <span>{{1288323623006 | date:'medium'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>\n       <span ng-non-bindable>{{1288323623006 | date:\"MM/dd/yyyy 'at' h:mma\"}}</span>:\n          <span>{{'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"}}</span><br>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should format date', function() {\n         expect(element(by.binding(\"1288323623006 | date:'medium'\")).getText()).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(element(by.binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).getText()).\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n         expect(element(by.binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n         expect(element(by.binding(\"'1288323623006' | date:\\\"MM/dd/yyyy 'at' h:mma\\\"\")).getText()).\n            toMatch(/10\\/2\\d\\/2010 at \\d{1,2}:\\d{2}(AM|PM)/);\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "date",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "date ng.filter:date downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "date",
        "left": 386,
        "level": 1,
        "root": "ng",
        "right": 387
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "object",
                "altName": null,
                "description": "Any JavaScript object (including arrays and primitive types) to filter.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "spacing",
                "altName": null,
                "description": "The number of spaces to use per indentation, defaults to 2.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "json",
        "kind": "function",
        "description": "Allows you to convert a JavaScript object into JSON string.\n\nThis filter is mostly useful for debugging. When using the double curly {{value}} notation\nthe binding is automatically converted to JSON.",
        "returns": "{string} JSON string.",
        "example": "<example>\n     <file name=\"index.html\">\n       <pre id=\"default-spacing\">{{ {'name':'value'} | json }}</pre>\n       <pre id=\"custom-spacing\">{{ {'name':'value'} | json:4 }}</pre>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should jsonify filtered objects', function() {\n         expect(element(by.id('default-spacing')).getText()).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n         expect(element(by.id('custom-spacing')).getText()).toMatch(/\\{\\n    \"name\": ?\"value\"\\n}/);\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "json",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "json ng.filter:json downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "json",
        "left": 388,
        "level": 1,
        "root": "ng",
        "right": 389
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "lowercase",
        "kind": "function",
        "description": "Converts string to lowercase.",
        "see": "angular.lowercase",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "lowercase",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "lowercase ng.filter:lowercase downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "lowercase",
        "left": 390,
        "level": 1,
        "root": "ng",
        "right": 391
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "uppercase",
        "kind": "function",
        "description": "Converts string to uppercase.",
        "see": "angular.uppercase",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "module": "ng",
        "id": "uppercase",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "uppercase ng.filter:uppercase downloaded/angular/angular.js-master/src/ng/filter/filters.js",
        "sortOn": "uppercase",
        "left": 392,
        "level": 1,
        "root": "ng",
        "right": 393
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "input",
                "altName": null,
                "description": "Source array, string or number to be limited.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "limit",
                "altName": null,
                "description": "The length of the returned array or string. If the `limit` number\nis positive, `limit` number of items from the beginning of the source array/string are copied.\nIf the number is negative, `limit` number  of items from the end of the source array/string\nare copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,\nthe input will be returned unchanged.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "begin",
                "altName": null,
                "description": "Index at which to begin limitation. As a negative index, `begin`\nindicates an offset from the end of `input`. Defaults to `0`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "limitTo",
        "kind": "function",
        "description": "Creates a new array or string containing only a specified number of elements. The elements\nare taken from either the beginning or the end of the source array, string or number, as specified by\nthe value and sign (positive or negative) of `limit`. If a number is used as input, it is\nconverted to a string.",
        "returns": "{Array|string} A new sub-array or substring of length `limit` or less if input array\nhad less than `limit` elements.",
        "example": "<example module=\"limitToExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('limitToExample', [])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.numbers = [1,2,3,4,5,6,7,8,9];\n             $scope.letters = \"abcdefghi\";\n             $scope.longNumber = 2345432342;\n             $scope.numLimit = 3;\n             $scope.letterLimit = 3;\n             $scope.longNumberLimit = 3;\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         Limit {{numbers}} to: <input type=\"number\" step=\"1\" ng-model=\"numLimit\">\n         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n         Limit {{letters}} to: <input type=\"number\" step=\"1\" ng-model=\"letterLimit\">\n         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n         Limit {{longNumber}} to: <input type=\"number\" step=\"1\" ng-model=\"longNumberLimit\">\n         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       var numLimitInput = element(by.model('numLimit'));\n       var letterLimitInput = element(by.model('letterLimit'));\n       var longNumberLimitInput = element(by.model('longNumberLimit'));\n       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));\n       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));\n       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));\n\n       it('should limit the number array to first three items', function() {\n         expect(numLimitInput.getAttribute('value')).toBe('3');\n         expect(letterLimitInput.getAttribute('value')).toBe('3');\n         expect(longNumberLimitInput.getAttribute('value')).toBe('3');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abc');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');\n       });\n\n       // There is a bug in safari and protractor that doesn't like the minus key\n       // it('should update the output when -3 is entered', function() {\n       //   numLimitInput.clear();\n       //   numLimitInput.sendKeys('-3');\n       //   letterLimitInput.clear();\n       //   letterLimitInput.sendKeys('-3');\n       //   longNumberLimitInput.clear();\n       //   longNumberLimitInput.sendKeys('-3');\n       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');\n       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');\n       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');\n       // });\n\n       it('should not exceed the maximum size of input array', function() {\n         numLimitInput.clear();\n         numLimitInput.sendKeys('100');\n         letterLimitInput.clear();\n         letterLimitInput.sendKeys('100');\n         longNumberLimitInput.clear();\n         longNumberLimitInput.sendKeys('100');\n         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');\n         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');\n         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/limitTo.js",
        "module": "ng",
        "id": "limitTo",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "limitTo ng.filter:limitTo downloaded/angular/angular.js-master/src/ng/filter/limitTo.js",
        "sortOn": "limitTo",
        "left": 394,
        "level": 1,
        "root": "ng",
        "right": 395
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "array",
                "altName": null,
                "description": "The array to sort.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Array.<(function(",
                        "type": "function"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "A predicate to be\nused by the comparator to determine the order of elements.\n\nCan be one of:\n\n- `function`: Getter function. The result of this function will be sorted using the\n`<`, `===`, `>` operator.\n- `string`: An Angular expression. The result of this expression is used to compare elements\n(for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by\n3 first characters of a property called `name`). The result of a constant expression\nis interpreted as a property name to be used in comparisons (for example `\"special name\"`\nto sort object by the value of their `special name` property). An expression can be\noptionally prefixed with `+` or `-` to control ascending or descending sort order\n(for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array\nelement itself is used to compare where sorting.\n- `Array`: An array of function or string predicates. The first predicate in the array\nis used for sorting, but when two items are equivalent, the next predicate is used.\n\nIf the predicate is missing or empty then it defaults to `'+'`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "reverse",
                "altName": null,
                "description": "Reverse the order of the array.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "orderBy",
        "kind": "function",
        "description": "Orders a specified `array` by the `expression` predicate. It is ordered alphabetically\nfor strings and numerically for numbers. Note: if you notice numbers are not being sorted\ncorrectly, make sure they are actually being saved as numbers and not strings.",
        "returns": "{Array} Sorted copy of the source array.",
        "example": "<example module=\"orderByExample\">\n    <file name=\"index.html\">\n      <div ng-controller=\"ExampleController\">\n        <table class=\"friend\">\n          <tr>\n            <th><a href=\"\" ng-click=\"reverse=false;order('name', false)\">Name</a>\n              (<a href=\"\" ng-click=\"order('-name',false)\">^</a>)</th>\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('phone', reverse)\">Phone Number</a></th>\n            <th><a href=\"\" ng-click=\"reverse=!reverse;order('age',reverse)\">Age</a></th>\n          </tr>\n          <tr ng-repeat=\"friend in friends\">\n            <td>{{friend.name}}</td>\n            <td>{{friend.phone}}</td>\n            <td>{{friend.age}}</td>\n          </tr>\n        </table>\n      </div>\n    </file>\n\n    <file name=\"script.js\">\n      angular.module('orderByExample', [])\n        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {\n          var orderBy = $filter('orderBy');\n          $scope.friends = [\n            { name: 'John',    phone: '555-1212',    age: 10 },\n            { name: 'Mary',    phone: '555-9876',    age: 19 },\n            { name: 'Mike',    phone: '555-4321',    age: 21 },\n            { name: 'Adam',    phone: '555-5678',    age: 35 },\n            { name: 'Julie',   phone: '555-8765',    age: 29 }\n          ];\n          $scope.order = function(predicate, reverse) {\n            $scope.friends = orderBy($scope.friends, predicate, reverse);\n          };\n          $scope.order('-age',false);\n        }]);\n    </file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/filter/orderBy.js",
        "module": "ng",
        "id": "orderBy",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "orderBy ng.filter:orderBy downloaded/angular/angular.js-master/src/ng/filter/orderBy.js",
        "sortOn": "orderBy",
        "left": 396,
        "level": 1,
        "root": "ng",
        "right": 397
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$httpProvider",
        "description": "Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "$httpProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$httpProvider ng.provider:$httpProvider downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "$httpProvider",
        "left": 398,
        "level": 1,
        "root": "ng",
        "right": 405
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "defaults",
        "description": "Object containing default values for all {@link ng.$http $http} requests.\n\n-*`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}\nthat will provide the cache for all requests who set their `cache` property to `true`.\nIf you set the `default.cache = false` then only requests that specify their own custom\ncache object will be cached. See {@link $http#caching $http Caching} for more information.\n\n-*`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\nDefaults value is `'XSRF-TOKEN'`.\n\n-*`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\nXSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n\n-*`defaults.headers`** - {Object} - Default headers for all $http requests.\nRefer to {@link ng.$http#setting-http-headers $http} for documentation on\nsetting default headers.\n-*`defaults.headers.common`**\n-*`defaults.headers.post`**\n-*`defaults.headers.put`**\n-*`defaults.headers.patch`**",
        "parentDoc": {
            "module": "ng",
            "name": "$httpProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "defaults",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "defaults ng.property:defaults downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "defaults",
        "left": 399,
        "level": 2,
        "root": "ng",
        "right": 400
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "If true, when requests are loaded, they will schedule a deferred\n\"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window\nto load and share the same digest cycle.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "useApplyAsync",
        "description": "Configure $http service to combine processing of multiple http responses received at around\nthe same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\nsignificant performance improvement for bigger applications that make many HTTP requests\nconcurrently (common during application bootstrap).\n\nDefaults to false. If no value is specifed, returns the current configured value.",
        "returns": "{boolean|Object} If a value is specified, returns the $httpProvider for chaining.\notherwise, returns the current configured value.",
        "parentDoc": {
            "module": "ng",
            "name": "$httpProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "useApplyAsync",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "useApplyAsync ng.method:useApplyAsync downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "useApplyAsync",
        "left": 401,
        "level": 2,
        "root": "ng",
        "right": 402
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "interceptors",
        "description": "Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}\npre-processing of request or postprocessing of responses.\n\nThese service factories are ordered by request, i.e. they are applied in the same order as the\narray, on request, but reverse order, on response.\n\n{@link ng.$http#interceptors Interceptors detailed info}",
        "parentDoc": {
            "module": "ng",
            "name": "$httpProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "interceptors",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "interceptors ng.property:interceptors downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "interceptors",
        "left": 403,
        "level": 2,
        "root": "ng",
        "right": 404
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Object describing the request to be made and how it should be\nprocessed. The object has following properties:\n\n-*method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n-*url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n-*params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned\nto `?key1=value1&key2=value2` after the url. If the value is not a string, it will be\nJSONified.\n-*data** – `{string|Object}` – Data to be sent as the request message data.\n-*headers** – `{Object}` – Map of strings or functions which return strings representing\nHTTP headers to send to the server. If the return value of a function is null, the\nheader will not be sent. Functions accept a config object as an argument.\n-*xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n-*xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n-*transformRequest** –\n`{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\ntransform function or an array of such functions. The transform function takes the http\nrequest body and headers and returns its transformed (typically serialized) version.\nSee {@link ng.$http#overriding-the-default-transformations-per-request\nOverriding the Default Transformations}\n-*transformResponse** –\n`{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –\ntransform function or an array of such functions. The transform function takes the http\nresponse body, headers and status and returns its transformed (typically deserialized) version.\nSee {@link ng.$http#overriding-the-default-transformations-per-request\nOverriding the Default Transformations}\n-*cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\nGET request, otherwise if a cache instance built with\n{@link ng.$cacheFactory $cacheFactory}, this cache will be used for\ncaching.\n-*timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\nthat should abort the request when resolved.\n-*withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the\nXHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)\nfor more information.\n-*responseType** - `{string}` - see\n[requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "kind": "function",
        "name": "$http",
        "requires": [
            "ng.$httpBackend",
            "$cacheFactory",
            "$rootScope",
            "$q",
            "$injector"
        ],
        "description": "The `$http` service is a core Angular service that facilitates communication with the remote\nHTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)\nobject or via [JSONP](http://en.wikipedia.org/wiki/JSONP).\n\nFor unit testing applications that use `$http` service, see\n{@link ngMock.$httpBackend $httpBackend mock}.\n\nFor a higher level of abstraction, please check out the {@link ngResource.$resource\n$resource} service.\n\nThe $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\nthe $q service. While for simple usage patterns this doesn't matter much, for advanced usage\nit is important to familiarize yourself with these APIs and the guarantees they provide.\n\n\n## General usage\nThe `$http` service is a function which takes a single argument — a configuration object —\nthat is used to generate an HTTP request and returns  a {@link ng.$q promise}\nwith two $http specific methods: `success` and `error`.\n\n```js\n// Simple GET request example :\n$http.get('/someUrl').\nsuccess(function(data, status, headers, config) {\n// this callback will be called asynchronously\n// when the response is available\n}).\nerror(function(data, status, headers, config) {\n// called asynchronously if an error occurs\n// or server returns response with an error status.\n});\n```\n\n```js\n// Simple POST request example (passing data) :\n$http.post('/someUrl', {msg:'hello word!'}).\nsuccess(function(data, status, headers, config) {\n// this callback will be called asynchronously\n// when the response is available\n}).\nerror(function(data, status, headers, config) {\n// called asynchronously if an error occurs\n// or server returns response with an error status.\n});\n```\n\n\nSince the returned value of calling the $http function is a `promise`, you can also use\nthe `then` method to register callbacks, and these callbacks will receive a single argument –\nan object representing the response. See the API signature and type info below for more\ndetails.\n\nA response status code between 200 and 299 is considered a success status and\nwill result in the success callback being called. Note that if the response is a redirect,\nXMLHttpRequest will transparently follow it, meaning that the error callback will not be\ncalled for such responses.\n\n## Writing Unit Tests that use $http\nWhen unit testing (using {@link ngMock ngMock}), it is necessary to call\n{@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending\nrequest using trained responses.\n\n```\n$httpBackend.expectGET(...);\n$http.get(...);\n$httpBackend.flush();\n```\n\n## Shortcut methods\n\nShortcut methods are also available. All shortcut methods require passing in the URL, and\nrequest data must be passed in for POST/PUT requests.\n\n```js\n$http.get('/someUrl').success(successCallback);\n$http.post('/someUrl', data).success(successCallback);\n```\n\nComplete list of shortcut methods:\n\n- {@link ng.$http#get $http.get}\n- {@link ng.$http#head $http.head}\n- {@link ng.$http#post $http.post}\n- {@link ng.$http#put $http.put}\n- {@link ng.$http#delete $http.delete}\n- {@link ng.$http#jsonp $http.jsonp}\n- {@link ng.$http#patch $http.patch}\n\n\n## Setting HTTP Headers\n\nThe $http service will automatically add certain HTTP headers to all requests. These defaults\ncan be fully configured by accessing the `$httpProvider.defaults.headers` configuration\nobject, which currently contains this default configuration:\n\n- `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n- `Accept: application/json, text/plain,/`\n- `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n- `Content-Type: application/json`\n- `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n- `Content-Type: application/json`\n\nTo add or overwrite these defaults, simply add or remove a property from these configuration\nobjects. To add headers for an HTTP method other than POST or PUT, simply add a new object\nwith the lowercased HTTP method name as the key, e.g.\n`$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.\n\nThe defaults can also be set at runtime via the `$http.defaults` object in the same\nfashion. For example:\n\n```\nmodule.run(function($http) {\n$http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'\n});\n```\n\nIn addition, you can supply a `headers` property in the config object passed when\ncalling `$http(config)`, which overrides the defaults without changing them globally.\n\nTo explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,\nUse the `headers` property, setting the desired header to `undefined`. For example:\n\n```js\nvar req = {\nmethod: 'POST',\nurl: 'http://example.com',\nheaders: {\n'Content-Type': undefined\n},\ndata: { test: 'test' }\n}\n\n$http(req).success(function(){...}).error(function(){...});\n```\n\n## Transforming Requests and Responses\n\nBoth requests and responses can be transformed using transformation functions: `transformRequest`\nand `transformResponse`. These properties can be a single function that returns\nthe transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,\nwhich allows you to `push` or `unshift` a new transformation function into the transformation chain.\n\n### Default Transformations\n\nThe `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and\n`defaults.transformResponse` properties. If a request does not provide its own transformations\nthen these will be applied.\n\nYou can augment or replace the default transformations by modifying these properties by adding to or\nreplacing the array.\n\nAngular provides the following default transformations:\n\nRequest transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):\n\n- If the `data` property of the request configuration object contains an object, serialize it\ninto JSON format.\n\nResponse transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):\n\n- If XSRF prefix is detected, strip it (see Security Considerations section below).\n- If JSON response is detected, deserialize it using a JSON parser.\n\n\n### Overriding the Default Transformations Per Request\n\nIf you wish override the request/response transformations only for a single request then provide\n`transformRequest` and/or `transformResponse` properties on the configuration object passed\ninto `$http`.\n\nNote that if you provide these properties on the config object the default transformations will be\noverwritten. If you wish to augment the default transformations then you must include them in your\nlocal transformation array.\n\nThe following code demonstrates adding a new response transformation to be run after the default response\ntransformations have been run.\n\n```js\nfunction appendTransform(defaults, transform) {\n\n// We can't guarantee that the default transformation is an array\ndefaults = angular.isArray(defaults) ? defaults : [defaults];\n\n// Append the new transformation to the defaults\nreturn defaults.concat(transform);\n}\n\n$http({\nurl: '...',\nmethod: 'GET',\ntransformResponse: appendTransform($http.defaults.transformResponse, function(value) {\nreturn doTransform(value);\n})\n});\n```\n\n\n## Caching\n\nTo enable caching, set the request configuration `cache` property to `true` (to use default\ncache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).\nWhen the cache is enabled, `$http` stores the response from the server in the specified\ncache. The next time the same request is made, the response is served from the cache without\nsending a request to the server.\n\nNote that even if the response is served from cache, delivery of the data is asynchronous in\nthe same way that real requests are.\n\nIf there are multiple GET requests for the same URL that should be cached using the same\ncache, but the cache is not populated yet, only one request to the server will be made and\nthe remaining requests will be fulfilled using the response from the first request.\n\nYou can change the default cache to a new object (built with\n{@link ng.$cacheFactory `$cacheFactory`}) by updating the\n{@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set\ntheir `cache` property to `true` will now use this cache object.\n\nIf you set the default cache to `false` then only requests that specify their own custom\ncache object will be cached.\n\n## Interceptors\n\nBefore you start creating interceptors, be sure to understand the\n{@link ng.$q $q and deferred/promise APIs}.\n\nFor purposes of global error handling, authentication, or any kind of synchronous or\nasynchronous pre-processing of request or postprocessing of responses, it is desirable to be\nable to intercept requests before they are handed to the server and\nresponses before they are handed over to the application code that\ninitiated these requests. The interceptors leverage the {@link ng.$q\npromise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n\nThe interceptors are service factories that are registered with the `$httpProvider` by\nadding them to the `$httpProvider.interceptors` array. The factory is called and\ninjected with dependencies (if specified) and returns the interceptor.\n\nThere are two kinds of interceptors (and two kinds of rejection interceptors):\n\n* `request`: interceptors get called with a http `config` object. The function is free to\nmodify the `config` object or create a new one. The function needs to return the `config`\nobject directly, or a promise containing the `config` or a new `config` object.\n* `requestError`: interceptor gets called when a previous interceptor threw an error or\nresolved with a rejection.\n* `response`: interceptors get called with http `response` object. The function is free to\nmodify the `response` object or create a new one. The function needs to return the `response`\nobject directly, or as a promise containing the `response` or a new `response` object.\n* `responseError`: interceptor gets called when a previous interceptor threw an error or\nresolved with a rejection.\n\n\n```js\n// register the interceptor as a service\n$provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\nreturn {\n// optional method\n'request': function(config) {\n// do something on success\nreturn config;\n},\n\n// optional method\n'requestError': function(rejection) {\n// do something on error\nif (canRecover(rejection)) {\nreturn responseOrNewPromise\n}\nreturn $q.reject(rejection);\n},\n\n\n\n// optional method\n'response': function(response) {\n// do something on success\nreturn response;\n},\n\n// optional method\n'responseError': function(rejection) {\n// do something on error\nif (canRecover(rejection)) {\nreturn responseOrNewPromise\n}\nreturn $q.reject(rejection);\n}\n};\n});\n\n$httpProvider.interceptors.push('myHttpInterceptor');\n\n\n// alternatively, register the interceptor via an anonymous factory\n$httpProvider.interceptors.push(function($q, dependency1, dependency2) {\nreturn {\n'request': function(config) {\n// same as above\n},\n\n'response': function(response) {\n// same as above\n}\n};\n});\n```\n\n## Security Considerations\n\nWhen designing web applications, consider security threats from:\n\n- [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\n- [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\nBoth server and the client must cooperate in order to eliminate these threats. Angular comes\npre-configured with strategies that address these issues, but for this to work backend server\ncooperation is required.\n\n### JSON Vulnerability Protection\n\nA [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)\nallows third party website to turn your JSON resource URL into\n[JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To\ncounter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\nAngular will automatically strip the prefix before processing it as JSON.\n\nFor example if your server needs to return:\n```js\n['one','two']\n```\n\nwhich is vulnerable to attack, your server can return:\n```js\n)]}',\n['one','two']\n```\n\nAngular will strip the prefix, before processing the JSON.\n\n\n### Cross Site Request Forgery (XSRF) Protection\n\n[XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which\nan unauthorized site can gain your user's private data. Angular provides a mechanism\nto counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n(by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only\nJavaScript that runs on your domain could read the cookie, your server can be assured that\nthe XHR came from JavaScript running on your domain. The header will not be set for\ncross-domain requests.\n\nTo take advantage of this, your server needs to set a token in a JavaScript readable session\ncookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\nserver can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\nthat only JavaScript running on your domain could have sent the request. The token must be\nunique for each user and must be verifiable by the server (to prevent the JavaScript from\nmaking up its own tokens). We recommend that the token is a digest of your site's\nauthentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)\nfor added security.\n\nThe name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\nproperties of either $httpProvider.defaults at config-time, $http.defaults at run-time,\nor the per-request config object.",
        "returns": "{HttpPromise} Returns a {@link ng.$q promise} object with the\nstandard `then` method and two http specific methods: `success` and `error`. The `then`\nmethod takes two arguments a success and an error callback which will be called with a\nresponse object. The `success` and `error` methods take a single argument - a function that\nwill be called when the request succeeds or fails respectively. The arguments passed into\nthese functions are destructured representation of the response object passed into the\n`then` method. The response object has these properties:\n\n-*data** – `{string|Object}` – The response body transformed with the transform\nfunctions.\n-*status** – `{number}` – HTTP status code of the response.\n-*headers** – `{function([headerName])}` – Header getter function.\n-*config** – `{Object}` – The configuration object that was used to generate the request.\n-*statusText** – `{string}` – HTTP status text of the response.",
        "property": [
            {
                "type": [
                    {
                        "name": "Array.<Object>",
                        "type": "array.<object>"
                    }
                ],
                "varName": "pendingRequests",
                "altName": null,
                "description": "Array of config objects for currently pending\nrequests. This is primarily meant to be used for debugging purposes.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "example": "<example module=\"httpExample\">\n<file name=\"index.html\">\n  <div ng-controller=\"FetchController\">\n    <select ng-model=\"method\">\n      <option>GET</option>\n      <option>JSONP</option>\n    </select>\n    <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n    <button id=\"fetchbtn\" ng-click=\"fetch()\">fetch</button><br>\n    <button id=\"samplegetbtn\" ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n    <button id=\"samplejsonpbtn\"\n      ng-click=\"updateModel('JSONP',\n                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">\n      Sample JSONP\n    </button>\n    <button id=\"invalidjsonpbtn\"\n      ng-click=\"updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">\n        Invalid JSONP\n      </button>\n    <pre>http status code: {{status}}</pre>\n    <pre>http response data: {{data}}</pre>\n  </div>\n</file>\n<file name=\"script.js\">\n  angular.module('httpExample', [])\n    .controller('FetchController', ['$scope', '$http', '$templateCache',\n      function($scope, $http, $templateCache) {\n        $scope.method = 'GET';\n        $scope.url = 'http-hello.html';\n\n        $scope.fetch = function() {\n          $scope.code = null;\n          $scope.response = null;\n\n          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n            success(function(data, status) {\n              $scope.status = status;\n              $scope.data = data;\n            }).\n            error(function(data, status) {\n              $scope.data = data || \"Request failed\";\n              $scope.status = status;\n          });\n        };\n\n        $scope.updateModel = function(method, url) {\n          $scope.method = method;\n          $scope.url = url;\n        };\n      }]);\n</file>\n<file name=\"http-hello.html\">\n  Hello, $http!\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  var status = element(by.binding('status'));\n  var data = element(by.binding('data'));\n  var fetchBtn = element(by.id('fetchbtn'));\n  var sampleGetBtn = element(by.id('samplegetbtn'));\n  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));\n  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));\n\n  it('should make an xhr GET request', function() {\n    sampleGetBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('200');\n    expect(data.getText()).toMatch(/Hello, \\$http!/);\n  });\n\n// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185\n// it('should make a JSONP request to angularjs.org', function() {\n//   sampleJsonpBtn.click();\n//   fetchBtn.click();\n//   expect(status.getText()).toMatch('200');\n//   expect(data.getText()).toMatch(/Super Hero!/);\n// });\n\n  it('should make JSONP request to invalid URL and invoke the error handler',\n      function() {\n    invalidJsonpBtn.click();\n    fetchBtn.click();\n    expect(status.getText()).toMatch('0');\n    expect(data.getText()).toMatch('Request failed');\n  });\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "$http",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$http ng.service:$http downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "$http",
        "left": 406,
        "level": 1,
        "root": "ng",
        "right": 423
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "description": "Shortcut method to perform `GET` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get ng.method:get downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "get",
        "left": 407,
        "level": 2,
        "root": "ng",
        "right": 408
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "delete",
        "description": "Shortcut method to perform `DELETE` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "delete",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "delete ng.method:delete downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "delete",
        "left": 409,
        "level": 2,
        "root": "ng",
        "right": 410
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "head",
        "description": "Shortcut method to perform `HEAD` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "head",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "head ng.method:head downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "head",
        "left": 411,
        "level": 2,
        "root": "ng",
        "right": 412
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request.\nThe name of the callback should be the string `JSON_CALLBACK`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "jsonp",
        "description": "Shortcut method to perform `JSONP` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "jsonp",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "jsonp ng.method:jsonp downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "jsonp",
        "left": 413,
        "level": 2,
        "root": "ng",
        "right": 414
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "data",
                "altName": null,
                "description": "Request content",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "post",
        "description": "Shortcut method to perform `POST` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "post",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "post ng.method:post downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "post",
        "left": 415,
        "level": 2,
        "root": "ng",
        "right": 416
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "data",
                "altName": null,
                "description": "Request content",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "put",
        "description": "Shortcut method to perform `PUT` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "put",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "put ng.method:put downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "put",
        "left": 417,
        "level": 2,
        "root": "ng",
        "right": 418
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "Relative or absolute URL specifying the destination of the request",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "data",
                "altName": null,
                "description": "Request content",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "Optional configuration object",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "patch",
        "description": "Shortcut method to perform `PATCH` request.",
        "returns": "{HttpPromise} Future object",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "patch",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "patch ng.method:patch downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "patch",
        "left": 419,
        "level": 2,
        "root": "ng",
        "right": 420
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "defaults",
        "description": "Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\ndefault headers, withCredentials as well as request and response transformations.\n\nSee \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.",
        "parentDoc": {
            "module": "ng",
            "name": "$http"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/http.js",
        "module": "ng",
        "id": "defaults",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "defaults ng.property:defaults downloaded/angular/angular.js-master/src/ng/http.js",
        "sortOn": "defaults",
        "left": 421,
        "level": 2,
        "root": "ng",
        "right": 422
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$httpBackend",
        "requires": [
            "$window",
            "$document"
        ],
        "description": "HTTP backend used by the {@link ng.$http service} that delegates to\nXMLHttpRequest object or JSONP and deals with browser incompatibilities.\n\nYou should never need to use this service directly, instead use the higher-level abstractions:\n{@link ng.$http $http} or {@link ngResource.$resource $resource}.\n\nDuring testing this implementation is swapped with {@link ngMock.$httpBackend mock\n$httpBackend} which can be trained with responses.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/httpBackend.js",
        "module": "ng",
        "id": "$httpBackend",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$httpBackend ng.service:$httpBackend downloaded/angular/angular.js-master/src/ng/httpBackend.js",
        "sortOn": "$httpBackend",
        "left": 424,
        "level": 1,
        "root": "ng",
        "right": 425
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$interpolateProvider",
        "description": "Used for configuring the interpolation markup. Defaults to `{{` and `}}`.",
        "example": "<example module=\"customInterpolationApp\">\n<file name=\"index.html\">\n<script>\n  var customInterpolationApp = angular.module('customInterpolationApp', []);\n\n  customInterpolationApp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('//');\n    $interpolateProvider.endSymbol('//');\n  });\n\n\n  customInterpolationApp.controller('DemoController', function() {\n      this.label = \"This binding is brought you by // interpolation symbols.\";\n  });\n</script>\n<div ng-app=\"App\" ng-controller=\"DemoController as demo\">\n    //demo.label//\n</div>\n</file>\n<file name=\"protractor.js\" type=\"protractor\">\n  it('should interpolate binding with custom symbols', function() {\n    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');\n  });\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "$interpolateProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$interpolateProvider ng.provider:$interpolateProvider downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "$interpolateProvider",
        "left": 426,
        "level": 1,
        "root": "ng",
        "right": 431
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "new value to set the starting symbol to.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "startSymbol",
        "description": "Symbol to denote start of expression in the interpolated string. Defaults to `{{`.",
        "returns": "{string|self} Returns the symbol when used as getter and self if used as setter.",
        "parentDoc": {
            "module": "ng",
            "name": "$interpolateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "startSymbol",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "startSymbol ng.method:startSymbol downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "startSymbol",
        "left": 427,
        "level": 2,
        "root": "ng",
        "right": 428
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "new value to set the ending symbol to.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "endSymbol",
        "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.",
        "returns": "{string|self} Returns the symbol when used as getter and self if used as setter.",
        "parentDoc": {
            "module": "ng",
            "name": "$interpolateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "endSymbol",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "endSymbol ng.method:endSymbol downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "endSymbol",
        "left": 429,
        "level": 2,
        "root": "ng",
        "right": 430
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "text",
                "altName": null,
                "description": "The text with markup to interpolate.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "mustHaveExpression",
                "altName": null,
                "description": "if set to true then the interpolation string must have\nembedded expression in order to return an interpolation function. Strings with no\nembedded expression will return null for the interpolation function.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "trustedContext",
                "altName": null,
                "description": "when provided, the returned function passes the interpolated\nresult through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\ntrustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\nprovides Strict Contextual Escaping for details.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "allOrNothing",
                "altName": null,
                "description": "if `true`, then the returned function returns undefined\nunless all embedded expressions evaluate to a value other than `undefined`.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$interpolate",
        "kind": "function",
        "requires": [
            "$parse",
            "$sce"
        ],
        "description": "Compiles a string with markup into an interpolation function. This service is used by the\nHTML {@link ng.$compile $compile} service for data binding. See\n{@link ng.$interpolateProvider $interpolateProvider} for configuring the\ninterpolation markup.\n\n\n```js\nvar $interpolate = ...; // injected\nvar exp = $interpolate('Hello {{name | uppercase}}!');\nexpect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');\n```\n\n`$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n`true`, the interpolation function will return `undefined` unless all embedded expressions\nevaluate to a value other than `undefined`.\n\n```js\nvar $interpolate = ...; // injected\nvar context = {greeting: 'Hello', name: undefined };\n\n// default \"forgiving\" mode\nvar exp = $interpolate('{{greeting}} {{name}}!');\nexpect(exp(context)).toEqual('Hello !');\n\n// \"allOrNothing\" mode\nexp = $interpolate('{{greeting}} {{name}}!', false, null, true);\nexpect(exp(context)).toBeUndefined();\ncontext.name = 'Angular';\nexpect(exp(context)).toEqual('Hello Angular!');\n```\n\n`allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n\n####Escaped Interpolation\n$interpolate provides a mechanism for escaping interpolation markers. Start and end markers\ncan be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\nIt will be rendered as a regular start/end marker, and will not be interpreted as an expression\nor binding.\n\nThis enables web-servers to prevent script injection attacks and defacing attacks, to some\ndegree, while also enabling code examples to work without relying on the\n{@link ng.directive:ngNonBindable ngNonBindable} directive.\n\n**For security purposes, it is strongly encouraged that web servers escape user-supplied data,\nreplacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\ninterpolation start/end markers with their escaped counterparts.**\n\nEscaped interpolation markers are only replaced with the actual interpolation markers in rendered\noutput when the $interpolate service processes the text. So, for HTML elements interpolated\nby {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\nset to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\nthis is typically useful only when user-data is used in rendering a template from the server, or\nwhen otherwise untrusted data is used by a directive.\n\n<example>\n<file name=\"index.html\">\n<div ng-init=\"username='A user'\">\n<p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n</p>\n<p><strong>{{username}}</strong> attempts to inject code which will deface the\napplication, but fails to accomplish their task, because the server has correctly\nescaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\ncharacters.</p>\n<p>Instead, the result of the attempted script injection is visible, and can be removed\nfrom the database by an administrator.</p>\n</div>\n</file>\n</example>",
        "returns": "{function(context)} an interpolation function which is used to compute the\ninterpolated string. The function has these parameters:\n\n- `context`: evaluation context for all expressions embedded in the interpolated text",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "$interpolate",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$interpolate ng.service:$interpolate downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "$interpolate",
        "left": 432,
        "level": 1,
        "root": "ng",
        "right": 437
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "startSymbol",
        "description": "Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n\nUse {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\nthe symbol.",
        "returns": "{string} start symbol.",
        "parentDoc": {
            "module": "ng",
            "name": "$interpolate"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "startSymbol",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "startSymbol ng.method:startSymbol downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "startSymbol",
        "left": 433,
        "level": 2,
        "root": "ng",
        "right": 434
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "endSymbol",
        "description": "Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n\nUse {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\nthe symbol.",
        "returns": "{string} end symbol.",
        "parentDoc": {
            "module": "ng",
            "name": "$interpolate"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "module": "ng",
        "id": "endSymbol",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "endSymbol ng.method:endSymbol downloaded/angular/angular.js-master/src/ng/interpolate.js",
        "sortOn": "endSymbol",
        "left": 435,
        "level": 2,
        "root": "ng",
        "right": 436
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "A function that should be called repeatedly.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "delay",
                "altName": null,
                "description": "Number of milliseconds between each function call.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "count",
                "altName": null,
                "description": "Number of times to repeat. If not set, or 0, will repeat\nindefinitely.",
                "optional": true,
                "defaultValue": "0"
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "invokeApply",
                "altName": null,
                "description": "If set to `false` skips model dirty checking, otherwise\nwill invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                "optional": true,
                "defaultValue": "true"
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "Pass",
                "altName": null,
                "description": "additional parameters to the executed function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$interval",
        "description": "Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`\nmilliseconds.\n\nThe return value of registering an interval function is a promise. This promise will be\nnotified upon each tick of the interval, and will be resolved after `count` iterations, or\nrun indefinitely if `count` is not defined. The value of the notification will be the\nnumber of iterations that have run.\nTo cancel an interval, call `$interval.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.\n\n<div class=\"alert alert-warning\">\n**Note**: Intervals created by this service must be explicitly destroyed when you are finished\nwith them.  In particular they are not automatically destroyed when a controller's scope or a\ndirective's element are destroyed.\nYou should take this into consideration and make sure to always cancel the interval at the\nappropriate moment.  See the example below for more details on how and when to do this.\n</div>",
        "returns": "{promise} A promise which will be notified on each iteration.",
        "example": "<example module=\"intervalExample\">\n<file name=\"index.html\">\n<script>\nangular.module('intervalExample', [])\n.controller('ExampleController', ['$scope', '$interval',\nfunction($scope, $interval) {\n$scope.format = 'M/d/yy h:mm:ss a';\n$scope.blood_1 = 100;\n$scope.blood_2 = 120;\n\nvar stop;\n$scope.fight = function() {\n// Don't start a new fight if we are already fighting\nif ( angular.isDefined(stop) ) return;\n\nstop = $interval(function() {\nif ($scope.blood_1 > 0 && $scope.blood_2 > 0) {\n$scope.blood_1 = $scope.blood_1 - 3;\n$scope.blood_2 = $scope.blood_2 - 4;\n} else {\n$scope.stopFight();\n}\n}, 100);\n};\n\n$scope.stopFight = function() {\nif (angular.isDefined(stop)) {\n$interval.cancel(stop);\nstop = undefined;\n}\n};\n\n$scope.resetFight = function() {\n$scope.blood_1 = 100;\n$scope.blood_2 = 120;\n};\n\n$scope.$on('$destroy', function() {\n// Make sure that the interval is destroyed too\n$scope.stopFight();\n});\n}])\n// Register the 'myCurrentTime' directive factory method.\n// We inject $interval and dateFilter service since the factory method is DI.\n.directive('myCurrentTime', ['$interval', 'dateFilter',\nfunction($interval, dateFilter) {\n// return the directive link function. (compile function not needed)\nreturn function(scope, element, attrs) {\nvar format,  // date format\nstopTime; // so that we can cancel the time updates\n\n// used to update the UI\nfunction updateTime() {\nelement.text(dateFilter(new Date(), format));\n}\n\n// watch the expression, and update the UI on change.\nscope.$watch(attrs.myCurrentTime, function(value) {\nformat = value;\nupdateTime();\n});\n\nstopTime = $interval(updateTime, 1000);\n\n// listen on DOM destroy (removal) event, and cancel the next UI update\n// to prevent updating time after the DOM element was removed.\nelement.on('$destroy', function() {\n$interval.cancel(stopTime);\n});\n}\n}]);\n</script>\n\n<div>\n<div ng-controller=\"ExampleController\">\nDate format: <input ng-model=\"format\"> <hr/>\nCurrent time is: <span my-current-time=\"format\"></span>\n<hr/>\nBlood 1 : <font color='red'>{{blood_1}}</font>\nBlood 2 : <font color='red'>{{blood_2}}</font>\n<button type=\"button\" data-ng-click=\"fight()\">Fight</button>\n<button type=\"button\" data-ng-click=\"stopFight()\">StopFight</button>\n<button type=\"button\" data-ng-click=\"resetFight()\">resetFight</button>\n</div>\n</div>\n\n</file>\n</example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interval.js",
        "module": "ng",
        "id": "$interval",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$interval ng.service:$interval downloaded/angular/angular.js-master/src/ng/interval.js",
        "sortOn": "$interval",
        "left": 438,
        "level": 1,
        "root": "ng",
        "right": 441
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "promise",
                        "type": "promise"
                    }
                ],
                "varName": "promise",
                "altName": null,
                "description": "returned by the `$interval` function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "cancel",
        "description": "Cancels a task associated with the `promise`.",
        "returns": "{boolean} Returns `true` if the task was successfully canceled.",
        "parentDoc": {
            "module": "ng",
            "name": "$interval"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/interval.js",
        "module": "ng",
        "id": "cancel",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "cancel ng.method:cancel downloaded/angular/angular.js-master/src/ng/interval.js",
        "sortOn": "cancel",
        "left": 439,
        "level": 2,
        "root": "ng",
        "right": 440
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$locale",
        "description": "$locale service provides localization rules for various Angular components. As of right now the\nonly public api is:\n\n* `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/locale.js",
        "module": "ng",
        "id": "$locale",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$locale ng.service:$locale downloaded/angular/angular.js-master/src/ng/locale.js",
        "sortOn": "$locale",
        "left": 442,
        "level": 1,
        "root": "ng",
        "right": 443
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$location",
        "requires": [
            "$rootElement"
        ],
        "description": "The $location service parses the URL in the browser address bar (based on the\n[window.location](https://developer.mozilla.org/en/window.location)) and makes the URL\navailable to your application. Changes to the URL in the address bar are reflected into\n$location service and changes to $location are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n- Watch and observe the URL.\n- Change the URL.\n- Synchronizes the URL with the browser when the user\n- Changes the address bar.\n- Clicks the back or forward button (or clicks a History link).\n- Clicks on a link.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\nFor more information see {@link guide/$location Developer Guide: Using $location}",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "$location",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$location ng.service:$location downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "$location",
        "left": 444,
        "level": 1,
        "root": "ng",
        "right": 469
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "absUrl",
        "description": "This method is getter only.\n\nReturn full url representation with all segments encoded according to rules specified in\n[RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar absUrl = $location.absUrl();\n// => \"http://example.com/#/some/path?foo=bar&baz=xoxo\"\n```",
        "return": "{string} full url",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "absUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "absUrl ng.method:absUrl downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "absUrl",
        "left": 445,
        "level": 2,
        "root": "ng",
        "right": 446
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "New url without base prefix (e.g. `/path?a=b#hash`)",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "url",
        "description": "This method is getter / setter.\n\nReturn url (e.g. `/path?a=b#hash`) when called without any parameter.\n\nChange path, search and hash, when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar url = $location.url();\n// => \"/some/path?foo=bar&baz=xoxo\"\n```",
        "return": "{string} url",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "url",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "url ng.method:url downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "url",
        "left": 447,
        "level": 2,
        "root": "ng",
        "right": 448
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "protocol",
        "description": "This method is getter only.\n\nReturn protocol of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar protocol = $location.protocol();\n// => \"http\"\n```",
        "return": "{string} protocol of current url",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "protocol",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "protocol ng.method:protocol downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "protocol",
        "left": 449,
        "level": 2,
        "root": "ng",
        "right": 450
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "host",
        "description": "This method is getter only.\n\nReturn host of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar host = $location.host();\n// => \"example.com\"\n```",
        "return": "{string} host of current url.",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "host",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "host ng.method:host downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "host",
        "left": 451,
        "level": 2,
        "root": "ng",
        "right": 452
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "port",
        "description": "This method is getter only.\n\nReturn port of current url.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar port = $location.port();\n// => 80\n```",
        "return": "{Number} port",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "port",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "port ng.method:port downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "port",
        "left": 453,
        "level": 2,
        "root": "ng",
        "right": 454
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "path",
                "altName": null,
                "description": "New path",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "path",
        "description": "This method is getter / setter.\n\nReturn path of current url when called without any parameter.\n\nChange path when called with parameter and return `$location`.\n\nNote: Path should always begin with forward slash (/), this method will add the forward slash\nif it is missing.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar path = $location.path();\n// => \"/some/path\"\n```",
        "return": "{string} path",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "path",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "path ng.method:path downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "path",
        "left": 455,
        "level": 2,
        "root": "ng",
        "right": 456
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Object.<string>",
                        "type": "object.<string>"
                    },
                    {
                        "name": "Object.<Array.<string>>",
                        "type": "object.<array.<string>>"
                    }
                ],
                "varName": "search",
                "altName": null,
                "description": "New search params - string or\nhash object.\n\nWhen called with a single argument the method acts as a setter, setting the `search` component\nof `$location` to the specified value.\n\nIf the argument is a hash object containing an array of values, these values will be encoded\nas duplicate search parameters in the url.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Number",
                        "type": "number"
                    },
                    {
                        "name": "Array",
                        "type": "array"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "paramValue",
                "altName": null,
                "description": "If `search` is a string or number, then `paramValue`\nwill override only a single search property.\n\nIf `paramValue` is an array, it will override the property of the `search` component of\n`$location` specified via the first argument.\n\nIf `paramValue` is `null`, the property specified via the first argument will be deleted.\n\nIf `paramValue` is `true`, the property specified via the first argument will be added with no\nvalue nor trailing equal sign.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "search",
        "description": "This method is getter / setter.\n\nReturn search part (as object) of current url when called without any parameter.\n\nChange search part when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo\nvar searchObject = $location.search();\n// => {foo: 'bar', baz: 'xoxo'}\n\n// set foo to 'yipee'\n$location.search('foo', 'yipee');\n// $location.search() => {foo: 'yipee', baz: 'xoxo'}\n```",
        "return": "{Object} If called with no arguments returns the parsed `search` object. If called with\none or more arguments returns `$location` object itself.",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "search",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "search ng.method:search downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "search",
        "left": 457,
        "level": 2,
        "root": "ng",
        "right": 458
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "hash",
                "altName": null,
                "description": "New hash fragment",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "hash",
        "description": "This method is getter / setter.\n\nReturn hash fragment when called without any parameter.\n\nChange hash fragment when called with parameter and return `$location`.\n\n\n```js\n// given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue\nvar hash = $location.hash();\n// => \"hashValue\"\n```",
        "return": "{string} hash",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "hash",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "hash ng.method:hash downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "hash",
        "left": 459,
        "level": 2,
        "root": "ng",
        "right": 460
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "replace",
        "description": "If called, all changes to $location during current `$digest` will be replacing current history\nrecord, instead of adding new one.",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "replace",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "replace ng.method:replace downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "replace",
        "left": 461,
        "level": 2,
        "root": "ng",
        "right": 462
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "state",
                "altName": null,
                "description": "State object for pushState or replaceState",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "state",
        "description": "This method is getter / setter.\n\nReturn the history state object when called without any parameter.\n\nChange the history state object when called with one parameter and return `$location`.\nThe state object is later passed to `pushState` or `replaceState`.\n\nNOTE: This method is supported only in HTML5 mode and only in browsers supporting\nthe HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\nolder browsers (like IE9 or Android < 4.0), don't use this method.",
        "return": "{object} state",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "state",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "state ng.method:state downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "state",
        "left": 463,
        "level": 2,
        "root": "ng",
        "right": 464
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newUrl",
                "altName": null,
                "description": "New URL",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "oldUrl",
                "altName": null,
                "description": "URL that was before it was changed.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newState",
                "altName": null,
                "description": "New history state object",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "oldState",
                "altName": null,
                "description": "History state object that was before it was changed.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$locationChangeStart",
        "eventType": "broadcast on root scope",
        "description": "Broadcasted before a URL will change.\n\nThis change can be prevented by calling\n`preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more\ndetails about event object. Upon successful change\n{@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "$locationChangeStart",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$locationChangeStart ng.event:$locationChangeStart downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "$locationChangeStart",
        "left": 465,
        "level": 2,
        "root": "ng",
        "right": 466
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newUrl",
                "altName": null,
                "description": "New URL",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "oldUrl",
                "altName": null,
                "description": "URL that was before it was changed.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newState",
                "altName": null,
                "description": "New history state object",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "oldState",
                "altName": null,
                "description": "History state object that was before it was changed.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$locationChangeSuccess",
        "eventType": "broadcast on root scope",
        "description": "Broadcasted after a URL was changed.\n\nThe `newState` and `oldState` parameters may be defined only in HTML5 mode and when\nthe browser supports the HTML5 History API.",
        "parentDoc": {
            "module": "ng",
            "name": "$location"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "$locationChangeSuccess",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$locationChangeSuccess ng.event:$locationChangeSuccess downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "$locationChangeSuccess",
        "left": 467,
        "level": 2,
        "root": "ng",
        "right": 468
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$locationProvider",
        "description": "Use the `$locationProvider` to configure how the application deep linking paths are stored.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "$locationProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$locationProvider ng.provider:$locationProvider downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "$locationProvider",
        "left": 470,
        "level": 1,
        "root": "ng",
        "right": 475
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "prefix",
                "altName": null,
                "description": "Prefix for hash part (containing path and search)",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "hashPrefix",
        "description": "",
        "returns": "{*} current value if used as getter or itself (chaining) if used as setter",
        "parentDoc": {
            "module": "ng",
            "name": "$locationProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "hashPrefix",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "hashPrefix ng.method:hashPrefix downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "hashPrefix",
        "left": 471,
        "level": 2,
        "root": "ng",
        "right": 472
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "mode",
                "altName": null,
                "description": "If boolean, sets `html5Mode.enabled` to value.\nIf object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported\nproperties:\n-*enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to\nchange urls where supported. Will fall back to hash-prefixed paths in browsers that do not\nsupport `pushState`.\n-*requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies\nwhether or not a <base> tag is required to be present. If `enabled` and `requireBase` are\ntrue, and a base tag is not present, an error will be thrown when `$location` is injected.\nSee the {@link guide/$location $location guide for more information}\n-*rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,\nenables/disables url rewriting for relative links.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "html5Mode",
        "description": "",
        "returns": "{Object} html5Mode object if used as getter or itself (chaining) if used as setter",
        "parentDoc": {
            "module": "ng",
            "name": "$locationProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/location.js",
        "module": "ng",
        "id": "html5Mode",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "html5Mode ng.method:html5Mode downloaded/angular/angular.js-master/src/ng/location.js",
        "sortOn": "html5Mode",
        "left": 473,
        "level": 2,
        "root": "ng",
        "right": 474
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$log",
        "requires": [
            "$window"
        ],
        "description": "Simple service for logging. Default implementation safely writes the message\ninto the browser's console (if present).\n\nThe main purpose of this service is to simplify debugging and troubleshooting.\n\nThe default is to log `debug` messages. You can use\n{@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.",
        "example": "<example module=\"logExample\">\n     <file name=\"script.js\">\n       angular.module('logExample', [])\n         .controller('LogController', ['$scope', '$log', function($scope, $log) {\n           $scope.$log = $log;\n           $scope.message = 'Hello World!';\n         }]);\n     </file>\n     <file name=\"index.html\">\n       <div ng-controller=\"LogController\">\n         <p>Reload this page with open console, enter text and hit the log button...</p>\n         Message:\n         <input type=\"text\" ng-model=\"message\"/>\n         <button ng-click=\"$log.log(message)\">log</button>\n         <button ng-click=\"$log.warn(message)\">warn</button>\n         <button ng-click=\"$log.info(message)\">info</button>\n         <button ng-click=\"$log.error(message)\">error</button>\n         <button ng-click=\"$log.debug(message)\">debug</button>\n       </div>\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "$log",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$log ng.service:$log downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "$log",
        "left": 476,
        "level": 1,
        "root": "ng",
        "right": 487
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "log",
        "description": "Write a log message",
        "parentDoc": {
            "module": "ng",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "log",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "log ng.method:log downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "log",
        "left": 477,
        "level": 2,
        "root": "ng",
        "right": 478
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "info",
        "description": "Write an information message",
        "parentDoc": {
            "module": "ng",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "info",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "info ng.method:info downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "info",
        "left": 479,
        "level": 2,
        "root": "ng",
        "right": 480
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "warn",
        "description": "Write a warning message",
        "parentDoc": {
            "module": "ng",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "warn",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "warn ng.method:warn downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "warn",
        "left": 481,
        "level": 2,
        "root": "ng",
        "right": 482
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "error",
        "description": "Write an error message",
        "parentDoc": {
            "module": "ng",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "error",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "error ng.method:error downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "error",
        "left": 483,
        "level": 2,
        "root": "ng",
        "right": 484
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "debug",
        "description": "Write a debug message",
        "parentDoc": {
            "module": "ng",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "debug",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "debug ng.method:debug downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "debug",
        "left": 485,
        "level": 2,
        "root": "ng",
        "right": 486
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$logProvider",
        "description": "Use the `$logProvider` to configure how the application logs messages",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "$logProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$logProvider ng.provider:$logProvider downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "$logProvider",
        "left": 488,
        "level": 1,
        "root": "ng",
        "right": 491
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "flag",
                "altName": null,
                "description": "enable or disable debug level messages",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "debugEnabled",
        "description": "",
        "returns": "{*} current value if used as getter or itself (chaining) if used as setter",
        "parentDoc": {
            "module": "ng",
            "name": "$logProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/log.js",
        "module": "ng",
        "id": "debugEnabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "debugEnabled ng.method:debugEnabled downloaded/angular/angular.js-master/src/ng/log.js",
        "sortOn": "debugEnabled",
        "left": 489,
        "level": 2,
        "root": "ng",
        "right": 490
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$parse",
        "kind": "function",
        "description": "Converts Angular {@link guide/expression expression} into a function.\n\n```js\nvar getter = $parse('user.name');\nvar setter = getter.assign;\nvar context = {user:{name:'angular'}};\nvar locals = {user:{name:'local'}};\n\nexpect(getter(context)).toEqual('angular');\nsetter(context, 'newValue');\nexpect(context.user.name).toEqual('newValue');\nexpect(getter(context, locals)).toEqual('local');\n```",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.\n\nThe returned function also has the following properties:\n* `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\nliteral.\n* `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\nconstant literals.\n* `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\nset to a function to change its value on the given context.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/parse.js",
        "module": "ng",
        "id": "$parse",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$parse ng.service:$parse downloaded/angular/angular.js-master/src/ng/parse.js",
        "sortOn": "$parse",
        "left": 492,
        "level": 1,
        "root": "ng",
        "right": 493
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$parseProvider",
        "description": "`$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}\nservice.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/parse.js",
        "module": "ng",
        "id": "$parseProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$parseProvider ng.provider:$parseProvider downloaded/angular/angular.js-master/src/ng/parse.js",
        "sortOn": "$parseProvider",
        "left": 494,
        "level": 1,
        "root": "ng",
        "right": 495
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "resolver",
                "altName": null,
                "description": "Function which is responsible for resolving or\nrejecting the newly created promise. The first parameter is a function which resolves the\npromise, the second parameter is a function which rejects the promise.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$q",
        "requires": [
            "$rootScope"
        ],
        "description": "A service that helps you run functions asynchronously, and use their return values (or exceptions)\nwhen they are done processing.\n\nThis is an implementation of promises/deferred objects inspired by\n[Kris Kowal's Q](https://github.com/kriskowal/q).\n\n$q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred\nimplementations, and the other which resembles ES6 promises to some degree.\n\n# $q constructor\n\nThe streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`\nfunction as the first argument. This is similar to the native Promise implementation from ES6 Harmony,\nsee [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nWhile the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are\navailable yet.\n\nIt can be used like so:\n\n```js\n// for the purpose of this example let's assume that variables `$q` and `okToGreet`\n// are available in the current lexical scope (they could have been injected or passed in).\n\nfunction asyncGreet(name) {\n// perform some asynchronous operation, resolve or reject the promise when appropriate.\nreturn $q(function(resolve, reject) {\nsetTimeout(function() {\nif (okToGreet(name)) {\nresolve('Hello, ' + name + '!');\n} else {\nreject('Greeting ' + name + ' is not allowed.');\n}\n}, 1000);\n});\n}\n\nvar promise = asyncGreet('Robin Hood');\npromise.then(function(greeting) {\nalert('Success: ' + greeting);\n}, function(reason) {\nalert('Failed: ' + reason);\n});\n```\n\nNote: progress/notify callbacks are not currently supported via the ES6-style interface.\n\nHowever, the more traditional CommonJS-style usage is still available, and documented below.\n\n[The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\ninterface for interacting with an object that represents the result of an action that is\nperformed asynchronously, and may or may not be finished at any given point in time.\n\nFrom the perspective of dealing with error handling, deferred and promise APIs are to\nasynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n\n```js\n// for the purpose of this example let's assume that variables `$q` and `okToGreet`\n// are available in the current lexical scope (they could have been injected or passed in).\n\nfunction asyncGreet(name) {\nvar deferred = $q.defer();\n\nsetTimeout(function() {\ndeferred.notify('About to greet ' + name + '.');\n\nif (okToGreet(name)) {\ndeferred.resolve('Hello, ' + name + '!');\n} else {\ndeferred.reject('Greeting ' + name + ' is not allowed.');\n}\n}, 1000);\n\nreturn deferred.promise;\n}\n\nvar promise = asyncGreet('Robin Hood');\npromise.then(function(greeting) {\nalert('Success: ' + greeting);\n}, function(reason) {\nalert('Failed: ' + reason);\n}, function(update) {\nalert('Got notification: ' + update);\n});\n```\n\nAt first it might not be obvious why this extra complexity is worth the trouble. The payoff\ncomes in the way of guarantees that promise and deferred APIs make, see\nhttps://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.\n\nAdditionally the promise api allows for composition that is very hard to do with the\ntraditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\nFor more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\nsection on serial or parallel joining of promises.\n\n# The Deferred API\n\nA new instance of deferred is constructed by calling `$q.defer()`.\n\nThe purpose of the deferred object is to expose the associated Promise instance as well as APIs\nthat can be used for signaling the successful or unsuccessful completion, as well as the status\nof the task.\n\n**Methods**\n\n- `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\nconstructed via `$q.reject`, the promise will be rejected instead.\n- `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\nresolving it with a rejection constructed via `$q.reject`.\n- `notify(value)` - provides updates on the status of the promise's execution. This may be called\nmultiple times before the promise is either resolved or rejected.\n\n**Properties**\n\n- promise – `{Promise}` – promise object associated with this deferred.\n\n\n# The Promise API\n\nA new promise instance is created when a deferred instance is created and can be retrieved by\ncalling `deferred.promise`.\n\nThe purpose of the promise object is to allow for interested parties to get access to the result\nof the deferred task when it completes.\n\n**Methods**\n\n- `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or\nwill be resolved or rejected, `then` calls one of the success or error callbacks asynchronously\nas soon as the result is available. The callbacks are called with a single argument: the result\nor rejection reason. Additionally, the notify callback may be called zero or more times to\nprovide a progress indication, before the promise is resolved or rejected.\n\nThis methodreturns a new promise* which is resolved or rejected via the return value of the\n`successCallback`, `errorCallback`. It also notifies via the return value of the\n`notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback\nmethod.\n\n- `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`\n\n- `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,\nbut to do so without modifying the final value. This is useful to release resources or do some\nclean-up that needs to be done whether the promise was rejected or resolved. See the [full\nspecification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\nmore information.\n\n# Chaining promises\n\nBecause calling the `then` method of a promise returns a new derived promise, it is easily\npossible to create a chain of promises:\n\n```js\npromiseB = promiseA.then(function(result) {\nreturn result + 1;\n});\n\n// promiseB will be resolved immediately after promiseA is resolved and its value\n// will be the result of promiseA incremented by 1\n```\n\nIt is possible to create chains of any length and since a promise can be resolved with another\npromise (which will defer its resolution further), it is possible to pause/defer resolution of\nthe promises at any point in the chain. This makes it possible to implement powerful APIs like\n$http's response interceptors.\n\n\n# Differences between Kris Kowal's Q and $q\n\nThere are two main differences:\n\n- $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\nmechanism in angular, which means faster propagation of resolution or rejection into your\nmodels and avoiding unnecessary browser repaints, which would result in flickering UI.\n- Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\nall the important functionality needed for common async tasks.\n\n# Testing\n\n```js\nit('should simulate promise', inject(function($q, $rootScope) {\nvar deferred = $q.defer();\nvar promise = deferred.promise;\nvar resolvedValue;\n\npromise.then(function(value) { resolvedValue = value; });\nexpect(resolvedValue).toBeUndefined();\n\n// Simulate resolving of promise\ndeferred.resolve(123);\n// Note that the 'then' function does not get called synchronously.\n// This is because we want the promise API to always be async, whether or not\n// it got called synchronously or asynchronously.\nexpect(resolvedValue).toBeUndefined();\n\n// Propagate promise resolution to 'then' functions using $apply().\n$rootScope.$apply();\nexpect(resolvedValue).toEqual(123);\n}));\n```",
        "returns": "{Promise} The newly created promise.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "$q",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$q ng.service:$q downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "$q",
        "left": 496,
        "level": 1,
        "root": "ng",
        "right": 503
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "reason",
                "altName": null,
                "description": "Constant, message, exception or an object representing the rejection reason.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "reject",
        "kind": "function",
        "description": "Creates a promise that is resolved as rejected with the specified `reason`. This api should be\nused to forward rejection in a chain of promises. If you are dealing with the last promise in\na promise chain, you don't need to worry about it.\n\nWhen comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n`reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\na promise error callback and you want to forward the error to the promise derived from the\ncurrent promise, you have to \"rethrow\" the error by returning a rejection constructed via\n`reject`.\n\n```js\npromiseB = promiseA.then(function(result) {\n// success: do something and resolve promiseB\n//          with the old or a new result\nreturn result;\n}, function(reason) {\n// error: handle the error if possible and\n//        resolve promiseB with newPromiseOrValue,\n//        otherwise forward the rejection to promiseB\nif (canHandle(reason)) {\n// handle the error and recover\nreturn newPromiseOrValue;\n}\nreturn $q.reject(reason);\n});\n```",
        "returns": "{Promise} Returns a promise that was already resolved as rejected with the `reason`.",
        "parentDoc": {
            "module": "ng",
            "name": "$q"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "reject",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "reject ng.method:reject downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "reject",
        "left": 497,
        "level": 2,
        "root": "ng",
        "right": 498
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "Value or a promise",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "when",
        "kind": "function",
        "description": "Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\nThis is useful when you are dealing with an object that might or might not be a promise, or if\nthe promise comes from a source that can't be trusted.",
        "returns": "{Promise} Returns a promise of the passed value or promise",
        "parentDoc": {
            "module": "ng",
            "name": "$q"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "when",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "when ng.method:when downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "when",
        "left": 499,
        "level": 2,
        "root": "ng",
        "right": 500
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array.<Promise>",
                        "type": "array.<promise>"
                    },
                    {
                        "name": "Object.<Promise>",
                        "type": "object.<promise>"
                    }
                ],
                "varName": "promises",
                "altName": null,
                "description": "An array or hash of promises.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "all",
        "kind": "function",
        "description": "Combines multiple promises into a single promise that is resolved when all of the input\npromises are resolved.",
        "returns": "{Promise} Returns a single promise that will be resolved with an array/hash of values,\neach value corresponding to the promise at the same index/key in the `promises` array/hash.\nIf any of the promises is resolved with a rejection, this resulting promise will be rejected\nwith the same rejection value.",
        "parentDoc": {
            "module": "ng",
            "name": "$q"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "all",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "all ng.method:all downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "all",
        "left": 501,
        "level": 2,
        "root": "ng",
        "right": 502
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$rootElement",
        "description": "The root element of Angular application. This is either the element where {@link\nng.directive:ngApp ngApp} was declared or the element passed into\n{@link angular.bootstrap}. The element represents the root element of application. It is also the\nlocation where the application's {@link auto.$injector $injector} service gets\npublished, and can be retrieved using `$rootElement.injector()`.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootElement.js",
        "module": "ng",
        "id": "$rootElement",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$rootElement ng.service:$rootElement downloaded/angular/angular.js-master/src/ng/rootElement.js",
        "sortOn": "$rootElement",
        "left": 504,
        "level": 1,
        "root": "ng",
        "right": 505
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$rootScopeProvider",
        "description": "Provider for the $rootScope service.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$rootScopeProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$rootScopeProvider ng.provider:$rootScopeProvider downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$rootScopeProvider",
        "left": 506,
        "level": 1,
        "root": "ng",
        "right": 509
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "limit",
                "altName": null,
                "description": "The number of digest iterations.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "digestTtl",
        "description": "Sets the number of `$digest` iterations the scope should attempt to execute before giving up and\nassuming that the model is unstable.\n\nThe current default is 10 iterations.\n\nIn complex applications it's possible that the dependencies between `$watch`s will result in\nseveral digest iterations. However if an application needs more than the default 10 digest\niterations for its model to stabilize then you should investigate what is causing the model to\ncontinuously change during the digest.\n\nIncreasing the TTL could have performance implications, so you should not change it without\nproper justification.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScopeProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "digestTtl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "digestTtl ng.method:digestTtl downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "digestTtl",
        "left": 507,
        "level": 2,
        "root": "ng",
        "right": 508
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$rootScope",
        "description": "Every application has a single root {@link ng.$rootScope.Scope scope}.\nAll other scopes are descendant scopes of the root scope. Scopes provide separation\nbetween the model and the view, via a mechanism for watching the model for changes.\nThey also provide an event emission/broadcast and subscription facility. See the\n{@link guide/scope developer guide on scopes}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$rootScope",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$rootScope ng.service:$rootScope downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$rootScope",
        "left": 510,
        "level": 1,
        "root": "ng",
        "right": 511
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object.<string",
                        "type": "object.<string"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "providers",
                "altName": null,
                "description": "Map of service factory which need to be\nprovided for the current scope. Defaults to {@link ng}.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object.<string",
                        "type": "object.<string"
                    }
                ],
                "varName": "instanceCache",
                "altName": null,
                "description": "Provides pre-instantiated services which should\nappend/override services provided by `providers`. This is handy\nwhen unit-testing and having the need to override a default\nservice.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "$rootScope.Scope",
        "description": "A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n{@link auto.$injector $injector}. Child scopes are created using the\n{@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\ncompiled HTML template is executed.)\n\nHere is a simple scope snippet to show how you can interact with the scope.\n```html\n<file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n```\n\n# Inheritance\nA scope can inherit from a parent scope, as in this example:\n```js\n         var parent = $rootScope;\n         var child = parent.$new();\n\n         parent.salutation = \"Hello\";\n         expect(child.salutation).toEqual('Hello');\n\n         child.salutation = \"Welcome\";\n         expect(child.salutation).toEqual('Welcome');\n         expect(parent.salutation).toEqual('Hello');\n```\n\nWhen interacting with `Scope` in tests, additional helper methods are available on the\ninstances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional\ndetails.",
        "returns": "{Object} Newly created scope.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$rootScope.Scope",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "$rootScope.Scope ng.type:$rootScope.Scope downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$rootScope.Scope",
        "left": 512,
        "level": 1,
        "root": "ng",
        "right": 547
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "$id",
        "description": "Unique scope ID (monotonically increasing) useful for debugging.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$id",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "$id ng.property:$id downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$id",
        "left": 513,
        "level": 2,
        "root": "ng",
        "right": 514
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "$parent",
        "description": "Reference to the parent scope.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$parent",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "$parent ng.property:$parent downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$parent",
        "left": 515,
        "level": 2,
        "root": "ng",
        "right": 516
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "$root",
        "description": "Reference to the root scope.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$root",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "$root ng.property:$root downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$root",
        "left": 517,
        "level": 2,
        "root": "ng",
        "right": 518
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "isolate",
                "altName": null,
                "description": "If true, then the scope does not prototypically inherit from the\nparent scope. The scope is isolated, as it can not see parent scope properties.\nWhen creating widgets, it is useful for the widget to not accidentally read parent\nstate.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Scope",
                        "type": "scope"
                    }
                ],
                "varName": "parent",
                "altName": null,
                "description": "The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`\nof the newly created scope. Defaults to `this` scope if not provided.\nThis is used when creating a transclude scope to correctly place it\nin the scope hierarchy while maintaining the correct prototypical\ninheritance.",
                "optional": false,
                "defaultValue": "this"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$new",
        "kind": "function",
        "description": "Creates a new child {@link ng.$rootScope.Scope scope}.\n\nThe parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.\nThe scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n\n{@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is\ndesired for the scope and its child scopes to be permanently detached from the parent and\nthus stop participating in model change detection and listener notification by invoking.",
        "returns": "{Object} The newly created child scope.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$new",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$new ng.method:$new downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$new",
        "left": 519,
        "level": 2,
        "root": "ng",
        "right": 520
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "watchExpression",
                "altName": null,
                "description": "Expression that is evaluated on each\n{@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers\na call to the `listener`.\n\n- `string`: Evaluated as {@link guide/expression expression}\n- `function(scope)`: called with current `scope` as a parameter.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "newVal",
                        "type": "newval"
                    },
                    {
                        "name": "oldVal",
                        "type": "oldval"
                    },
                    {
                        "name": "scope",
                        "type": "scope"
                    }
                ],
                "varName": "listener",
                "altName": null,
                "description": "Callback called whenever the value\nof `watchExpression` changes.\n\n- `newVal` contains the current value of the `watchExpression`\n- `oldVal` contains the previous value of the `watchExpression`\n- `scope` refers to the current scope",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "objectEquality",
                "altName": null,
                "description": "Compare for object equality using {@link angular.equals} instead of\ncomparing for reference equality.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$watch",
        "kind": "function",
        "description": "Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n\n- The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest\n$digest()} and should return the value that will be watched. (Since\n{@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the\n`watchExpression` can execute multiple times per\n{@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n- The `listener` is called only when the value from the current `watchExpression` and the\nprevious call to `watchExpression` are not equal (with the exception of the initial run,\nsee below). Inequality is determined according to reference inequality,\n[strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\nvia the `!==` Javascript operator, unless `objectEquality == true`\n(see next point)\n- When `objectEquality == true`, inequality of the `watchExpression` is determined\naccording to the {@link angular.equals} function. To save the value of the object for\nlater comparison, the {@link angular.copy} function is used. This therefore means that\nwatching complex objects will have adverse memory and performance implications.\n- The watch `listener` may change the model, which may trigger other `listener`s to fire.\nThis is achieved by rerunning the watchers until no changes are detected. The rerun\niteration limit is 10 to prevent an infinite loop deadlock.\n\n\nIf you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\nyou can register a `watchExpression` function with no `listener`. (Since `watchExpression`\ncan execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a\nchange is detected, be prepared for multiple calls to your listener.)\n\nAfter a watcher is registered with the scope, the `listener` fn is called asynchronously\n(via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\nwatcher. In rare cases, this is undesirable because the listener is called when the result\nof `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\ncan compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\nlistener was called due to initialization.\n\n\n\n# Example\n```js\n           // let's assume that scope was dependency injected as the $rootScope\n           var scope = $rootScope;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n\n\n\n           // Using a function as a watchExpression\n           var food;\n           scope.foodCounter = 0;\n           expect(scope.foodCounter).toEqual(0);\n           scope.$watch(\n             // This function returns the value being watched. It is called for each turn of the $digest loop\n             function() { return food; },\n             // This is the change listener, called when the value returned from the above function changes\n             function(newValue, oldValue) {\n               if ( newValue !== oldValue ) {\n                 // Only increment the counter if the value changed\n                 scope.foodCounter = scope.foodCounter + 1;\n               }\n             }\n           );\n           // No digest has been run so the counter will be zero\n           expect(scope.foodCounter).toEqual(0);\n\n           // Run the digest but since food has not changed count will still be zero\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(0);\n\n           // Update food and run digest.  Now the counter will increment\n           food = 'cheeseburger';\n           scope.$digest();\n           expect(scope.foodCounter).toEqual(1);\n\n```",
        "returns": "{function()} Returns a deregistration function for this listener.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$watch",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$watch ng.method:$watch downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$watch",
        "left": 521,
        "level": 2,
        "root": "ng",
        "right": 522
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array.<string|Function(scope)>",
                        "type": "array.<string|function(scope)>"
                    }
                ],
                "varName": "watchExpressions",
                "altName": null,
                "description": "Array of expressions that will be individually\nwatched using {@link ng.$rootScope.Scope#$watch $watch()}",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "newValues",
                        "type": "newvalues"
                    },
                    {
                        "name": "oldValues",
                        "type": "oldvalues"
                    },
                    {
                        "name": "scope",
                        "type": "scope"
                    }
                ],
                "varName": "listener",
                "altName": null,
                "description": "Callback called whenever the return value of any\nexpression in `watchExpressions` changes\nThe `newValues` array contains the current values of the `watchExpressions`, with the indexes matching\nthose of `watchExpression`\nand the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching\nthose of `watchExpression`\nThe `scope` refers to the current scope.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$watchGroup",
        "kind": "function",
        "description": "A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.\nIf any one expression in the collection changes the `listener` is executed.\n\n- The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every\ncall to $digest() to see if any items changes.\n- The `listener` is called whenever any expression in the `watchExpressions` array changes.",
        "returns": "{function()} Returns a de-registration function for all listeners.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$watchGroup",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$watchGroup ng.method:$watchGroup downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$watchGroup",
        "left": 523,
        "level": 2,
        "root": "ng",
        "right": 524
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "function(scope)",
                        "type": "function"
                    }
                ],
                "varName": "obj",
                "altName": null,
                "description": "Evaluated as {@link guide/expression expression}. The\nexpression value should evaluate to an object or an array which is observed on each\n{@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the\ncollection will trigger a call to the `listener`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "newCollection",
                        "type": "newcollection"
                    },
                    {
                        "name": "oldCollection",
                        "type": "oldcollection"
                    },
                    {
                        "name": "scope",
                        "type": "scope"
                    }
                ],
                "varName": "listener",
                "altName": null,
                "description": "a callback function called\nwhen a change is detected.\n- The `newCollection` object is the newly modified data obtained from the `obj` expression\n- The `oldCollection` object is a copy of the former collection data.\nDue to performance considerations, the`oldCollection` value is computed only if the\n`listener` function declares two or more arguments.\n- The `scope` argument refers to the current scope.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$watchCollection",
        "kind": "function",
        "description": "Shallow watches the properties of an object and fires whenever any of the properties change\n(for arrays, this implies watching the array items; for object maps, this implies watching\nthe properties). If a change is detected, the `listener` callback is fired.\n\n- The `obj` collection is observed via standard $watch operation and is examined on every\ncall to $digest() to see if any items have been added, removed, or moved.\n- The `listener` is called whenever anything within the `obj` has changed. Examples include\nadding, removing, and moving items belonging to an object or array.\n\n\n# Example\n```js\n          $scope.names = ['igor', 'matias', 'misko', 'james'];\n          $scope.dataCount = 4;\n\n          $scope.$watchCollection('names', function(newNames, oldNames) {\n            $scope.dataCount = newNames.length;\n          });\n\n          expect($scope.dataCount).toEqual(4);\n          $scope.$digest();\n\n          //still at 4 ... no changes\n          expect($scope.dataCount).toEqual(4);\n\n          $scope.names.pop();\n          $scope.$digest();\n\n          //now there's been a change\n          expect($scope.dataCount).toEqual(3);\n```",
        "returns": "{function()} Returns a de-registration function for this listener. When the\nde-registration function is executed, the internal watch operation is terminated.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$watchCollection",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$watchCollection ng.method:$watchCollection downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$watchCollection",
        "left": 525,
        "level": 2,
        "root": "ng",
        "right": 526
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$digest",
        "kind": "function",
        "description": "Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and\nits children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change\nthe model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}\nuntil no more listeners are firing. This means that it is possible to get into an infinite\nloop. This function will throw `'Maximum iteration limit exceeded.'` if the number of\niterations exceeds 10.\n\nUsually, you don't call `$digest()` directly in\n{@link ng.directive:ngController controllers} or in\n{@link ng.$compileProvider#directive directives}.\nInstead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within\na {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.\n\nIf you want to be notified whenever `$digest()` is called,\nyou can register a `watchExpression` function with\n{@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.\n\nIn unit tests, you may need to call `$digest()` to simulate the scope life cycle.\n\n# Example\n```js\n           var scope = ...;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // the listener is always called during the first $digest loop after it was registered\n           expect(scope.counter).toEqual(1);\n\n           scope.$digest();\n           // but now it will not be called unless the value changes\n           expect(scope.counter).toEqual(1);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(2);\n```",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$digest",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$digest ng.method:$digest downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$digest",
        "left": 527,
        "level": 2,
        "root": "ng",
        "right": 528
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$destroy",
        "eventType": "broadcast on scope being destroyed",
        "description": "Broadcasted when a scope and its children are being destroyed.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$destroy",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$destroy ng.event:$destroy downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$destroy",
        "left": 529,
        "level": 2,
        "root": "ng",
        "right": 530
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$destroy",
        "kind": "function",
        "description": "Removes the current scope (and all of its children) from the parent scope. Removal implies\nthat calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\npropagate to the current scope and its children. Removal also implies that the current\nscope is eligible for garbage collection.\n\nThe `$destroy()` is usually used by directives such as\n{@link ng.directive:ngRepeat ngRepeat} for managing the\nunrolling of the loop.\n\nJust before a scope is destroyed, a `$destroy` event is broadcasted on this scope.\nApplication code can register a `$destroy` event handler that will give it a chance to\nperform any necessary cleanup.\n\nNote that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to\nclean up DOM bindings before an element is removed from the DOM.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$destroy",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$destroy ng.method:$destroy downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$destroy",
        "left": 531,
        "level": 2,
        "root": "ng",
        "right": 532
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "An angular expression to be executed.\n\n- `string`: execute using the rules as defined in  {@link guide/expression expression}.\n- `function(scope)`: execute the function with the current `scope` parameter.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Local variables object, useful for overriding values in scope.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$eval",
        "kind": "function",
        "description": "Executes the `expression` on the current scope and returns the result. Any exceptions in\nthe expression are propagated (uncaught). This is useful when evaluating Angular\nexpressions.\n\n# Example\n```js\n           var scope = ng.$rootScope.Scope();\n           scope.a = 1;\n           scope.b = 2;\n\n           expect(scope.$eval('a+b')).toEqual(3);\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n```",
        "returns": "{*} The result of evaluating the expression.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$eval",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$eval ng.method:$eval downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$eval",
        "left": 533,
        "level": 2,
        "root": "ng",
        "right": 534
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "An angular expression to be executed.\n\n- `string`: execute using the rules as defined in {@link guide/expression expression}.\n- `function(scope)`: execute the function with the current `scope` parameter.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Local variables object, useful for overriding values in scope.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$evalAsync",
        "kind": "function",
        "description": "Executes the expression on the current scope at a later point in time.\n\nThe `$evalAsync` makes no guarantees as to when the `expression` will be executed, only\nthat:\n\n- it will execute after the function that scheduled the evaluation (preferably before DOM\nrendering).\n- at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n`expression` execution.\n\nAny exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\n__Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle\nwill be scheduled. However, it is encouraged to always call code that changes the model\nfrom within an `$apply` call. That includes code evaluated via `$evalAsync`.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$evalAsync",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$evalAsync ng.method:$evalAsync downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$evalAsync",
        "left": 535,
        "level": 2,
        "root": "ng",
        "right": 536
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "exp",
                "altName": null,
                "description": "An angular expression to be executed.\n\n- `string`: execute using the rules as defined in {@link guide/expression expression}.\n- `function(scope)`: execute the function with current `scope` parameter.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$apply",
        "kind": "function",
        "description": "`$apply()` is used to execute an expression in angular from outside of the angular\nframework. (For example from browser DOM events, setTimeout, XHR or third party libraries).\nBecause we are calling into the angular framework we need to perform proper scope life\ncycle of {@link ng.$exceptionHandler exception handling},\n{@link ng.$rootScope.Scope#$digest executing watches}.\n\n## Life cycle\n\n# Pseudo-Code of `$apply()`\n```js\n           function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n```\n\n\nScope's `$apply()` method transitions through the following stages:\n\n1. The {@link guide/expression expression} is executed using the\n{@link ng.$rootScope.Scope#$eval $eval()} method.\n2. Any exceptions from the execution of the expression are forwarded to the\n{@link ng.$exceptionHandler $exceptionHandler} service.\n3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the\nexpression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.",
        "returns": "{*} The result of evaluating the expression.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$apply",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$apply ng.method:$apply downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$apply",
        "left": 537,
        "level": 2,
        "root": "ng",
        "right": 538
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "exp",
                "altName": null,
                "description": "An angular expression to be executed.\n\n- `string`: execute using the rules as defined in {@link guide/expression expression}.\n- `function(scope)`: execute the function with current `scope` parameter.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$applyAsync",
        "kind": "function",
        "description": "Schedule the invocation of $apply to occur at a later time. The actual time difference\nvaries across browsers, but is typically around ~10 milliseconds.\n\nThis can be used to queue up multiple expressions which need to be evaluated in the same\ndigest.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$applyAsync",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$applyAsync ng.method:$applyAsync downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$applyAsync",
        "left": 539,
        "level": 2,
        "root": "ng",
        "right": 540
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Event name to listen on.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    },
                    {
                        "name": "event",
                        "type": "event"
                    },
                    {
                        "name": "args",
                        "type": "args"
                    }
                ],
                "varName": "listener",
                "altName": null,
                "description": "Function to call when the event is emitted.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$on",
        "kind": "function",
        "description": "Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for\ndiscussion of event life cycle.\n\nThe event listener function format is: `function(event, args...)`. The `event` object\npassed into the listener has the following attributes:\n\n- `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or\n`$broadcast`-ed.\n- `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the\nevent propagates through the scope hierarchy, this property is set to null.\n- `name` - `{string}`: name of the event.\n- `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel\nfurther event propagation (available only for events that were `$emit`-ed).\n- `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag\nto true.\n- `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.",
        "returns": "{function()} Returns a deregistration function for this listener.",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$on",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$on ng.method:$on downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$on",
        "left": 541,
        "level": 2,
        "root": "ng",
        "right": 542
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Event name to emit.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "args",
                "altName": null,
                "description": "Optional one or more arguments which will be passed onto the event listeners.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$emit",
        "kind": "function",
        "description": "Dispatches an event `name` upwards through the scope hierarchy notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$emit` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event traverses upwards toward the root scope and calls all\nregistered listeners along the way. The event will stop propagating if one of the listeners\ncancels it.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
        "return": "{Object} Event object (see {@link ng.$rootScope.Scope#$on}).",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$emit",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$emit ng.method:$emit downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$emit",
        "left": 543,
        "level": 2,
        "root": "ng",
        "right": 544
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Event name to broadcast.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "args",
                "altName": null,
                "description": "Optional one or more arguments which will be passed onto the event listeners.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$broadcast",
        "kind": "function",
        "description": "Dispatches an event `name` downwards to all child scopes (and their children) notifying the\nregistered {@link ng.$rootScope.Scope#$on} listeners.\n\nThe event life cycle starts at the scope on which `$broadcast` was called. All\n{@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get\nnotified. Afterwards, the event propagates to all direct and indirect scopes of the current\nscope and calls all registered listeners along the way. The event cannot be canceled.\n\nAny exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\nonto the {@link ng.$exceptionHandler $exceptionHandler} service.",
        "return": "{Object} Event object, see {@link ng.$rootScope.Scope#$on}",
        "parentDoc": {
            "module": "ng",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "module": "ng",
        "id": "$broadcast",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$broadcast ng.method:$broadcast downloaded/angular/angular.js-master/src/ng/rootScope.js",
        "sortOn": "$broadcast",
        "left": 545,
        "level": 2,
        "root": "ng",
        "right": 546
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$sceDelegate",
        "kind": "function",
        "description": "`$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\nContextual Escaping (SCE)} services to AngularJS.\n\nTypically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\nthe `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is\nbecause, while the `$sce` provides numerous shorthand methods, etc., you really only need to\noverride 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\nwork because `$sce` delegates to `$sceDelegate` for these operations.\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n\nThe default instance of `$sceDelegate` should work out of the box with little pain.  While you\ncan override it completely to change the behavior of `$sce`, the common case would\ninvolve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\nyour own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as\ntemplates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist\n$sceDelegateProvider.resourceUrlWhitelist} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "$sceDelegate",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$sceDelegate ng.service:$sceDelegate downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "$sceDelegate",
        "left": 548,
        "level": 1,
        "root": "ng",
        "right": 555
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "The kind of context in which this value is safe for use.  e.g. url,\nresourceUrl, html, js and css.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value that that should be considered trusted/safe.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAs",
        "description": "Returns an object that is trusted by angular for use in specified strict\ncontextual escaping contexts (such as ng-bind-html, ng-include, any src\nattribute interpolation, any dom event binding attribute interpolation\nsuch as for onclick,  etc.) that uses the provided value.\nSee {@link ng.$sce $sce} for enabling strict contextual escaping.",
        "returns": "{*} A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceDelegate"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAs ng.method:trustAs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAs",
        "left": 549,
        "level": 2,
        "root": "ng",
        "right": 550
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\ncall or anything else.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "valueOf",
        "description": "If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`}, returns the value that had been passed to {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n\nIf the passed parameter is not a value that had been returned by {@link\nng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.",
        "returns": "{*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n`value` unchanged.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceDelegate"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "valueOf",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "valueOf ng.method:valueOf downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "valueOf",
        "left": 551,
        "level": 2,
        "root": "ng",
        "right": 552
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "The kind of context in which this value is to be used.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "maybeTrusted",
                "altName": null,
                "description": "The result of a prior {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`} call.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrusted",
        "description": "Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and\nreturns the originally supplied value if the queried context type is a supertype of the\ncreated type.  If this condition isn't satisfied, throws an exception.",
        "returns": "{*} The value the was originally provided to {@link ng.$sceDelegate#trustAs\n`$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceDelegate"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrusted",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrusted ng.method:getTrusted downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrusted",
        "left": 553,
        "level": 2,
        "root": "ng",
        "right": 554
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$sceDelegateProvider",
        "description": "The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n$sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure\nthat the URLs used for sourcing Angular templates are safe.  Refer {@link\nng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and\n{@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}\n\nFor the general details about this service in Angular, read the main page for {@link ng.$sce\nStrict Contextual Escaping (SCE)}.\n\n**Example**:  Consider the following case. <a name=\"example\"></a>\n\n- your app is hosted at url `http://myapp.example.com/`\n- but some of your templates are hosted on other domains you control such as\n`http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.\n- and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n\nHere is what a secure configuration for this scenario might look like:\n\n```\nangular.module('myApp', []).config(function($sceDelegateProvider) {\n$sceDelegateProvider.resourceUrlWhitelist([\n// Allow same origin resource loads.\n'self',\n// Allow loading from our assets domain.  Notice the difference betweenand*.\n'http://srv*.assets.example.com/**'\n]);\n\n// The blacklist overrides the whitelist so the open redirect here is blocked.\n$sceDelegateProvider.resourceUrlBlacklist([\n'http://myapp.example.com/clickThru**'\n]);\n});\n```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "$sceDelegateProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$sceDelegateProvider ng.provider:$sceDelegateProvider downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "$sceDelegateProvider",
        "left": 556,
        "level": 1,
        "root": "ng",
        "right": 561
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "whitelist",
                "altName": null,
                "description": "When provided, replaces the resourceUrlWhitelist with the value\nprovided.  This must be an array or null.  A snapshot of this array is used so further\nchanges to the array are ignored.\n\nFollow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\nallowed in this array.\n\nNote:*an empty whitelist array will block all URLs**!",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "resourceUrlWhitelist",
        "kind": "function",
        "return": "{Array} the currently set whitelist array.\n\nThe*default value** when no whitelist has been explicitly set is `['self']` allowing only\nsame origin resource requests.",
        "description": "Sets/Gets the whitelist of trusted resource URLs.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceDelegateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "resourceUrlWhitelist",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "resourceUrlWhitelist ng.method:resourceUrlWhitelist downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "resourceUrlWhitelist",
        "left": 557,
        "level": 2,
        "root": "ng",
        "right": 558
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Array",
                        "type": "array"
                    }
                ],
                "varName": "blacklist",
                "altName": null,
                "description": "When provided, replaces the resourceUrlBlacklist with the value\nprovided.  This must be an array or null.  A snapshot of this array is used so further\nchanges to the array are ignored.\n\nFollow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\nallowed in this array.\n\nThe typical usage for the blacklist is to*block\n[open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\nthese would otherwise be trusted but actually return content from the redirected domain.\n\nFinally,*the blacklist overrides the whitelist** and has the final say.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "resourceUrlBlacklist",
        "kind": "function",
        "return": "{Array} the currently set blacklist array.\n\nThe*default value** when no whitelist has been explicitly set is the empty array (i.e. there\nis no blacklist.)",
        "description": "Sets/Gets the blacklist of trusted resource URLs.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceDelegateProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "resourceUrlBlacklist",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "resourceUrlBlacklist ng.method:resourceUrlBlacklist downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "resourceUrlBlacklist",
        "left": 559,
        "level": 2,
        "root": "ng",
        "right": 560
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$sceProvider",
        "description": "The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.\n-   enable/disable Strict Contextual Escaping (SCE) in a module\n-   override the default implementation with a custom delegate\n\nRead more about {@link ng.$sce Strict Contextual Escaping (SCE)}.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "$sceProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$sceProvider ng.provider:$sceProvider downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "$sceProvider",
        "left": 562,
        "level": 1,
        "root": "ng",
        "right": 565
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "If provided, then enables/disables SCE.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "enabled",
        "kind": "function",
        "return": "{boolean} true if SCE is enabled, false otherwise.",
        "description": "Enables/disables SCE and returns the current value.",
        "parentDoc": {
            "module": "ng",
            "name": "$sceProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "enabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "enabled ng.method:enabled downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "enabled",
        "left": 563,
        "level": 2,
        "root": "ng",
        "right": 564
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$sce",
        "kind": "function",
        "description": "`$sce` is a service that provides Strict Contextual Escaping services to AngularJS.\n\n# Strict Contextual Escaping\n\nStrict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain\ncontexts to result in a value that is marked as safe to use for that context.  One example of\nsuch a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer\nto these contexts as privileged or SCE contexts.\n\nAs of version 1.2, Angular ships with SCE enabled by default.\n\nNote:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow\none to execute arbitrary javascript by the use of the expression() syntax.  Refer\n<http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.\nYou can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`\nto the top of your HTML document.\n\nSCE assists in writing code in way that (a) is secure by default and (b) makes auditing for\nsecurity vulnerabilities such as XSS, clickjacking, etc. a lot easier.\n\nHere's an example of a binding in a privileged context:\n\n```\n<input ng-model=\"userHtml\">\n<div ng-bind-html=\"userHtml\"></div>\n```\n\nNotice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE\ndisabled, this application allows the user to render arbitrary HTML into the DIV.\nIn a more realistic example, one may be rendering user comments, blog articles, etc. via\nbindings.  (HTML is just one example of a context where rendering user controlled input creates\nsecurity vulnerabilities.)\n\nFor the case of HTML, you might use a library, either on the client side, or on the server side,\nto sanitize unsafe HTML before binding to the value and rendering it in the document.\n\nHow would you ensure that every place that used these types of bindings was bound to a value that\nwas sanitized by your library (or returned as safe for rendering by your server?)  How can you\nensure that you didn't accidentally delete the line that sanitized the value, or renamed some\nproperties/fields and forgot to update the binding to the sanitized value?\n\nTo be secure by default, you want to ensure that any such bindings are disallowed unless you can\ndetermine that something explicitly says it's safe to use a value for binding in that\ncontext.  You can then audit your code (a simple grep would do) to ensure that this is only done\nfor those values that you can easily tell are safe - because they were received from your server,\nsanitized by your library, etc.  You can organize your codebase to help with this - perhaps\nallowing only the files in a specific directory to do this.  Ensuring that the internal API\nexposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.\n\nIn the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}\n(and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to\nobtain values that will be accepted by SCE / privileged contexts.\n\n\n## How does it work?\n\nIn privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted\n$sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link\nng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the\n{@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.\n\nAs an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link\nng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly\nsimplified):\n\n```\nvar ngBindHtmlDirective = ['$sce', function($sce) {\nreturn function(scope, element, attr) {\nscope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {\nelement.html(value || '');\n});\n};\n}];\n```\n\n## Impact on loading templates\n\nThis applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as\n`templateUrl`'s specified by {@link guide/directive directives}.\n\nBy default, Angular only loads templates from the same domain and protocol as the application\ndocument.  This is done by calling {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or\nprotocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist\nthem} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.\n\n*Please note*:\nThe browser's\n[Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)\nand [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)\npolicy apply in addition to this and may further restrict whether the template is successfully\nloaded.  This means that without the right CORS policy, loading templates from a different domain\nwon't work on all browsers.  Also, loading templates from `file://` URL does not work on some\nbrowsers.\n\n## This feels like too much overhead\n\nIt's important to remember that SCE only applies to interpolation expressions.\n\nIf your expressions are constant literals, they're automatically trusted and you don't need to\ncall `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.\n`<div ng-bind-html=\"'<b>implicitly trusted</b>'\"></div>`) just works.\n\nAdditionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them\nthrough {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.\n\nThe included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load\ntemplates in `ng-include` from your application's domain without having to even know about SCE.\nIt blocks loading templates from other domains or loading templates over http from an https\nserved document.  You can change these by setting your own custom {@link\nng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link\nng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.\n\nThis significantly reduces the overhead.  It is far easier to pay the small overhead and have an\napplication that's secure and can be audited to verify that with much more ease than bolting\nsecurity onto an application later.\n\n<a name=\"contexts\"></a>\n## What trusted context types are supported?\n\n| Context             | Notes          |\n|---------------------|----------------|\n| `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |\n| `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |\n| `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |\n| `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |\n| `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |\n\n## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name=\"resourceUrlPatternItem\"></a>\n\nEach element in these arrays must be one of the following:\n\n-*'self'**\n- The special*string**, `'self'`, can be used to match against all URLs of the*same\ndomain** as the application document using the*same protocol**.\n-*String** (except the special value `'self'`)\n- The string is matched against the fullnormalized / absolute URL* of the resource\nbeing tested (substring matches are not good enough.)\n- There are exactly*two wildcard sequences** - `*` and `**`.  All other characters\nmatch themselves.\n- `*`: matches zero or more occurrences of any character other than one of the following 6\ncharacters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use\nin a whitelist.\n- `**`: matches zero or more occurrences ofany* character.  As such, it's not\nnot appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.\nhttp://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might\nnot have been the intention.)  Its usage at the very end of the path is ok.  (e.g.\nhttp://foo.example.com/templates/**).\n-*RegExp** (*see caveat below*)\n-Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax\n(and all the inevitable escaping) makes themharder to maintain*.  It's easy to\naccidentally introduce a bug when one updates a complex expression (imho, all regexes should\nhave good test coverage.).  For instance, the use of `.` in the regex is correct only in a\nsmall number of cases.  A `.` character in the regex used when matching the scheme or a\nsubdomain could be matched against a `:` or literal `.` that was likely not intended.   It\nis highly recommended to use the string patterns and only fall back to regular expressions\nif they as a last resort.\n- The regular expression must be an instance of RegExp (i.e. not a string.)  It is\nmatched against the*entire**normalized / absolute URL* of the resource being tested\n(even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags\npresent on the RegExp (such as multiline, global, ignoreCase) are ignored.\n- If you are generating your JavaScript from some other templating engine (not\nrecommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),\nremember to escape your regular expression (and be aware that you might need more than\none level of escaping depending on your templating engine and the way you interpolated\nthe value.)  Do make use of your platform's escaping mechanism as it might be good\nenough before coding your own.  e.g. Ruby has\n[Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)\nand Python has [re.escape](http://docs.python.org/library/re.html#re.escape).\nJavascript lacks a similar built in function for escaping.  Take a look at Google\nClosure library's [goog.string.regExpEscape(s)](\nhttp://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).\n\nRefer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.\n\n## Show me an example using SCE.\n\n<example module=\"mySceApp\" deps=\"angular-sanitize.js\">\n<file name=\"index.html\">\n<div ng-controller=\"AppController as myCtrl\">\n<i ng-bind-html=\"myCtrl.explicitlyTrustedHtml\" id=\"explicitlyTrustedHtml\"></i><br><br>\n<b>User comments</b><br>\nBy default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when\n$sanitize is available.  If $sanitize isn't available, this results in an error instead of an\nexploit.\n<div class=\"well\">\n<div ng-repeat=\"userComment in myCtrl.userComments\">\n<b>{{userComment.name}}</b>:\n<span ng-bind-html=\"userComment.htmlComment\" class=\"htmlComment\"></span>\n<br>\n</div>\n</div>\n</div>\n</file>\n\n<file name=\"script.js\">\nangular.module('mySceApp', ['ngSanitize'])\n.controller('AppController', ['$http', '$templateCache', '$sce',\nfunction($http, $templateCache, $sce) {\nvar self = this;\n$http.get(\"test_data.json\", {cache: $templateCache}).success(function(userComments) {\nself.userComments = userComments;\n});\nself.explicitlyTrustedHtml = $sce.trustAsHtml(\n'<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n'sanitization.&quot;\">Hover over this text.</span>');\n}]);\n</file>\n\n<file name=\"test_data.json\">\n[\n{ \"name\": \"Alice\",\n\"htmlComment\":\n\"<span onmouseover='this.textContent=\\\"PWN3D!\\\"'>Is <i>anyone</i> reading this?</span>\"\n},\n{ \"name\": \"Bob\",\n\"htmlComment\": \"<i>Yes!</i>  Am I the only other one?\"\n}\n]\n</file>\n\n<file name=\"protractor.js\" type=\"protractor\">\ndescribe('SCE doc demo', function() {\nit('should sanitize untrusted values', function() {\nexpect(element.all(by.css('.htmlComment')).first().getInnerHtml())\n.toBe('<span>Is <i>anyone</i> reading this?</span>');\n});\n\nit('should NOT sanitize explicitly trusted values', function() {\nexpect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(\n'<span onmouseover=\"this.textContent=&quot;Explicitly trusted HTML bypasses ' +\n'sanitization.&quot;\">Hover over this text.</span>');\n});\n});\n</file>\n</example>\n\n\n\n## Can I disable SCE completely?\n\nYes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits\nfor little coding overhead.  It will be much harder to take an SCE disabled application and\neither secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE\nfor cases where you have a lot of existing code that was written before SCE was introduced and\nyou're migrating them a module at a time.\n\nThat said, here's how you can completely disable SCE:\n\n```\nangular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {\n// Completely disable SCE.  For demonstration purposes only!\n// Do not use in new projects.\n$sceProvider.enabled(false);\n});\n```",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "$sce",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$sce ng.service:$sce downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "$sce",
        "left": 566,
        "level": 1,
        "root": "ng",
        "right": 603
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "isEnabled",
        "kind": "function",
        "return": "{Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you\nhave to do it at module config time on {@link ng.$sceProvider $sceProvider}.",
        "description": "Returns a boolean indicating if SCE is enabled.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "isEnabled",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "isEnabled ng.method:isEnabled downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "isEnabled",
        "left": 567,
        "level": 2,
        "root": "ng",
        "right": 568
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "The kind of SCE context in which this result will be used.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAs",
        "description": "Converts Angular {@link guide/expression expression} into a function.  This is like {@link\nng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\nwraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n*result*)}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAs ng.method:parseAs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAs",
        "left": 569,
        "level": 2,
        "root": "ng",
        "right": 570
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "The kind of context in which this value is safe for use.  e.g. url,\nresourceUrl, html, js and css.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value that that should be considered trusted/safe.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAs",
        "description": "Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,\nreturns an object that is trusted by angular for use in specified strict contextual\nescaping contexts (such as ng-bind-html, ng-include, any src attribute\ninterpolation, any dom event binding attribute interpolation such as for onclick,  etc.)\nthat uses the provided value.  See{@link ng.$sce $sce} for enabling strict contextual\nescaping.",
        "returns": "{*} A value that can be used to stand in for the provided `value` in places\nwhere Angular expects a $sce.trustAs() return value.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAs ng.method:trustAs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAs",
        "left": 571,
        "level": 2,
        "root": "ng",
        "right": 572
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to trustAs.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAsHtml",
        "description": "Shorthand method.  `$sce.trustAsHtml(value)` →\n{@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}",
        "returns": "{*} An object that can be passed to {@link ng.$sce#getTrustedHtml\n$sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives\nonly accept expressions that are either literal constants or are the\nreturn value of {@link ng.$sce#trustAs $sce.trustAs}.)",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAsHtml",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAsHtml ng.method:trustAsHtml downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAsHtml",
        "left": 573,
        "level": 2,
        "root": "ng",
        "right": 574
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to trustAs.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAsUrl",
        "description": "Shorthand method.  `$sce.trustAsUrl(value)` →\n{@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}",
        "returns": "{*} An object that can be passed to {@link ng.$sce#getTrustedUrl\n$sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives\nonly accept expressions that are either literal constants or are the\nreturn value of {@link ng.$sce#trustAs $sce.trustAs}.)",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAsUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAsUrl ng.method:trustAsUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAsUrl",
        "left": 575,
        "level": 2,
        "root": "ng",
        "right": 576
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to trustAs.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAsResourceUrl",
        "description": "Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n{@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}",
        "returns": "{*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl\n$sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives\nonly accept expressions that are either literal constants or are the return\nvalue of {@link ng.$sce#trustAs $sce.trustAs}.)",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAsResourceUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAsResourceUrl ng.method:trustAsResourceUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAsResourceUrl",
        "left": 577,
        "level": 2,
        "root": "ng",
        "right": 578
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to trustAs.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "trustAsJs",
        "description": "Shorthand method.  `$sce.trustAsJs(value)` →\n{@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}",
        "returns": "{*} An object that can be passed to {@link ng.$sce#getTrustedJs\n$sce.getTrustedJs(value)} to obtain the original value.  (privileged directives\nonly accept expressions that are either literal constants or are the\nreturn value of {@link ng.$sce#trustAs $sce.trustAs}.)",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "trustAsJs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "trustAsJs ng.method:trustAsJs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "trustAsJs",
        "left": 579,
        "level": 2,
        "root": "ng",
        "right": 580
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "type",
                "altName": null,
                "description": "The kind of context in which this value is to be used.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "maybeTrusted",
                "altName": null,
                "description": "The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}\ncall.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrusted",
        "description": "Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\ntakes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the\noriginally supplied value if the queried context type is a supertype of the created type.\nIf this condition isn't satisfied, throws an exception.",
        "returns": "{*} The value the was originally provided to\n{@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.\nOtherwise, throws an exception.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrusted",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrusted ng.method:getTrusted downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrusted",
        "left": 581,
        "level": 2,
        "root": "ng",
        "right": 582
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to pass to `$sce.getTrusted`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrustedHtml",
        "description": "Shorthand method.  `$sce.getTrustedHtml(value)` →\n{@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}",
        "returns": "{*} The return value of `$sce.getTrusted($sce.HTML, value)`",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrustedHtml",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrustedHtml ng.method:getTrustedHtml downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrustedHtml",
        "left": 583,
        "level": 2,
        "root": "ng",
        "right": 584
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to pass to `$sce.getTrusted`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrustedCss",
        "description": "Shorthand method.  `$sce.getTrustedCss(value)` →\n{@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}",
        "returns": "{*} The return value of `$sce.getTrusted($sce.CSS, value)`",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrustedCss",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrustedCss ng.method:getTrustedCss downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrustedCss",
        "left": 585,
        "level": 2,
        "root": "ng",
        "right": 586
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to pass to `$sce.getTrusted`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrustedUrl",
        "description": "Shorthand method.  `$sce.getTrustedUrl(value)` →\n{@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}",
        "returns": "{*} The return value of `$sce.getTrusted($sce.URL, value)`",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrustedUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrustedUrl ng.method:getTrustedUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrustedUrl",
        "left": 587,
        "level": 2,
        "root": "ng",
        "right": 588
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to pass to `$sceDelegate.getTrusted`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrustedResourceUrl",
        "description": "Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n{@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}",
        "returns": "{*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrustedResourceUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrustedResourceUrl ng.method:getTrustedResourceUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrustedResourceUrl",
        "left": 589,
        "level": 2,
        "root": "ng",
        "right": 590
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value to pass to `$sce.getTrusted`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getTrustedJs",
        "description": "Shorthand method.  `$sce.getTrustedJs(value)` →\n{@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}",
        "returns": "{*} The return value of `$sce.getTrusted($sce.JS, value)`",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "getTrustedJs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getTrustedJs ng.method:getTrustedJs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "getTrustedJs",
        "left": 591,
        "level": 2,
        "root": "ng",
        "right": 592
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAsHtml",
        "description": "Shorthand method.  `$sce.parseAsHtml(expression string)` →\n{@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAsHtml",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAsHtml ng.method:parseAsHtml downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAsHtml",
        "left": 593,
        "level": 2,
        "root": "ng",
        "right": 594
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAsCss",
        "description": "Shorthand method.  `$sce.parseAsCss(value)` →\n{@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAsCss",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAsCss ng.method:parseAsCss downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAsCss",
        "left": 595,
        "level": 2,
        "root": "ng",
        "right": 596
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAsUrl",
        "description": "Shorthand method.  `$sce.parseAsUrl(value)` →\n{@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAsUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAsUrl ng.method:parseAsUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAsUrl",
        "left": 597,
        "level": 2,
        "root": "ng",
        "right": 598
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAsResourceUrl",
        "description": "Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n{@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAsResourceUrl",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAsResourceUrl ng.method:parseAsResourceUrl downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAsResourceUrl",
        "left": 599,
        "level": 2,
        "root": "ng",
        "right": 600
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "expression",
                "altName": null,
                "description": "String expression to compile.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "parseAsJs",
        "description": "Shorthand method.  `$sce.parseAsJs(value)` →\n{@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}",
        "returns": "{function(context, locals)} a function which represents the compiled expression:\n\n* `context` – `{object}` – an object against which any expressions embedded in the strings\nare evaluated against (typically a scope object).\n* `locals` – `{object=}` – local variables context object, useful for overriding values in\n`context`.",
        "parentDoc": {
            "module": "ng",
            "name": "$sce"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/sce.js",
        "module": "ng",
        "id": "parseAsJs",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "parseAsJs ng.method:parseAsJs downloaded/angular/angular.js-master/src/ng/sce.js",
        "sortOn": "parseAsJs",
        "left": 601,
        "level": 2,
        "root": "ng",
        "right": 602
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "tpl",
                "altName": null,
                "description": "The HTTP request template URL",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "ignoreRequestError",
                "altName": null,
                "description": "Whether or not to ignore the exception when the request fails or the template is empty",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$templateRequest",
        "description": "The `$templateRequest` service downloads the provided template using `$http` and, upon success,\nstores the contents inside of `$templateCache`. If the HTTP request fails or the response data\nof the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted\nby setting the 2nd parameter of the function to true).",
        "return": "{Promise} a promise for the HTTP response data of the given URL.",
        "property": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "totalPendingRequests",
                "altName": null,
                "description": "total amount of pending template requests being downloaded.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/templateRequest.js",
        "module": "ng",
        "id": "$templateRequest",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$templateRequest ng.service:$templateRequest downloaded/angular/angular.js-master/src/ng/templateRequest.js",
        "sortOn": "$templateRequest",
        "left": 604,
        "level": 1,
        "root": "ng",
        "right": 605
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "A function, whose execution should be delayed.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "delay",
                "altName": null,
                "description": "Delay in milliseconds.",
                "optional": true,
                "defaultValue": "0"
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "invokeApply",
                "altName": null,
                "description": "If set to `false` skips model dirty checking, otherwise\nwill invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                "optional": true,
                "defaultValue": "true"
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "Pass",
                "altName": null,
                "description": "additional parameters to the executed function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$timeout",
        "description": "Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\nblock and delegates any exceptions to\n{@link ng.$exceptionHandler $exceptionHandler} service.\n\nThe return value of calling `$timeout` is a promise, which will be resolved when\nthe delay has passed and the timeout function, if provided, is executed.\n\nTo cancel a timeout request, call `$timeout.cancel(promise)`.\n\nIn tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\nsynchronously flush the queue of deferred functions.\n\nIf you only want a promise that will be resolved after some specified delay\nthen you can call `$timeout` without the `fn` function.",
        "returns": "{Promise} Promise that will be resolved when the timeout is reached. The value this\npromise will be resolved with is the return value of the `fn` function.",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/timeout.js",
        "module": "ng",
        "id": "$timeout",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$timeout ng.service:$timeout downloaded/angular/angular.js-master/src/ng/timeout.js",
        "sortOn": "$timeout",
        "left": 606,
        "level": 1,
        "root": "ng",
        "right": 609
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Promise",
                        "type": "promise"
                    }
                ],
                "varName": "promise",
                "altName": null,
                "description": "Promise returned by the `$timeout` function.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "cancel",
        "description": "Cancels a task associated with the `promise`. As a result of this, the promise will be\nresolved with a rejection.",
        "returns": "{boolean} Returns `true` if the task hasn't executed yet and was successfully\ncanceled.",
        "parentDoc": {
            "module": "ng",
            "name": "$timeout"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/timeout.js",
        "module": "ng",
        "id": "cancel",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "cancel ng.method:cancel downloaded/angular/angular.js-master/src/ng/timeout.js",
        "sortOn": "cancel",
        "left": 607,
        "level": 2,
        "root": "ng",
        "right": 608
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$window",
        "description": "A reference to the browser's `window` object. While `window`\nis globally available in JavaScript, it causes testability problems, because\nit is a global variable. In angular we always refer to it through the\n`$window` service, so it may be overridden, removed or mocked for testing.\n\nExpressions, like the one defined for the `ngClick` directive in the example\nbelow, are evaluated with respect to the current scope.  Therefore, there is\nno risk of inadvertently coding in a dependency on a global value in such an\nexpression.",
        "example": "<example module=\"windowExample\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('windowExample', [])\n           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {\n             $scope.greeting = 'Hello, World!';\n             $scope.doGreeting = function(greeting) {\n               $window.alert(greeting);\n             };\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n         <input type=\"text\" ng-model=\"greeting\" />\n         <button ng-click=\"doGreeting(greeting)\">ALERT</button>\n       </div>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n      it('should display the greeting in the input box', function() {\n       element(by.model('greeting')).sendKeys('Hello, E2E Tests');\n       // If we click the button it will block the test runner\n       // element(':button').click();\n      });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ng",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/window.js",
        "module": "ng",
        "id": "$window",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$window ng.service:$window downloaded/angular/angular.js-master/src/ng/window.js",
        "sortOn": "$window",
        "left": 610,
        "level": 1,
        "root": "ng",
        "right": 611
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "auto",
        "description": "Implicit module which gets automatically added to each {@link auto.$injector $injector}.",
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "auto",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "auto auto.module:auto downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "auto",
        "left": 1,
        "level": 0,
        "root": "auto",
        "right": 28
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$injector",
        "description": "`$injector` is used to retrieve object instances as defined by\n{@link auto.$provide provider}, instantiate types, invoke methods,\nand load modules.\n\nThe following always holds true:\n\n```js\nvar $injector = angular.injector();\nexpect($injector.get('$injector')).toBe($injector);\nexpect($injector.invoke(function($injector) {\nreturn $injector;\n})).toBe($injector);\n```\n\n# Injection Function Annotation\n\nJavaScript does not have annotations, and annotations are needed for dependency injection. The\nfollowing are all valid ways of annotating function with injection arguments and are equivalent.\n\n```js\n// inferred (only works if code not minified/obfuscated)\n$injector.invoke(function(serviceA){});\n\n// annotated\nfunction explicit(serviceA) {};\nexplicit.$inject = ['serviceA'];\n$injector.invoke(explicit);\n\n// inline\n$injector.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Inference\n\nIn JavaScript calling `toString()` on a function returns the function definition. The definition\ncan then be parsed and the function arguments can be extracted. This method of discovering\nannotations is disallowed when the injector is in strict mode.\n*NOTE:* This does not work with minification, and obfuscation tools since these tools change the\nargument names.\n\n## `$inject` Annotation\nBy adding an `$inject` property onto a function the injection parameters can be specified.\n\n## Inline\nAs an array of injection names, where the last item in the array is the function to call.",
        "parentDoc": {
            "module": "auto",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "$injector",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$injector auto.service:$injector downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "$injector",
        "left": 2,
        "level": 1,
        "root": "auto",
        "right": 13
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the instance to retrieve.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "caller",
                "altName": null,
                "description": "An optional string to provide the origin of the function call for error messages.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "description": "Return an instance of the service.",
        "return": "{*} The instance.",
        "parentDoc": {
            "module": "auto",
            "name": "$injector"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get auto.method:get downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "get",
        "left": 3,
        "level": 2,
        "root": "auto",
        "right": 4
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "The function to invoke. Function parameters are injected according to the\n{@link guide/di $inject Annotation} rules.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "self",
                "altName": null,
                "description": "The `this` for the invoked method.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Optional object. If preset then any argument names are read from this\nobject first, before the `$injector` is consulted.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "invoke",
        "description": "Invoke the method and supply the method arguments from the `$injector`.",
        "returns": "{*} the value returned by the invoked `fn` function.",
        "parentDoc": {
            "module": "auto",
            "name": "$injector"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "invoke",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "invoke auto.method:invoke downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "invoke",
        "left": 5,
        "level": 2,
        "root": "auto",
        "right": 6
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "Name of the service to query.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "has",
        "description": "Allows the user to query if the particular service exists.",
        "returns": "{boolean} `true` if injector has given service.",
        "parentDoc": {
            "module": "auto",
            "name": "$injector"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "has",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "has auto.method:has downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "has",
        "left": 7,
        "level": 2,
        "root": "auto",
        "right": 8
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "Type",
                "altName": null,
                "description": "Annotated constructor function.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Optional object. If preset then any argument names are read from this\nobject first, before the `$injector` is consulted.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "instantiate",
        "description": "Create a new instance of JS type. The method takes a constructor function, invokes the new\noperator, and supplies all of the arguments to the constructor function as specified by the\nconstructor annotation.",
        "returns": "{Object} new instance of `Type`.",
        "parentDoc": {
            "module": "auto",
            "name": "$injector"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "instantiate",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "instantiate auto.method:instantiate downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "instantiate",
        "left": 9,
        "level": 2,
        "root": "auto",
        "right": 10
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "Array.<string|Function>",
                        "type": "array.<string|function>"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "Function for which dependent service names need to\nbe retrieved as described above.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "strictDi",
                "altName": null,
                "description": "Disallow argument name annotation inference.",
                "optional": true,
                "defaultValue": "false"
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "annotate",
        "description": "Returns an array of service names which the function is requesting for injection. This API is\nused by the injector to determine which services need to be injected into the function when the\nfunction is invoked. There are three ways in which the function can be annotated with the needed\ndependencies.\n\n# Argument names\n\nThe simplest form is to extract the dependencies from the arguments of the function. This is done\nby converting the function into a string using `toString()` method and extracting the argument\nnames.\n```js\n// Given\nfunction MyController($scope, $route) {\n// ...\n}\n\n// Then\nexpect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\nYou can disallow this method by using strict injection mode.\n\nThis method does not work with code minification / obfuscation. For this reason the following\nannotation strategies are supported.\n\n# The `$inject` property\n\nIf a function has an `$inject` property and its value is an array of strings, then the strings\nrepresent names of services to be injected into the function.\n```js\n// Given\nvar MyController = function(obfuscatedScope, obfuscatedRoute) {\n// ...\n}\n// Define function dependencies\nMyController['$inject'] = ['$scope', '$route'];\n\n// Then\nexpect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n```\n\n# The array notation\n\nIt is often desirable to inline Injected functions and that's when setting the `$inject` property\nis very inconvenient. In these situations using the array notation to specify the dependencies in\na way that survives minification is a better choice:\n\n```js\n// We wish to write this (not minification / obfuscation safe)\ninjector.invoke(function($compile, $rootScope) {\n// ...\n});\n\n// We are forced to write break inlining\nvar tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n// ...\n};\ntmpFn.$inject = ['$compile', '$rootScope'];\ninjector.invoke(tmpFn);\n\n// To better support inline function the inline annotation is supported\ninjector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n// ...\n}]);\n\n// Therefore\nexpect(injector.annotate(\n['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n).toEqual(['$compile', '$rootScope']);\n```",
        "returns": "{Array.<string>} The names of the services which the function requires.",
        "parentDoc": {
            "module": "auto",
            "name": "$injector"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "annotate",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "annotate auto.method:annotate downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "annotate",
        "left": 11,
        "level": 2,
        "root": "auto",
        "right": 12
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$provide",
        "description": "The {@link auto.$provide $provide} service has a number of methods for registering components\nwith the {@link auto.$injector $injector}. Many of these functions are also exposed on\n{@link angular.Module}.\n\nAn Angular*service** is a singleton object created by a*service factory**.  These*service\nfactories** are functions which, in turn, are created by a*service provider**.\nThe*service providers** are constructor functions. When instantiated they must contain a\nproperty called `$get`, which holds the*service factory** function.\n\nWhen you request a service, the {@link auto.$injector $injector} is responsible for finding the\ncorrect*service provider**, instantiating it and then calling its `$get`*service factory**\nfunction to get the instance of the*service**.\n\nOften services have no configuration options and there is no need to add methods to the service\nprovider.  The provider will be no more than a constructor function with a `$get` property. For\nthese cases the {@link auto.$provide $provide} service has additional helper methods to register\nservices without specifying a provider.\n\n* {@link auto.$provide#provider provider(provider)} - registers a*service provider** with the\n{@link auto.$injector $injector}\n* {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by\nproviders and services.\n* {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by\nservices, not providers.\n* {@link auto.$provide#factory factory(fn)} - registers a service*factory function**, `fn`,\nthat will be wrapped in a*service provider** object, whose `$get` property will contain the\ngiven factory function.\n* {@link auto.$provide#service service(class)} - registers a*constructor function**, `class`\nthat will be wrapped in a*service provider** object, whose `$get` property will instantiate\na new object using the given constructor function.\n\nSee the individual methods for more information and examples.",
        "parentDoc": {
            "module": "auto",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "$provide",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$provide auto.service:$provide downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "$provide",
        "left": 14,
        "level": 1,
        "root": "auto",
        "right": 27
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the instance. NOTE: the provider will be available under `name +\n                        'Provider'` key.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "provider",
                "altName": null,
                "description": "If the provider is:\n\n- `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n{@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.\n- `Constructor`: a new instance of the provider will be created using\n{@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "provider",
        "description": "Register a*provider function** with the {@link auto.$injector $injector}. Provider functions\nare constructor functions, whose instances are responsible for \"providing\" a factory for a\nservice.\n\nService provider names start with the name of the service they provide followed by `Provider`.\nFor example, the {@link ng.$log $log} service has a provider called\n{@link ng.$logProvider $logProvider}.\n\nService provider objects can have additional methods which allow configuration of the provider\nand its service. Importantly, you can configure what kind of service is created by the `$get`\nmethod, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a\nmethod {@link ng.$logProvider#debugEnabled debugEnabled}\nwhich lets you specify whether the {@link ng.$log $log} service will log debug messages to the\nconsole or not.",
        "returns": "{Object} registered provider instance",
        "example": "The following example shows how to create a simple event tracking service and register it using\n{@link auto.$provide#provider $provide.provider()}.\n\n```js\n// Define the eventTracker provider\nfunction EventTrackerProvider() {\nvar trackingUrl = '/track';\n\n// A provider method for configuring where the tracked events should been saved\nthis.setTrackingUrl = function(url) {\ntrackingUrl = url;\n};\n\n// The service factory function\nthis.$get = ['$http', function($http) {\nvar trackedEvents = {};\nreturn {\n// Call this to track an event\nevent: function(event) {\nvar count = trackedEvents[event] || 0;\ncount += 1;\ntrackedEvents[event] = count;\nreturn count;\n},\n// Call this to save the tracked events to the trackingUrl\nsave: function() {\n$http.post(trackingUrl, trackedEvents);\n}\n};\n}];\n}\n\ndescribe('eventTracker', function() {\nvar postSpy;\n\nbeforeEach(module(function($provide) {\n// Register the eventTracker provider\n$provide.provider('eventTracker', EventTrackerProvider);\n}));\n\nbeforeEach(module(function(eventTrackerProvider) {\n// Configure eventTracker provider\neventTrackerProvider.setTrackingUrl('/custom-track');\n}));\n\nit('tracks events', inject(function(eventTracker) {\nexpect(eventTracker.event('login')).toEqual(1);\nexpect(eventTracker.event('login')).toEqual(2);\n}));\n\nit('saves to the tracking url', inject(function(eventTracker, $http) {\npostSpy = spyOn($http, 'post');\neventTracker.event('login');\neventTracker.save();\nexpect(postSpy).toHaveBeenCalled();\nexpect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');\nexpect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');\nexpect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });\n}));\n});\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "provider",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "provider auto.method:provider downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "provider",
        "left": 15,
        "level": 2,
        "root": "auto",
        "right": 16
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the instance.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "getFn",
                "altName": null,
                "description": "The $getFn for the instance creation. Internally this is a short hand\nfor `$provide.provider(name, {$get: $getFn})`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "factory",
        "description": "Register a*service factory**, which will be called to return the service instance.\nThis is short for registering a service where its provider consists of only a `$get` property,\nwhich is the given service factory function.\nYou should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to\nconfigure your service in a provider.",
        "returns": "{Object} registered provider instance",
        "example": "Here is an example of registering a service\n```js\n$provide.factory('ping', ['$http', function($http) {\nreturn function ping() {\nreturn $http.send('/ping');\n};\n}]);\n```\nYou would then inject and use this service like this:\n```js\nsomeModule.controller('Ctrl', ['ping', function(ping) {\nping();\n}]);\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "factory",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "factory auto.method:factory downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "factory",
        "left": 17,
        "level": 2,
        "root": "auto",
        "right": 18
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the instance.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "A class (constructor function) that will be instantiated.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "service",
        "description": "Register a*service constructor**, which will be invoked with `new` to create the service\ninstance.\nThis is short for registering a service where its provider's `$get` property is the service\nconstructor function that will be used to instantiate the service instance.\n\nYou should use {@link auto.$provide#service $provide.service(class)} if you define your service\nas a type/class.",
        "returns": "{Object} registered provider instance",
        "example": "Here is an example of registering a service using\n{@link auto.$provide#service $provide.service(class)}.\n```js\nvar Ping = function($http) {\nthis.$http = $http;\n};\n\nPing.$inject = ['$http'];\n\nPing.prototype.send = function() {\nreturn this.$http.get('/ping');\n};\n$provide.service('ping', Ping);\n```\nYou would then inject and use this service like this:\n```js\nsomeModule.controller('Ctrl', ['ping', function(ping) {\nping.send();\n}]);\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "service",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "service auto.method:service downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "service",
        "left": 19,
        "level": 2,
        "root": "auto",
        "right": 20
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the instance.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The value.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "value",
        "description": "Register a*value service** with the {@link auto.$injector $injector}, such as a string, a\nnumber, an array, an object or a function.  This is short for registering a service where its\nprovider's `$get` property is a factory function that takes no arguments and returns the*value\nservice**.\n\nValue services are similar to constant services, except that they cannot be injected into a\nmodule configuration function (see {@link angular.Module#config}) but they can be overridden by\nan Angular\n{@link auto.$provide#decorator decorator}.",
        "returns": "{Object} registered provider instance",
        "example": "Here are some examples of creating value services.\n```js\n$provide.value('ADMIN_USER', 'admin');\n\n$provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });\n\n$provide.value('halfOf', function(value) {\nreturn value / 2;\n});\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "value",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "value auto.method:value downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "value",
        "left": 21,
        "level": 2,
        "root": "auto",
        "right": 22
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the constant.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "value",
                "altName": null,
                "description": "The constant value.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "constant",
        "description": "Register a*constant service**, such as a string, a number, an array, an object or a function,\nwith the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be\ninjected into a module configuration function (see {@link angular.Module#config}) and it cannot\nbe overridden by an Angular {@link auto.$provide#decorator decorator}.",
        "returns": "{Object} registered instance",
        "example": "Here a some examples of creating constants:\n```js\n$provide.constant('SHARD_HEIGHT', 306);\n\n$provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);\n\n$provide.constant('double', function(value) {\nreturn value2;\n});\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "constant",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "constant auto.method:constant downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "constant",
        "left": 23,
        "level": 2,
        "root": "auto",
        "right": 24
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "name",
                "altName": null,
                "description": "The name of the service to decorate.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "decorator",
                "altName": null,
                "description": "This function will be invoked when the service needs to be\ninstantiated and should return the decorated service instance. The function is called using\nthe {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.\nLocal injection arguments:\n\n* `$delegate` - The original service instance, which can be monkey patched, configured,\ndecorated or delegated to.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "decorator",
        "description": "Register a*service decorator** with the {@link auto.$injector $injector}. A service decorator\nintercepts the creation of a service, allowing it to override or modify the behaviour of the\nservice. The object returned by the decorator may be the original service, or a new service\nobject which replaces or wraps and delegates to the original service.",
        "example": "Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting\ncalls to {@link ng.$log#error $log.warn()}.\n```js\n$provide.decorator('$log', ['$delegate', function($delegate) {\n$delegate.warn = $delegate.error;\nreturn $delegate;\n}]);\n```",
        "parentDoc": {
            "module": "auto",
            "name": "$provide"
        },
        "file": "downloaded/angular/angular.js-master/src/auto/injector.js",
        "module": "auto",
        "id": "decorator",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "decorator auto.method:decorator downloaded/angular/angular.js-master/src/auto/injector.js",
        "sortOn": "decorator",
        "left": 25,
        "level": 2,
        "root": "auto",
        "right": 26
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "defer",
        "kind": "function",
        "description": "Creates a `Deferred` object which represents a task which will finish in the future.",
        "returns": "{Deferred} Returns a new instance of deferred.",
        "parentDoc": {
            "module": "ng",
            "name": "ng.$q"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "defer",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "defer ng.method:defer downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "defer",
        "left": 1,
        "level": 0,
        "root": "defer",
        "right": 2
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngAria",
        "description": "The `ngAria` module provides support for common\n[<abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)\nattributes that convey state or semantic information about the application for users\nof assistive technologies, such as screen readers.\n\n<div doc-module-components=\"ngAria\"></div>\n\n## Usage\n\nFor ngAria to do its magic, simply include the module as a dependency. The directives supported\nby ngAria are:\n`ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.\n\nBelow is a more detailed breakdown of the attributes handled by ngAria:\n\n| Directive                                   | Supported Attributes                                                                   |\n|---------------------------------------------|----------------------------------------------------------------------------------------|\n| {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |\n| {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |\n| {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |\n| {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |\n| {@link module:ngMessages ngMessages}        | aria-live                                                                              |\n| {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |\n| {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |\n\nFind out more information about each directive by reading the\n{@link guide/accessibility ngAria Developer Guide}.\n\n##Example\nUsing ngDisabled with ngAria:\n```html\n<md-checkbox ng-disabled=\"disabled\">\n```\nBecomes:\n```html\n<md-checkbox ng-disabled=\"disabled\" aria-disabled=\"true\">\n```\n\n##Disabling Attributes\nIt's possible to disable individual attributes added by ngAria with the\n{@link ngAria.$ariaProvider#config config} method. For more details, see the\n{@link guide/accessibility Developer Guide}.",
        "file": "downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "module": "ngAria",
        "id": "ngAria",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngAria ngAria.module:ngAria downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "sortOn": "ngAria",
        "left": 1,
        "level": 0,
        "root": "ngAria",
        "right": 8
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$ariaProvider",
        "description": "Used for configuring the ARIA attributes injected and managed by ngAria.\n\n```js\nangular.module('myApp', ['ngAria'], function config($ariaProvider) {\n$ariaProvider.config({\nariaValue: true,\ntabindex: false\n});\n});\n```\n\n## Dependencies\nRequires the {@link ngAria} module to be installed.",
        "parentDoc": {
            "module": "ngAria",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "module": "ngAria",
        "id": "$ariaProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$ariaProvider ngAria.provider:$ariaProvider downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "sortOn": "$ariaProvider",
        "left": 2,
        "level": 1,
        "root": "ngAria",
        "right": 5
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "object",
                        "type": "object"
                    }
                ],
                "varName": "config",
                "altName": null,
                "description": "object to enable/disable specific ARIA attributes\n\n-*ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags\n-*ariaChecked** – `{boolean}` – Enables/disables aria-checked tags\n-*ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags\n-*ariaRequired** – `{boolean}` – Enables/disables aria-required tags\n-*ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags\n-*ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags\n-*ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags\n-*tabindex** – `{boolean}` – Enables/disables tabindex tags\n-*bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and\n`&lt;li&gt;` elements with ng-click",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "config",
        "description": "Enables/disables various ARIA attributes",
        "parentDoc": {
            "module": "ngAria",
            "name": "$ariaProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "module": "ngAria",
        "id": "config",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "config ngAria.method:config downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "sortOn": "config",
        "left": 3,
        "level": 2,
        "root": "ngAria",
        "right": 4
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$aria",
        "description": "",
        "priority": "200\n\nThe $aria service contains helper methods for applying common\n[ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.\n\nngAria injects common accessibility attributes that tell assistive technologies when HTML\nelements are enabled, selected, hidden, and more. To see how this is performed with ngAria,\nlet's review a code snippet from ngAria itself:\n\n```js\nngAriaModule.directive('ngDisabled', ['$aria', function($aria) {\nreturn $aria.$$watchExpr('ngDisabled', 'aria-disabled');\n}])\n```\nShown above, the ngAria module creates a directive with the same signature as the\ntraditional `ng-disabled` directive. But this ngAria version is dedicated to\nsolely managing accessibility attributes. The internal `$aria` service is used to watch the\nboolean attribute `ngDisabled`. If it has not been explicitly set by the developer,\n`aria-disabled` is injected as an attribute with its value synchronized to the value in\n`ngDisabled`.\n\nBecause ngAria hooks into the `ng-disabled` directive, developers do not have to do\nanything to enable this feature. The `aria-disabled` attribute is automatically managed\nsimply as a silent side-effect of using `ng-disabled` with the ngAria module.\n\nThe full list of directives that interface with ngAria:\n**ngModel**\n**ngShow**\n**ngHide**\n**ngClick**\n**ngDblclick**\n**ngMessages**\n**ngDisabled**\n\nRead the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each\ndirective.\n\n\n## Dependencies\nRequires the {@link ngAria} module to be installed.",
        "parentDoc": {
            "module": "ngAria",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "module": "ngAria",
        "id": "$aria",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$aria ngAria.service:$aria downloaded/angular/angular.js-master/src/ngAria/aria.js",
        "sortOn": "$aria",
        "left": 6,
        "level": 1,
        "root": "ngAria",
        "right": 7
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngCookies",
        "description": "# ngCookies\n\nThe `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\n\n\n<div doc-module-components=\"ngCookies\"></div>\n\nSee {@link ngCookies.$cookies `$cookies`} and\n{@link ngCookies.$cookieStore `$cookieStore`} for usage.",
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "ngCookies",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngCookies ngCookies.module:ngCookies downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "ngCookies",
        "left": 1,
        "level": 0,
        "root": "ngCookies",
        "right": 28
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$cookieStore",
        "deprecated": true,
        "requires": [
            "$cookies"
        ],
        "description": "Provides a key-value (string-object) storage, that is backed by session cookies.\nObjects put or retrieved from this storage are automatically serialized or\ndeserialized by angular's toJson/fromJson.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.\n\n<div class=\"alert alert-danger\">\n**Note:** The $cookieStore service is deprecated.\nPlease use the {@link ngCookies.$cookies `$cookies`} service instead.\n</div>",
        "example": "```js\nangular.module('cookieStoreExample', ['ngCookies'])\n.controller('ExampleController', ['$cookieStore', function($cookieStore) {\n// Put cookie\n$cookieStore.put('myFavorite','oatmeal');\n// Get cookie\nvar favoriteCookie = $cookieStore.get('myFavorite');\n// Removing a cookie\n$cookieStore.remove('myFavorite');\n}]);\n```",
        "parentDoc": {
            "module": "ngCookies",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "module": "ngCookies",
        "id": "$cookieStore",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$cookieStore ngCookies.service:$cookieStore downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "sortOn": "$cookieStore",
        "left": 2,
        "level": 1,
        "root": "ngCookies",
        "right": 9
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id to use for lookup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "description": "Returns the value of given cookie key",
        "returns": "{Object} Deserialized cookie value, undefined if the cookie does not exist.",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookieStore"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "module": "ngCookies",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get ngCookies.method:get downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "sortOn": "get",
        "left": 3,
        "level": 2,
        "root": "ngCookies",
        "right": 4
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id for the `value`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "Value to be stored.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "put",
        "description": "Sets a value for given cookie key",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookieStore"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "module": "ngCookies",
        "id": "put",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "put ngCookies.method:put downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "sortOn": "put",
        "left": 5,
        "level": 2,
        "root": "ngCookies",
        "right": 6
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id of the key-value pair to delete.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "remove",
        "description": "Remove given cookie",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookieStore"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "module": "ngCookies",
        "id": "remove",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "remove ngCookies.method:remove downloaded/angular/angular.js-master/src/ngCookies/cookieStore.js",
        "sortOn": "remove",
        "left": 7,
        "level": 2,
        "root": "ngCookies",
        "right": 8
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$cookiesProvider",
        "description": "Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.",
        "parentDoc": {
            "module": "ngCookies",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "$cookiesProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$cookiesProvider ngCookies.provider:$cookiesProvider downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "$cookiesProvider",
        "left": 10,
        "level": 1,
        "root": "ngCookies",
        "right": 13
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "defaults",
        "description": "Object containing default options to pass when setting cookies.\n\nThe object may have following properties:\n\n-*path** - `{string}` - The cookie will be available only for this path and its\nsub-paths. By default, this would be the URL that appears in your base tag.\n-*domain** - `{string}` - The cookie will be available only for this domain and\nits sub-domains. For obvious security reasons the user agent will not accept the\ncookie if the current domain is not a sub domain or equals to the requested domain.\n-*expires** - `{string|Date}` - String of the form \"Wdy, DD Mon YYYY HH:MM:SS GMT\"\nor a Date object indicating the exact date/time this cookie will expire.\n-*secure** - `{boolean}` - The cookie will be available only in secured connection.\n\nNote: by default the address that appears in your <base> tag will be used as path.\nThis is import so that cookies will be visible for all routes in case html5mode is enabled",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookiesProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "defaults",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "defaults ngCookies.property:defaults downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "defaults",
        "left": 11,
        "level": 2,
        "root": "ngCookies",
        "right": 12
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$cookies",
        "description": "Provides read/write access to browser's cookies.\n\nBREAKING CHANGE: `$cookies` no longer exposes properties that represent the\ncurrent browser cookie values. Now you must use the get/put/remove/etc. methods\nas described below.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.",
        "example": "```js\nangular.module('cookiesExample', ['ngCookies'])\n.controller('ExampleController', ['$cookies', function($cookies) {\n// Retrieving a cookie\nvar favoriteCookie = $cookies.get('myFavorite');\n// Setting a cookie\n$cookies.put('myFavorite', 'oatmeal');\n}]);\n```",
        "parentDoc": {
            "module": "ngCookies",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "$cookies",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$cookies ngCookies.service:$cookies downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "$cookies",
        "left": 14,
        "level": 1,
        "root": "ngCookies",
        "right": 27
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id to use for lookup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "get",
        "description": "Returns the value of given cookie key",
        "returns": "{string} Raw cookie value.",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "get",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "get ngCookies.method:get downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "get",
        "left": 15,
        "level": 2,
        "root": "ngCookies",
        "right": 16
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id to use for lookup.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getObject",
        "description": "Returns the deserialized value of given cookie key",
        "returns": "{Object} Deserialized cookie value.",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "getObject",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getObject ngCookies.method:getObject downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "getObject",
        "left": 17,
        "level": 2,
        "root": "ngCookies",
        "right": 18
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "getAll",
        "description": "Returns a key value object with all the cookies",
        "returns": "{Object} All cookies",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "getAll",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "getAll ngCookies.method:getAll downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "getAll",
        "left": 19,
        "level": 2,
        "root": "ngCookies",
        "right": 20
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id for the `value`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "Raw value to be stored.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "Options object.\nSee {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "put",
        "description": "Sets a value for given cookie key",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "put",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "put ngCookies.method:put downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "put",
        "left": 21,
        "level": 2,
        "root": "ngCookies",
        "right": 22
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id for the `value`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "value",
                "altName": null,
                "description": "Value to be stored.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "Options object.\nSee {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "putObject",
        "description": "Serializes and sets a value for given cookie key",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "putObject",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "putObject ngCookies.method:putObject downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "putObject",
        "left": 23,
        "level": 2,
        "root": "ngCookies",
        "right": 24
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "key",
                "altName": null,
                "description": "Id of the key-value pair to delete.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "Options object.\nSee {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "remove",
        "description": "Remove given cookie",
        "parentDoc": {
            "module": "ngCookies",
            "name": "$cookies"
        },
        "file": "downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "module": "ngCookies",
        "id": "remove",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "remove ngCookies.method:remove downloaded/angular/angular.js-master/src/ngCookies/cookies.js",
        "sortOn": "remove",
        "left": 25,
        "level": 2,
        "root": "ngCookies",
        "right": 26
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngMessageFormat",
        "description": "",
        "file": "downloaded/angular/angular.js-master/src/ngMessageFormat/messageFormatService.js",
        "module": "ngMessageFormat",
        "id": "ngMessageFormat",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngMessageFormat ngMessageFormat.module:ngMessageFormat downloaded/angular/angular.js-master/src/ngMessageFormat/messageFormatService.js",
        "sortOn": "ngMessageFormat",
        "left": 1,
        "level": 0,
        "root": "ngMessageFormat",
        "right": 4
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$$messageFormat",
        "description": "Angular internal service to recognize MessageFormat extensions in interpolation expressions.\nFor more information, see:\nhttps://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit",
        "parentDoc": {
            "module": "ngMessageFormat",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMessageFormat/messageFormatService.js",
        "module": "ngMessageFormat",
        "id": "$$messageFormat",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$$messageFormat ngMessageFormat.service:$$messageFormat downloaded/angular/angular.js-master/src/ngMessageFormat/messageFormatService.js",
        "sortOn": "$$messageFormat",
        "left": 2,
        "level": 1,
        "root": "ngMessageFormat",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngMessages",
        "description": "The `ngMessages` module provides enhanced support for displaying messages within templates\n(typically within forms or when rendering message objects that return key/value data).\nInstead of relying on JavaScript code and/or complex ng-if statements within your form template to\nshow and hide error messages specific to the state of an input field, the `ngMessages` and\n`ngMessage` directives are designed to handle the complexity, inheritance and priority\nsequencing based on the order of how the messages are defined in the template.\n\nCurrently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`\n`ngMessage` and `ngMessageExp` directives.\n\n# Usage\nThe `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.\nSince the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be\nused with `ngMessages` to display control error messages in an easier way than with just regular angular\ntemplate directives.\n\n```html\n<form name=\"myForm\">\n<input type=\"text\" ng-model=\"field\" name=\"myField\" required minlength=\"5\" />\n<div ng-messages=\"myForm.myField.$error\">\n<div ng-message=\"required\">You did not enter a field</div>\n<div ng-message=\"minlength, maxlength\">\nYour email must be between 5 and 100 characters long\n</div>\n</div>\n</form>\n```\n\nNow whatever key/value entries are present within the provided object (in this case `$error`) then\nthe ngMessages directive will render the inner first ngMessage directive (depending if the key values\nmatch the attribute value present on each ngMessage directive). In other words, if your errors\nobject contains the following data:\n\n```javascript\n<!-- keep in mind that ngModel automatically sets these error flags -->\nmyField.$error = { minlength : true, required : false };\n```\n\nThen the `required` message will be displayed first. When required is false then the `minlength` message\nwill be displayed right after (since these messages are ordered this way in the template HTML code).\nThe prioritization of each message is determined by what order they're present in the DOM.\nTherefore, instead of having custom JavaScript code determine the priority of what errors are\npresent before others, the presentation of the errors are handled within the template.\n\nBy default, ngMessages will only display one error at a time. However, if you wish to display all\nmessages then the `ng-messages-multiple` attribute flag can be used on the element containing the\nngMessages directive to make this happen.\n\n```html\n<!-- attribute-style usage -->\n<div ng-messages=\"myForm.myField.$error\" ng-messages-multiple>...</div>\n\n<!-- element-style usage -->\n<ng-messages for=\"myForm.myField.$error\" multiple>...</ng-messages>\n```\n\n## Reusing and Overriding Messages\nIn addition to prioritization, ngMessages also allows for including messages from a remote or an inline\ntemplate. This allows for generic collection of messages to be reused across multiple parts of an\napplication.\n\n```html\n<script type=\"text/ng-template\" id=\"error-messages\">\n<div ng-message=\"required\">This field is required</div>\n<div ng-message=\"minlength\">This field is too short</div>\n</script>\n\n<div ng-messages=\"myForm.myField.$error\">\n<div ng-messages-include=\"error-messages\"></div>\n</div>\n```\n\nHowever, including generic messages may not be useful enough to match all input fields, therefore,\n`ngMessages` provides the ability to override messages defined in the remote template by redefining\nthem within the directive container.\n\n```html\n<!-- a generic template of error messages known as \"my-custom-messages\" -->\n<script type=\"text/ng-template\" id=\"my-custom-messages\">\n<div ng-message=\"required\">This field is required</div>\n<div ng-message=\"minlength\">This field is too short</div>\n</script>\n\n<form name=\"myForm\">\n<input type=\"email\"\nid=\"email\"\nname=\"myEmail\"\nng-model=\"email\"\nminlength=\"5\"\nrequired />\n\n<!-- any ng-message elements that appear BEFORE the ng-messages-include will\noverride the messages present in the ng-messages-include template -->\n<div ng-messages=\"myForm.myEmail.$error\">\n<!-- this required message has overridden the template message -->\n<div ng-message=\"required\">You did not enter your email address</div>\n\n<!-- this is a brand new message and will appear last in the prioritization -->\n<div ng-message=\"email\">Your email address is invalid</div>\n\n<!-- and here are the generic error messages -->\n<div ng-messages-include=\"error-messages\"></div>\n</div>\n</form>\n```\n\nIn the example HTML code above the message that is set on required will override the corresponding\nrequired message defined within the remote template. Therefore, with particular input fields (such\nemail addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied\nwhile more generic messages can be used to handle other, more general input errors.\n\n## Dynamic Messaging\nngMessages also supports using expressions to dynamically change key values. Using arrays and\nrepeaters to list messages is also supported. This means that the code below will be able to\nfully adapt itself and display the appropriate message when any of the expression data changes:\n\n```html\n<form name=\"myForm\">\n<input type=\"email\"\nname=\"myEmail\"\nng-model=\"email\"\nminlength=\"5\"\nrequired />\n\n<div ng-messages=\"myForm.myEmail.$error\">\n<div ng-message=\"required\">You did not enter your email address</div>\n<div ng-repeat=\"errorMessage in errorMessages\">\n<!-- use ng-message-exp for a message whose key is given by an expression -->\n<div ng-message-exp=\"errorMessage.type\">{{ errorMessage.text }}</div>\n</div>\n</div>\n</form>\n```\n\nThe `errorMessage.type` expression can be a string value or it can be an array so\nthat multiple errors can be associated with a single error message:\n\n```html\n<input type=\"email\"\nng-model=\"data.email\"\nname=\"myEmail\"\nng-minlength=\"5\"\nng-maxlength=\"100\"\nrequired />\n<div ng-messages=\"myForm.myEmail.$error\">\n<div ng-message-exp=\"'required'\">You did not enter your email address</div>\n<div ng-message-exp=\"['minlength', 'maxlength]\">\nYour email must be between 5 and 100 characters long\n</div>\n</div>\n```\n\nFeel free to use other structural directives such as ng-if and ng-switch to further control\nwhat messages are active and when. Be careful, if you place ng-message on the same element\nas these structural directives, Angular may not be able to determine if a message is active\nor not. Therefore it is best to place the ng-message on a child element of the structural\ndirective.\n\n```html\n<div ng-messages=\"myForm.myEmail.$error\">\n<div ng-if=\"showRequiredError\">\n<div ng-message=\"required\">Please enter something</div>\n</div>\n</div>\n```\n\n## Animations\nIf the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and\n`ngMessageExp` directives will trigger animations whenever any messages are added and removed from\nthe DOM by the `ngMessages` directive.\n\nWhenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS\nclass will be added to the element. The `.ng-inactive` CSS class will be applied when there are no\nmessages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can\nhook into the animations whenever these classes are added/removed.\n\nLet's say that our HTML code for our messages container looks like so:\n\n```html\n<div ng-messages=\"myMessages\" class=\"my-messages\">\n<div ng-message=\"alert\" class=\"some-message\">...</div>\n<div ng-message=\"fail\" class=\"some-message\">...</div>\n</div>\n```\n\nThen the CSS animation code for the message container looks like so:\n\n```css\n.my-messages {\ntransition:1s linear all;\n}\n.my-messages.ng-active {\n// messages are visible\n}\n.my-messages.ng-inactive {\n// messages are hidden\n}\n```\n\nWhenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter\nand leave animation is triggered for each particular element bound to the `ngMessage` directive.\n\nTherefore, the CSS code for the inner messages looks like so:\n\n```css\n.some-message {\ntransition:1s linear all;\n}\n\n.some-message.ng-enter {}\n.some-message.ng-enter.ng-enter-active {}\n\n.some-message.ng-leave {}\n.some-message.ng-leave.ng-leave-active {}\n```\n\n{@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.",
        "file": "downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "module": "ngMessages",
        "id": "ngMessages",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngMessages ngMessages.module:ngMessages downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "sortOn": "ngMessages",
        "left": 1,
        "level": 0,
        "root": "ngMessages",
        "right": 10
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngMessages",
                "altName": null,
                "description": "an angular expression evaluating to a key/value object\n(this is typically the $error object on an ngModel instance).",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngMessagesMultiple",
                "altName": "multiple",
                "description": "when set, all messages will be displayed with true",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "module": "ngMessages",
        "name": "ngMessages",
        "restrict": "AE",
        "description": "`ngMessages` is a directive that is designed to show and hide messages based on the state\nof a key/value object that it listens on. The directive itself compliments error message\nreporting with the `ngModel` $error object (which stores a key/value state of validation errors).\n\n`ngMessages` manages the state of internal messages within its container element. The internal\nmessages use the `ngMessage` directive and will be inserted/removed from the page depending\non if they're present within the key/value object. By default, only one message will be displayed\nat a time and this depends on the prioritization of the messages within the template. (This can\nbe changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)\n\nA remote template can also be used to promote message reusability and messages can also be\noverridden.\n\n{@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.",
        "usage": "```html\n<!-- using attribute directives -->\n<ANY ng-messages=\"expression\">\n<ANY ng-message=\"stringValue\">...</ANY>\n<ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n<ANY ng-message-exp=\"expressionValue\">...</ANY>\n</ANY>\n\n<!-- or by using element directives -->\n<ng-messages for=\"expression\">\n<ng-message when=\"stringValue\">...</ng-message>\n<ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n<ng-message when-exp=\"expressionValue\">...</ng-message>\n</ng-messages>\n```",
        "example": "<example name=\"ngMessages-directive\" module=\"ngMessagesExample\"\ndeps=\"angular-messages.js\"\nanimations=\"true\" fixBase=\"true\">\n<file name=\"index.html\">\n<form name=\"myForm\">\n<label>Enter your name:</label>\n<input type=\"text\"\nname=\"myName\"\nng-model=\"name\"\nng-minlength=\"5\"\nng-maxlength=\"20\"\nrequired />\n\n<pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>\n\n<div ng-messages=\"myForm.myName.$error\" style=\"color:maroon\">\n<div ng-message=\"required\">You did not enter a field</div>\n<div ng-message=\"minlength\">Your field is too short</div>\n<div ng-message=\"maxlength\">Your field is too long</div>\n</div>\n</form>\n</file>\n<file name=\"script.js\">\nangular.module('ngMessagesExample', ['ngMessages']);\n</file>\n</example>",
        "parentDoc": {
            "module": "ngMessages",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "id": "ngMessages",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMessages ngMessages.directive:ngMessages downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "sortOn": "ngMessages",
        "left": 2,
        "level": 1,
        "root": "ngMessages",
        "right": 3
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "ngMessagesInclude",
                "altName": "src",
                "description": "a string value corresponding to the remote template.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMessagesInclude",
        "restrict": "AE",
        "scope": true,
        "description": "`ngMessagesInclude` is a directive with the purpose to import existing ngMessage template\ncode from a remote template and place the downloaded template code into the exact spot\nthat the ngMessagesInclude directive is placed within the ngMessages container. This allows\nfor a series of pre-defined messages to be reused and also allows for the developer to\ndetermine what messages are overridden due to the placement of the ngMessagesInclude directive.",
        "usage": "```html\n<!-- using attribute directives -->\n<ANY ng-messages=\"expression\">\n<ANY ng-messages-include=\"remoteTplString\">...</ANY>\n</ANY>\n\n<!-- or by using element directives -->\n<ng-messages for=\"expression\">\n<ng-messages-include src=\"expressionValue1\">...</ng-messages-include>\n</ng-messages>\n```\n\n{@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.",
        "parentDoc": {
            "module": "ngMessages",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "module": "ngMessages",
        "id": "ngMessagesInclude",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMessagesInclude ngMessages.directive:ngMessagesInclude downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "sortOn": "ngMessagesInclude",
        "left": 4,
        "level": 1,
        "root": "ngMessages",
        "right": 5
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMessage",
                "altName": "when",
                "description": "a string value corresponding to the message key.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMessage",
        "restrict": "AE",
        "scope": true,
        "description": "`ngMessage` is a directive with the purpose to show and hide a particular message.\nFor `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element\nmust be situated since it determines which messages are visible based on the state\nof the provided key/value map that `ngMessages` listens on.\n\nMore information about using `ngMessage` can be found in the\n{@link module:ngMessages `ngMessages` module documentation}.",
        "usage": "```html\n<!-- using attribute directives -->\n<ANY ng-messages=\"expression\">\n<ANY ng-message=\"stringValue\">...</ANY>\n<ANY ng-message=\"stringValue1, stringValue2, ...\">...</ANY>\n</ANY>\n\n<!-- or by using element directives -->\n<ng-messages for=\"expression\">\n<ng-message when=\"stringValue\">...</ng-message>\n<ng-message when=\"stringValue1, stringValue2, ...\">...</ng-message>\n</ng-messages>\n```",
        "parentDoc": {
            "module": "ngMessages",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "module": "ngMessages",
        "id": "ngMessage",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMessage ngMessages.directive:ngMessage downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "sortOn": "ngMessage",
        "left": 6,
        "level": 1,
        "root": "ngMessages",
        "right": 7
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngMessageExp",
                "altName": "whenExp",
                "description": "an expression value corresponding to the message key.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngMessageExp",
        "restrict": "AE",
        "scope": true,
        "description": "`ngMessageExp` is a directive with the purpose to show and hide a particular message.\nFor `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element\nmust be situated since it determines which messages are visible based on the state\nof the provided key/value map that `ngMessages` listens on.",
        "usage": "```html\n<!-- using attribute directives -->\n<ANY ng-messages=\"expression\">\n<ANY ng-message-exp=\"expressionValue\">...</ANY>\n</ANY>\n\n<!-- or by using element directives -->\n<ng-messages for=\"expression\">\n<ng-message when-exp=\"expressionValue\">...</ng-message>\n</ng-messages>\n```\n\n{@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.",
        "parentDoc": {
            "module": "ngMessages",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "module": "ngMessages",
        "id": "ngMessageExp",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngMessageExp ngMessages.directive:ngMessageExp downloaded/angular/angular.js-master/src/ngMessages/messages.js",
        "sortOn": "ngMessageExp",
        "left": 8,
        "level": 1,
        "root": "ngMessages",
        "right": 9
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngMock",
        "packageName": "angular-mocks",
        "description": "# ngMock\n\nThe `ngMock` module provides support to inject and mock Angular services into unit tests.\nIn addition, ngMock also extends various core ng services such that they can be\ninspected and controlled in a synchronous manner within test code.\n\n\n<div doc-module-components=\"ngMock\"></div>",
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "ngMock",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngMock ngMock.module:ngMock downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "ngMock",
        "left": 1,
        "level": 0,
        "root": "ngMock",
        "right": 94
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "object",
        "name": "angular.mock",
        "description": "Namespace from 'angular-mocks.js' which contains testing related code.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "angular.mock",
        "path": "angular/api",
        "groupId": 5,
        "type": "object",
        "handler": "ngdoc",
        "search": "angular.mock ngMock.object:angular.mock downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "angular.mock",
        "left": 2,
        "level": 1,
        "root": "ngMock",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$exceptionHandlerProvider",
        "description": "Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\npassed to the `$exceptionHandler`.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$exceptionHandlerProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$exceptionHandlerProvider ngMock.provider:$exceptionHandlerProvider downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$exceptionHandlerProvider",
        "left": 4,
        "level": 1,
        "root": "ngMock",
        "right": 7
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "mode",
                "altName": null,
                "description": "Mode of operation, defaults to `rethrow`.\n\n- `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\nmode stores an array of errors in `$exceptionHandler.errors`, to allow later\nassertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\n{@link ngMock.$log#reset reset()}\n- `rethrow`: If any errors are passed to the handler in tests, it typically means that there\nis a bug in the application or test, so this mock will make these tests fail.\nFor any implementations that expect exceptions to be thrown, the `rethrow` mode\nwill also maintain a log of thrown errors.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "mode",
        "description": "Sets the logging mode.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$exceptionHandlerProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "mode",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "mode ngMock.method:mode downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "mode",
        "left": 5,
        "level": 2,
        "root": "ngMock",
        "right": 6
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$exceptionHandler",
        "description": "Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\nto it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\ninformation.\n\n\n```js\ndescribe('$exceptionHandlerProvider', function() {\n\nit('should capture log messages and exceptions', function() {\n\nmodule(function($exceptionHandlerProvider) {\n$exceptionHandlerProvider.mode('log');\n});\n\ninject(function($log, $exceptionHandler, $timeout) {\n$timeout(function() { $log.log(1); });\n$timeout(function() { $log.log(2); throw 'banana peel'; });\n$timeout(function() { $log.log(3); });\nexpect($exceptionHandler.errors).toEqual([]);\nexpect($log.assertEmpty());\n$timeout.flush();\nexpect($exceptionHandler.errors).toEqual(['banana peel']);\nexpect($log.log.logs).toEqual([[1], [2], [3]]);\n});\n});\n});\n```",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$exceptionHandler",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$exceptionHandler ngMock.service:$exceptionHandler downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$exceptionHandler",
        "left": 8,
        "level": 1,
        "root": "ngMock",
        "right": 9
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$log",
        "description": "Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\n(one array per logging level). These arrays are exposed as `logs` property of each of the\nlevel-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$log",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$log ngMock.service:$log downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$log",
        "left": 10,
        "level": 1,
        "root": "ngMock",
        "right": 25
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "reset",
        "description": "Reset all of the logging arrays to empty.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "reset",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "reset ngMock.method:reset downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "reset",
        "left": 11,
        "level": 2,
        "root": "ngMock",
        "right": 12
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "log.logs",
        "description": "Array of messages logged using {@link ng.$log#log `log()`}.",
        "example": "```js\n$log.log('Some Log');\nvar first = $log.log.logs.unshift();\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "log.logs",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "log.logs ngMock.property:log.logs downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "log.logs",
        "left": 13,
        "level": 2,
        "root": "ngMock",
        "right": 14
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "info.logs",
        "description": "Array of messages logged using {@link ng.$log#info `info()`}.",
        "example": "```js\n$log.info('Some Info');\nvar first = $log.info.logs.unshift();\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "info.logs",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "info.logs ngMock.property:info.logs downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "info.logs",
        "left": 15,
        "level": 2,
        "root": "ngMock",
        "right": 16
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "warn.logs",
        "description": "Array of messages logged using {@link ng.$log#warn `warn()`}.",
        "example": "```js\n$log.warn('Some Warning');\nvar first = $log.warn.logs.unshift();\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "warn.logs",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "warn.logs ngMock.property:warn.logs downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "warn.logs",
        "left": 17,
        "level": 2,
        "root": "ngMock",
        "right": 18
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "error.logs",
        "description": "Array of messages logged using {@link ng.$log#error `error()`}.",
        "example": "```js\n$log.error('Some Error');\nvar first = $log.error.logs.unshift();\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "error.logs",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "error.logs ngMock.property:error.logs downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "error.logs",
        "left": 19,
        "level": 2,
        "root": "ngMock",
        "right": 20
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "debug.logs",
        "description": "Array of messages logged using {@link ng.$log#debug `debug()`}.",
        "example": "```js\n$log.debug('Some Error');\nvar first = $log.debug.logs.unshift();\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "debug.logs",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "debug.logs ngMock.property:debug.logs downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "debug.logs",
        "left": 21,
        "level": 2,
        "root": "ngMock",
        "right": 22
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "assertEmpty",
        "description": "Assert that all of the logging methods have no logged messages. If any messages are present,\nan exception is thrown.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$log"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "assertEmpty",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "assertEmpty ngMock.method:assertEmpty downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "assertEmpty",
        "left": 23,
        "level": 2,
        "root": "ngMock",
        "right": 24
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "function",
                        "type": "function"
                    }
                ],
                "varName": "fn",
                "altName": null,
                "description": "A function that should be called repeatedly.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "delay",
                "altName": null,
                "description": "Number of milliseconds between each function call.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "count",
                "altName": null,
                "description": "Number of times to repeat. If not set, or 0, will repeat\nindefinitely.",
                "optional": true,
                "defaultValue": "0"
            },
            {
                "type": [
                    {
                        "name": "boolean",
                        "type": "boolean"
                    }
                ],
                "varName": "invokeApply",
                "altName": null,
                "description": "If set to `false` skips model dirty checking, otherwise\nwill invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.",
                "optional": true,
                "defaultValue": "true"
            },
            {
                "type": [
                    "undefined"
                ],
                "varName": "Pass",
                "altName": null,
                "description": "additional parameters to the executed function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$interval",
        "description": "Mock implementation of the $interval service.\n\nUse {@link ngMock.$interval#flush `$interval.flush(millis)`} to\nmove forward by `millis` milliseconds and trigger any functions scheduled to run in that\ntime.",
        "returns": "{promise} A promise which will be notified on each iteration.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$interval",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$interval ngMock.service:$interval downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$interval",
        "left": 26,
        "level": 1,
        "root": "ngMock",
        "right": 31
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "promise",
                        "type": "promise"
                    }
                ],
                "varName": "promise",
                "altName": null,
                "description": "A promise from calling the `$interval` function.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "cancel",
        "description": "Cancels a task associated with the `promise`.",
        "returns": "{boolean} Returns `true` if the task was successfully cancelled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$interval"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "cancel",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "cancel ngMock.method:cancel downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "cancel",
        "left": 27,
        "level": 2,
        "root": "ngMock",
        "right": 28
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "millis",
                "altName": null,
                "description": "maximum timeout amount to flush up until.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "flush",
        "description": "Runs interval tasks scheduled to be run in the next `millis` milliseconds.",
        "return": "{number} The amount of time moved forward.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$interval"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "flush",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "flush ngMock.method:flush downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "flush",
        "left": 29,
        "level": 2,
        "root": "ngMock",
        "right": 30
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "offset",
                "altName": null,
                "description": "Offset of thedesired* timezone in hours (fractions will be honored)",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "timestamp",
                "altName": null,
                "description": "Timestamp representing the desired time inUTC*",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "angular.mock.TzDate",
        "description": "*NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\n\nMock of the Date type which has its timezone specified via constructor arg.\n\nThe main purpose is to create Date-like instances with timezone fixed to the specified timezone\noffset, so that we can test code that depends on local timezone settings without dependency on\nthe time zone settings of the machine where the code is running.",
        "example": "!!!! WARNING !!!!!\nThis is not a complete Date object so only methods that were implemented can be called safely.\nTo make matters worse, TzDate instances inherit stuff from Date via a prototype.\n\nWe do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\nincomplete we might be missing some non-standard methods. This can result in errors like:\n\"Date.prototype.foo called on incompatible Object\".\n\n```js\nvar newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\nnewYearInBratislava.getTimezoneOffset() => -60;\nnewYearInBratislava.getFullYear() => 2010;\nnewYearInBratislava.getMonth() => 0;\nnewYearInBratislava.getDate() => 1;\nnewYearInBratislava.getHours() => 0;\nnewYearInBratislava.getMinutes() => 0;\nnewYearInBratislava.getSeconds() => 0;\n```",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "angular.mock.TzDate",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "angular.mock.TzDate ngMock.type:angular.mock.TzDate downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "angular.mock.TzDate",
        "left": 32,
        "level": 1,
        "root": "ngMock",
        "right": 33
    },
    {
        "params": [
            {
                "type": [
                    "undefined"
                ],
                "varName": "object",
                "altName": null,
                "description": "- any object to turn into string.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.mock.dump",
        "description": "*NOTE*: this is not an injectable instance, just a globally available function.\n\nMethod for serializing common angular objects (scope, elements, etc..) into strings, useful for\ndebugging.\n\nThis method is also available on window, where it can be used to display objects on debug\nconsole.",
        "return": "{string} a serialized string of the argument",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "angular.mock.dump",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.mock.dump ngMock.function:angular.mock.dump downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "angular.mock.dump",
        "left": 34,
        "level": 1,
        "root": "ngMock",
        "right": 35
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$httpBackend",
        "description": "Fake HTTP backend implementation suitable for unit testing applications that use the\n{@link ng.$http $http service}.\n\n*Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\ndevelopment please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\n\nDuring unit testing, we want our unit tests to run quickly and have no external dependencies so\nwe don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or\n[JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is\nto verify whether a certain request has been sent or not, or alternatively just let the\napplication make requests, respond with pre-trained responses and assert that the end result is\nwhat we expect it to be.\n\nThis mock implementation can be used to respond with static or dynamic responses via the\n`expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\n\nWhen an Angular application needs some data from a server, it calls the $http service, which\nsends the request to a real server using $httpBackend service. With dependency injection, it is\neasy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\nthe requests and respond with some testing data without sending a request to a real server.\n\nThere are two ways to specify what test data should be returned as http responses by the mock\nbackend when the code under test makes http requests:\n\n- `$httpBackend.expect` - specifies a request expectation\n- `$httpBackend.when` - specifies a backend definition\n\n\n# Request Expectations vs Backend Definitions\n\nRequest expectations provide a way to make assertions about requests made by the application and\nto define responses for those requests. The test will fail if the expected requests are not made\nor they are made in the wrong order.\n\nBackend definitions allow you to define a fake backend for your application which doesn't assert\nif a particular request was made or not, it just returns a trained response if a request is made.\nThe test will pass whether or not the request gets made during testing.\n\n\n<table class=\"table\">\n<tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\n<tr>\n<th>Syntax</th>\n<td>.expect(...).respond(...)</td>\n<td>.when(...).respond(...)</td>\n</tr>\n<tr>\n<th>Typical usage</th>\n<td>strict unit tests</td>\n<td>loose (black-box) unit testing</td>\n</tr>\n<tr>\n<th>Fulfills multiple requests</th>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<th>Order of requests matters</th>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<th>Request required</th>\n<td>YES</td>\n<td>NO</td>\n</tr>\n<tr>\n<th>Response required</th>\n<td>optional (see below)</td>\n<td>YES</td>\n</tr>\n</table>\n\nIn cases where both backend definitions and request expectations are specified during unit\ntesting, the request expectations are evaluated first.\n\nIf a request expectation has no response specified, the algorithm will search your backend\ndefinitions for an appropriate response.\n\nIf a request didn't match any expectation or if the expectation doesn't have the response\ndefined, the backend definitions are evaluated in sequential order to see if any of them match\nthe request. The response from the first matched definition is returned.\n\n\n# Flushing HTTP requests\n\nThe $httpBackend used in production always responds to requests asynchronously. If we preserved\nthis behavior in unit testing, we'd have to create async unit tests, which are hard to write,\nto follow and to maintain. But neither can the testing mock respond synchronously; that would\nchange the execution of the code under test. For this reason, the mock $httpBackend has a\n`flush()` method, which allows the test to explicitly flush pending requests. This preserves\nthe async api of the backend, while allowing the test to execute synchronously.\n\n\n# Unit testing with mock $httpBackend\nThe following code shows how to setup and use the mock backend when unit testing a controller.\nFirst we create the controller under test:\n\n  ```js\n  // The module code\n  angular\n    .module('MyApp', [])\n    .controller('MyController', MyController);\n\n  // The controller code\n  function MyController($scope, $http) {\n    var authToken;\n\n    $http.get('/auth.py').success(function(data, status, headers) {\n      authToken = headers('A-Token');\n      $scope.user = data;\n    });\n\n    $scope.saveMessage = function(message) {\n      var headers = { 'Authorization': authToken };\n      $scope.status = 'Saving...';\n\n      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {\n        $scope.status = '';\n      }).error(function() {\n        $scope.status = 'ERROR!';\n      });\n    };\n  }\n  ```\n\nNow we setup the mock backend and create the test specs:\n\n  ```js\n    // testing controller\n    describe('MyController', function() {\n       var $httpBackend, $rootScope, createController, authRequestHandler;\n\n       // Set up the module\n       beforeEach(module('MyApp'));\n\n       beforeEach(inject(function($injector) {\n         // Set up the mock http service responses\n         $httpBackend = $injector.get('$httpBackend');\n         // backend definition common for all tests\n         authRequestHandler = $httpBackend.when('GET', '/auth.py')\n                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});\n\n         // Get hold of a scope (i.e. the root scope)\n         $rootScope = $injector.get('$rootScope');\n         // The $controller service is used to create instances of controllers\n         var $controller = $injector.get('$controller');\n\n         createController = function() {\n           return $controller('MyController', {'$scope' : $rootScope });\n         };\n       }));\n\n\n       afterEach(function() {\n         $httpBackend.verifyNoOutstandingExpectation();\n         $httpBackend.verifyNoOutstandingRequest();\n       });\n\n\n       it('should fetch authentication token', function() {\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n       });\n\n\n       it('should fail authentication', function() {\n\n         // Notice how you can change the response even after it was set\n         authRequestHandler.respond(401, '');\n\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('Failed...');\n       });\n\n\n       it('should send msg to server', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         // now you don’t care about the authentication, but\n         // the controller will still send the request and\n         // $httpBackend will respond without you having to\n         // specify the expectation and response for this request\n\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\n         $rootScope.saveMessage('message content');\n         expect($rootScope.status).toBe('Saving...');\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('');\n       });\n\n\n       it('should send auth header', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\n           // check if the header was send, if it wasn't the expectation won't\n           // match the request and the test will fail\n           return headers['Authorization'] == 'xxx';\n         }).respond(201, '');\n\n         $rootScope.saveMessage('whatever');\n         $httpBackend.flush();\n       });\n    });\n   ```",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$httpBackend",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$httpBackend ngMock.service:$httpBackend downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$httpBackend",
        "left": 36,
        "level": 1,
        "root": "ngMock",
        "right": 75
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "method",
                "altName": null,
                "description": "HTTP method.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that receives\ndata string and returns true if the data is as expected.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers or function that receives http header\nobject and returns true if the headers match the current definition.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "when",
        "description": "Creates a new backend definition.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.\n\n- respond –\n`{function([status,] data[, headers, statusText])\n| function(function(method, url, data, headers)}`\n– The respond method takes a set of static data to be returned or a function that can\nreturn an array containing response status (number), response data (string), response\nheaders (Object), and the text for the status (string). The respond method returns the\n`requestHandler` object for possible overrides.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "when",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "when ngMock.method:when downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "when",
        "left": 37,
        "level": 2,
        "root": "ngMock",
        "right": 38
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenGET",
        "description": "Creates a new backend definition for GET requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenGET",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenGET ngMock.method:whenGET downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenGET",
        "left": 39,
        "level": 2,
        "root": "ngMock",
        "right": 40
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenHEAD",
        "description": "Creates a new backend definition for HEAD requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenHEAD",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenHEAD ngMock.method:whenHEAD downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenHEAD",
        "left": 41,
        "level": 2,
        "root": "ngMock",
        "right": 42
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenDELETE",
        "description": "Creates a new backend definition for DELETE requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenDELETE",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenDELETE ngMock.method:whenDELETE downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenDELETE",
        "left": 43,
        "level": 2,
        "root": "ngMock",
        "right": 44
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that receives\ndata string and returns true if the data is as expected.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenPOST",
        "description": "Creates a new backend definition for POST requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenPOST",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenPOST ngMock.method:whenPOST downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenPOST",
        "left": 45,
        "level": 2,
        "root": "ngMock",
        "right": 46
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that receives\ndata string and returns true if the data is as expected.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenPUT",
        "description": "Creates a new backend definition for PUT requests.  For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenPUT",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenPUT ngMock.method:whenPUT downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenPUT",
        "left": 47,
        "level": 2,
        "root": "ngMock",
        "right": 48
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenJSONP",
        "description": "Creates a new backend definition for JSONP requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "whenJSONP",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenJSONP ngMock.method:whenJSONP downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenJSONP",
        "left": 49,
        "level": 2,
        "root": "ngMock",
        "right": 50
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "method",
                "altName": null,
                "description": "HTTP method.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that\nreceives data string and returns true if the data is as expected, or Object if request body\nis in JSON format.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers or function that receives http header\nobject and returns true if the headers match the current expectation.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expect",
        "description": "Creates a new request expectation.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.\n\n- respond –\n`{function([status,] data[, headers, statusText])\n| function(function(method, url, data, headers)}`\n– The respond method takes a set of static data to be returned or a function that can\nreturn an array containing response status (number), response data (string), response\nheaders (Object), and the text for the status (string). The respond method returns the\n`requestHandler` object for possible overrides.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expect",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expect ngMock.method:expect downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expect",
        "left": 51,
        "level": 2,
        "root": "ngMock",
        "right": 52
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectGET",
        "description": "Creates a new request expectation for GET requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled. See #expect for more info.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectGET",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectGET ngMock.method:expectGET downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectGET",
        "left": 53,
        "level": 2,
        "root": "ngMock",
        "right": 54
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectHEAD",
        "description": "Creates a new request expectation for HEAD requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectHEAD",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectHEAD ngMock.method:expectHEAD downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectHEAD",
        "left": 55,
        "level": 2,
        "root": "ngMock",
        "right": 56
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectDELETE",
        "description": "Creates a new request expectation for DELETE requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectDELETE",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectDELETE ngMock.method:expectDELETE downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectDELETE",
        "left": 57,
        "level": 2,
        "root": "ngMock",
        "right": 58
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that\nreceives data string and returns true if the data is as expected, or Object if request body\nis in JSON format.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectPOST",
        "description": "Creates a new request expectation for POST requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectPOST",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectPOST ngMock.method:expectPOST downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectPOST",
        "left": 59,
        "level": 2,
        "root": "ngMock",
        "right": 60
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that\nreceives data string and returns true if the data is as expected, or Object if request body\nis in JSON format.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectPUT",
        "description": "Creates a new request expectation for PUT requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectPUT",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectPUT ngMock.method:expectPUT downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectPUT",
        "left": 61,
        "level": 2,
        "root": "ngMock",
        "right": 62
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body or function that\nreceives data string and returns true if the data is as expected, or Object if request body\nis in JSON format.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectPATCH",
        "description": "Creates a new request expectation for PATCH requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectPATCH",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectPATCH ngMock.method:expectPATCH downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectPATCH",
        "left": 63,
        "level": 2,
        "root": "ngMock",
        "right": 64
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives an url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "expectJSONP",
        "description": "Creates a new request expectation for JSONP requests. For more info see `expect()`.",
        "returns": "{requestHandler} Returns an object with `respond` method that controls how a matched\nrequest is handled. You can save this object for later use and invoke `respond` again in\norder to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "expectJSONP",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "expectJSONP ngMock.method:expectJSONP downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "expectJSONP",
        "left": 65,
        "level": 2,
        "root": "ngMock",
        "right": 66
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "count",
                "altName": null,
                "description": "Number of responses to flush (in the order they arrived). If undefined,\nall pending requests will be flushed. If there are no pending requests when the flush method\nis called an exception is thrown (as this typically a sign of programming error).",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "flush",
        "description": "Flushes all pending requests using the trained responses.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "flush",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "flush ngMock.method:flush downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "flush",
        "left": 67,
        "level": 2,
        "root": "ngMock",
        "right": 68
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "verifyNoOutstandingExpectation",
        "description": "Verifies that all of the requests defined via the `expect` api were made. If any of the\nrequests were not made, verifyNoOutstandingExpectation throws an exception.\n\nTypically, you would call this method following each test case that asserts requests using an\n\"afterEach\" clause.\n\n```js\nafterEach($httpBackend.verifyNoOutstandingExpectation);\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "verifyNoOutstandingExpectation",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "verifyNoOutstandingExpectation ngMock.method:verifyNoOutstandingExpectation downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "verifyNoOutstandingExpectation",
        "left": 69,
        "level": 2,
        "root": "ngMock",
        "right": 70
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "verifyNoOutstandingRequest",
        "description": "Verifies that there are no outstanding requests that need to be flushed.\n\nTypically, you would call this method following each test case that asserts requests using an\n\"afterEach\" clause.\n\n```js\nafterEach($httpBackend.verifyNoOutstandingRequest);\n```",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "verifyNoOutstandingRequest",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "verifyNoOutstandingRequest ngMock.method:verifyNoOutstandingRequest downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "verifyNoOutstandingRequest",
        "left": 71,
        "level": 2,
        "root": "ngMock",
        "right": 72
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "resetExpectations",
        "description": "Resets all request expectations, but preserves all backend definitions. Typically, you would\ncall resetExpectations during a multiple-phase test when you want to reuse the same instance of\n$httpBackend mock.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "resetExpectations",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "resetExpectations ngMock.method:resetExpectations downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "resetExpectations",
        "left": 73,
        "level": 2,
        "root": "ngMock",
        "right": 74
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$timeout",
        "description": "This service is just a simple decorator for {@link ng.$timeout $timeout} service\nthat adds a \"flush\" and \"verifyNoPendingTasks\" methods.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$timeout",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$timeout ngMock.service:$timeout downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$timeout",
        "left": 76,
        "level": 1,
        "root": "ngMock",
        "right": 81
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "number",
                        "type": "number"
                    }
                ],
                "varName": "delay",
                "altName": null,
                "description": "maximum timeout amount to flush up until",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "flush",
        "description": "Flushes the queue of pending tasks.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$timeout"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "flush",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "flush ngMock.method:flush downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "flush",
        "left": 77,
        "level": 2,
        "root": "ngMock",
        "right": 78
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "verifyNoPendingTasks",
        "description": "Verifies that there are no pending tasks that need to be flushed.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$timeout"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "verifyNoPendingTasks",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "verifyNoPendingTasks ngMock.method:verifyNoPendingTasks downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "verifyNoPendingTasks",
        "left": 79,
        "level": 2,
        "root": "ngMock",
        "right": 80
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "constructor",
                "altName": null,
                "description": "If called with a function then it's considered to be the\ncontroller constructor function. Otherwise it's considered to be a string which is used\nto retrieve the controller constructor using the following steps:\n\n* check if a controller with given name is registered via `$controllerProvider`\n* check if evaluating the string on the current scope returns a constructor\n* if $controllerProvider#allowGlobals, check `window[constructor]` on the global\n`window` object (not recommended)\n\nThe string can use the `controller as property` syntax, where the controller instance is published\nas the specified property on the `scope`; the `scope` must be injected into `locals` param for this\nto work correctly.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "locals",
                "altName": null,
                "description": "Injection locals for Controller.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "bindings",
                "altName": null,
                "description": "Properties to add to the controller before invoking the constructor. This is used\nto simulate the `bindToController` feature and simplify certain kinds of tests.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$controller",
        "description": "A decorator for {@link ng.$controller} with additional `bindings` parameter, useful when testing\ncontrollers of directives that use {@link $compile#-bindtocontroller- `bindToController`}.\n\n\n## Example\n\n```js\n\n// Directive definition ...\n\nmyMod.directive('myDirective', {\ncontroller: 'MyDirectiveController',\nbindToController: {\nname: '@'\n}\n});\n\n\n// Controller definition ...\n\nmyMod.controller('MyDirectiveController', ['log', function($log) {\n$log.info(this.name);\n})];\n\n\n// In a test ...\n\ndescribe('myDirectiveController', function() {\nit('should write the bound name to the log', inject(function($controller, $log) {\nvar ctrl = $controller('MyDirective', { /* no locals &#42;/ }, { name: 'Clark Kent' });\nexpect(ctrl.name).toEqual('Clark Kent');\nexpect($log.info.logs).toEqual(['Clark Kent']);\n});\n});\n\n```",
        "return": "{Object} Instance of given controller.",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "$controller",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$controller ngMock.service:$controller downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$controller",
        "left": 82,
        "level": 1,
        "root": "ngMock",
        "right": 83
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "type",
        "name": "$rootScope.Scope",
        "module": "ngMock",
        "description": "{@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These\nmethods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when\n`ngMock` module is loaded.\n\nIn addition to all the regular `Scope` methods, the following helper methods are available:",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "$rootScope.Scope",
        "path": "angular/api",
        "groupId": 5,
        "type": "type",
        "handler": "ngdoc",
        "search": "$rootScope.Scope ngMock.type:$rootScope.Scope downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$rootScope.Scope",
        "left": 84,
        "level": 1,
        "root": "ngMock",
        "right": 89
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$countChildScopes",
        "module": "ngMock",
        "description": "Counts all the direct and indirect child scopes of the current scope.\n\nThe current scope is excluded from the count. The count includes all isolate child scopes.",
        "returns": "{number} Total number of child scopes.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "$countChildScopes",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$countChildScopes ngMock.method:$countChildScopes downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$countChildScopes",
        "left": 85,
        "level": 2,
        "root": "ngMock",
        "right": 86
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "$countWatchers",
        "module": "ngMock",
        "description": "Counts all the watchers of direct and indirect child scopes of the current scope.\n\nThe watchers of the current scope are included in the count and so are all the watchers of\nisolate child scopes.",
        "returns": "{number} Total number of watchers.",
        "parentDoc": {
            "module": "ngMock",
            "name": "$rootScope.Scope"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "$countWatchers",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "$countWatchers ngMock.method:$countWatchers downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$countWatchers",
        "left": 87,
        "level": 2,
        "root": "ngMock",
        "right": 88
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "Function",
                        "type": "function"
                    },
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "fns",
                "altName": null,
                "description": "any number of modules which are represented as string\naliases or as anonymous module initialization functions. The modules are used to\nconfigure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\nobject literal is passed they will be registered as values in the module, the key being\nthe module name and the value being what is returned.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.mock.module",
        "description": "*NOTE*: This function is also published on window for easy access.<br>\n*NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n\nThis function registers a module configuration code. It collects the configuration information\nwhich will be used when the injector is created by {@link angular.mock.inject inject}.\n\nSee {@link angular.mock.inject inject} for usage example",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "angular.mock.module",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.mock.module ngMock.function:angular.mock.module downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "angular.mock.module",
        "left": 90,
        "level": 1,
        "root": "ngMock",
        "right": 91
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Function",
                        "type": "function"
                    }
                ],
                "varName": "fns",
                "altName": null,
                "description": "any number of functions which will be injected using the injector.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "function",
        "name": "angular.mock.inject",
        "description": "*NOTE*: This function is also published on window for easy access.<br>\n*NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\n\nThe inject function wraps a function into an injectable function. The inject() creates new\ninstance of {@link auto.$injector $injector} per test, which is then used for\nresolving references.\n\n\n## Resolving References (Underscore Wrapping)\nOften, we would like to inject a reference once, in a `beforeEach()` block and reuse this\nin multiple `it()` clauses. To be able to do this we must assign the reference to a variable\nthat is declared in the scope of the `describe()` block. Since we would, most likely, want\nthe variable to have the same name of the reference we have a problem, since the parameter\nto the `inject()` function would hide the outer variable.\n\nTo help with this, the injected parameters can, optionally, be enclosed with underscores.\nThese are ignored by the injector when the reference name is resolved.\n\nFor example, the parameter `_myService_` would be resolved as the reference `myService`.\nSince it is available in the function body as _myService_, we can then assign it to a variable\ndefined in an outer scope.\n\n```\n// Defined out reference variable outside\nvar myService;\n\n// Wrap the parameter in underscores\nbeforeEach( inject( function(_myService_){\nmyService = _myService_;\n}));\n\n// Use myService in a series of tests.\nit('makes use of myService', function() {\nmyService.doStuff();\n});\n\n```\n\nSee also {@link angular.mock.module angular.mock.module}\n\n## Example\nExample of what a typical jasmine tests looks like with the inject method.\n```js\n\nangular.module('myApplicationModule', [])\n.value('mode', 'app')\n.value('version', 'v1.0.1');\n\n\ndescribe('MyApp', function() {\n\n// You need to load modules that you want to test,\n// it loads only the \"ng\" module by default.\nbeforeEach(module('myApplicationModule'));\n\n\n// inject() is used to inject arguments of all given functions\nit('should provide a version', inject(function(mode, version) {\nexpect(version).toEqual('v1.0.1');\nexpect(mode).toEqual('app');\n}));\n\n\n// The inject and module method can also be used inside of the it or beforeEach\nit('should override a version and test the new version is injected', function() {\n// module() takes functions or strings (module aliases)\nmodule(function($provide) {\n$provide.value('version', 'overridden'); // override version here\n});\n\ninject(function(version) {\nexpect(version).toEqual('overridden');\n});\n});\n});\n\n```",
        "parentDoc": {
            "module": "ngMock",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "module": "ngMock",
        "id": "angular.mock.inject",
        "path": "angular/api",
        "groupId": 5,
        "type": "function",
        "handler": "ngdoc",
        "search": "angular.mock.inject ngMock.function:angular.mock.inject downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "angular.mock.inject",
        "left": 92,
        "level": 1,
        "root": "ngMock",
        "right": 93
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngMockE2E",
        "module": "ngMockE2E",
        "packageName": "angular-mocks",
        "description": "The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\nCurrently there is only one mock present in this module -\nthe {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.",
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "ngMockE2E",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngMockE2E ngMockE2E.module:ngMockE2E downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "ngMockE2E",
        "left": 1,
        "level": 0,
        "root": "ngMockE2E",
        "right": 20
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$httpBackend",
        "module": "ngMockE2E",
        "description": "Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\napplications that use the {@link ng.$http $http service}.\n\n*Note*: For fake http backend implementation suitable for unit testing please see\n{@link ngMock.$httpBackend unit-testing $httpBackend mock}.\n\nThis implementation can be used to respond with static or dynamic responses via the `when` api\nand its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\nreal $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\ntemplates from a webserver).\n\nAs opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\nis being developed with the real backend api replaced with a mock, it is often desirable for\ncertain category of requests to bypass the mock and issue a real http request (e.g. to fetch\ntemplates or static files from the webserver). To configure the backend with this behavior\nuse the `passThrough` request handler of `when` instead of `respond`.\n\nAdditionally, we don't want to manually have to flush mocked out requests like we do during unit\ntesting. For this reason the e2e $httpBackend flushes mocked out requests\nautomatically, closely simulating the behavior of the XMLHttpRequest object.\n\nTo setup the application to run with this http backend, you have to create a module that depends\non the `ngMockE2E` and your application modules and defines the fake backend:\n\n```js\nmyAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\nmyAppDev.run(function($httpBackend) {\nphones = [{name: 'phone1'}, {name: 'phone2'}];\n\n// returns the current list of phones\n$httpBackend.whenGET('/phones').respond(phones);\n\n// adds a new phone to the phones array\n$httpBackend.whenPOST('/phones').respond(function(method, url, data) {\nvar phone = angular.fromJson(data);\nphones.push(phone);\nreturn [200, phone, {}];\n});\n$httpBackend.whenGET(/^\\/templates\\//).passThrough();\n//...\n});\n```\n\nAfterwards, bootstrap your app with this new module.",
        "parentDoc": {
            "module": "ngMockE2E",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "$httpBackend",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$httpBackend ngMockE2E.service:$httpBackend downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "$httpBackend",
        "left": 2,
        "level": 1,
        "root": "ngMockE2E",
        "right": 19
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "method",
                "altName": null,
                "description": "HTTP method.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers or function that receives http header\nobject and returns true if the headers match the current definition.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "when",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.\n\n- respond –\n`{function([status,] data[, headers, statusText])\n| function(function(method, url, data, headers)}`\n– The respond method takes a set of static data to be returned or a function that can return\nan array containing response status (number), response data (string), response headers\n(Object), and the text for the status (string).\n- passThrough – `{function()}` – Any request matching a backend definition with\n`passThrough` handler will be passed through to the real backend (an XHR request will be made\nto the server.)\n- Both methods return the `requestHandler` object for possible overrides.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "when",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "when ngMockE2E.method:when downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "when",
        "left": 3,
        "level": 2,
        "root": "ngMockE2E",
        "right": 4
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenGET",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for GET requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenGET",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenGET ngMockE2E.method:whenGET downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenGET",
        "left": 5,
        "level": 2,
        "root": "ngMockE2E",
        "right": 6
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenHEAD",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for HEAD requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenHEAD",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenHEAD ngMockE2E.method:whenHEAD downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenHEAD",
        "left": 7,
        "level": 2,
        "root": "ngMockE2E",
        "right": 8
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenDELETE",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for DELETE requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenDELETE",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenDELETE ngMockE2E.method:whenDELETE downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenDELETE",
        "left": 9,
        "level": 2,
        "root": "ngMockE2E",
        "right": 10
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenPOST",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for POST requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenPOST",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenPOST ngMockE2E.method:whenPOST downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenPOST",
        "left": 11,
        "level": 2,
        "root": "ngMockE2E",
        "right": 12
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenPUT",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for PUT requests.  For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenPUT",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenPUT ngMockE2E.method:whenPUT downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenPUT",
        "left": 13,
        "level": 2,
        "root": "ngMockE2E",
        "right": 14
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    }
                ],
                "varName": "data",
                "altName": null,
                "description": "HTTP request body.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "function(Object)",
                        "type": "function"
                    }
                ],
                "varName": "headers",
                "altName": null,
                "description": "HTTP headers.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenPATCH",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for PATCH requests.  For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenPATCH",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenPATCH ngMockE2E.method:whenPATCH downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenPATCH",
        "left": 15,
        "level": 2,
        "root": "ngMockE2E",
        "right": 16
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "RegExp",
                        "type": "regexp"
                    },
                    {
                        "name": "function(string)",
                        "type": "function"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "HTTP url or function that receives a url\nand returns true if the url matches the current definition.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "whenJSONP",
        "module": "ngMockE2E",
        "description": "Creates a new backend definition for JSONP requests. For more info see `when()`.",
        "returns": "{requestHandler} Returns an object with `respond` and `passThrough` methods that\ncontrol how a matched request is handled. You can save this object for later use and invoke\n`respond` or `passThrough` again in order to change how a matched request is handled.",
        "parentDoc": {
            "module": "ngMockE2E",
            "name": "$httpBackend"
        },
        "file": "downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "id": "whenJSONP",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "whenJSONP ngMockE2E.method:whenJSONP downloaded/angular/angular.js-master/src/ngMock/angular-mocks.js",
        "sortOn": "whenJSONP",
        "left": 17,
        "level": 2,
        "root": "ngMockE2E",
        "right": 18
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngResource",
        "description": "# ngResource\n\nThe `ngResource` module provides interaction support with RESTful services\nvia the $resource service.\n\n\n<div doc-module-components=\"ngResource\"></div>\n\nSee {@link ngResource.$resource `$resource`} for usage.",
        "file": "downloaded/angular/angular.js-master/src/ngResource/resource.js",
        "module": "ngResource",
        "id": "ngResource",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngResource ngResource.module:ngResource downloaded/angular/angular.js-master/src/ngResource/resource.js",
        "sortOn": "ngResource",
        "left": 1,
        "level": 0,
        "root": "ngResource",
        "right": 4
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "url",
                "altName": null,
                "description": "A parameterized URL template with parameters prefixed by `:` as in\n`/user/:username`. If you are using a URL with a port number (e.g.\n`http://example.com:8080/api`), it will be respected.\n\nIf you are using a url with a suffix, just add the suffix, like this:\n`$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\nor even `$resource('http://example.com/resource/:resource_id.:format')`\nIf the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\ncollapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\ncan escape it with `/\\.`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "paramDefaults",
                "altName": null,
                "description": "Default values for `url` parameters. These can be overridden in\n`actions` methods. If any of the parameter value is a function, it will be executed every time\nwhen a param value needs to be obtained for a request (unless the param was overridden).\n\nEach key value in the parameter object is first bound to url template if present and then any\nexcess keys are appended to the url search query after the `?`.\n\nGiven a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\nURL `/path/greet?salutation=Hello`.\n\nIf the parameter value is prefixed with `@` then the value for that parameter will be extracted\nfrom the corresponding property on the `data` object (provided when calling an action method).  For\nexample, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`\nwill be `data.someProp`.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object.<Object>",
                        "type": "object.<object>"
                    }
                ],
                "varName": "actions",
                "altName": null,
                "description": "Hash with declaration of custom actions that should extend\nthe default set of resource actions. The declaration should be created in the format of {@link\nng.$http#usage $http.config}:\n\n{action1: {method:?, params:?, isArray:?, headers:?, ...},\naction2: {method:?, params:?, isArray:?, headers:?, ...},\n...}\n\nWhere:\n\n-*`action`** – {string} – The name of action. This name becomes the name of the method on\nyour resource object.\n-*`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n`DELETE`, `JSONP`, etc).\n-*`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\nthe parameter value is a function, it will be executed every time when a param value needs to\nbe obtained for a request (unless the param was overridden).\n-*`url`** – {string} – action specific `url` override. The url templating is supported just\nlike for the resource-level urls.\n-*`isArray`** – {boolean=} – If true then the returned object for this action is an array,\nsee `returns` section.\n-*`transformRequest`** –\n`{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\ntransform function or an array of such functions. The transform function takes the http\nrequest body and headers and returns its transformed (typically serialized) version.\nBy default, transformRequest will contain one function that checks if the request data is\nan object and serializes to using `angular.toJson`. To prevent this behavior, set\n`transformRequest` to an empty array: `transformRequest: []`\n-*`transformResponse`** –\n`{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\ntransform function or an array of such functions. The transform function takes the http\nresponse body and headers and returns its transformed (typically deserialized) version.\nBy default, transformResponse will contain one function that checks if the response looks like\na JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set\n`transformResponse` to an empty array: `transformResponse: []`\n-*`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\nGET request, otherwise if a cache instance built with\n{@link ng.$cacheFactory $cacheFactory}, this cache will be used for\ncaching.\n-*`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that\nshould abort the request when resolved.\n-*`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\nXHR object. See\n[requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\nfor more information.\n-*`responseType`** - `{string}` - see\n[requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n-*`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n`response` and `responseError`. Both `response` and `responseError` interceptors get called\nwith `http response` object. See {@link ng.$http $http interceptors}.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "options",
                "altName": null,
                "description": "Hash with custom settings that should extend the\ndefault `$resourceProvider` behavior.  The only supported option is\n\nWhere:\n\n-*`stripTrailingSlashes`** – {boolean} – If true then the trailing\nslashes from any calculated URL will be stripped. (Defaults to true.)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$resource",
        "requires": [
            "$http"
        ],
        "description": "A factory which creates a resource object that lets you interact with\n[RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n\nThe returned resource object has action methods which provide high-level behaviors without\nthe need to interact with the low level {@link ng.$http $http} service.\n\nRequires the {@link ngResource `ngResource`} module to be installed.\n\nBy default, trailing slashes will be stripped from the calculated URLs,\nwhich can pose problems with server backends that do not expect that\nbehavior.  This can be disabled by configuring the `$resourceProvider` like\nthis:\n\n```js\n     app.config(['$resourceProvider', function($resourceProvider) {\n       // Don't strip trailing slashes from calculated URLs\n       $resourceProvider.defaults.stripTrailingSlashes = false;\n     }]);\n```",
        "returns": "{Object} A resource \"class\" object with methods for the default set of resource actions\noptionally extended with custom `actions`. The default set contains these actions:\n```js\n{ 'get':    {method:'GET'},\n'save':   {method:'POST'},\n'query':  {method:'GET', isArray:true},\n'remove': {method:'DELETE'},\n'delete': {method:'DELETE'} };\n```\n\nCalling these methods invoke an {@link ng.$http} with the specified http method,\ndestination and parameters. When the data is returned from the server then the object is an\ninstance of the resource class. The actions `save`, `remove` and `delete` are available on it\nas  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\nread, update, delete) on server-side data like this:\n```js\nvar User = $resource('/user/:userId', {userId:'@id'});\nvar user = User.get({userId:123}, function() {\nuser.abc = true;\nuser.$save();\n});\n```\n\nIt is important to realize that invoking a $resource object method immediately returns an\nempty reference (object or array depending on `isArray`). Once the data is returned from the\nserver the existing reference is populated with the actual data. This is a useful trick since\nusually the resource is assigned to a model which is then rendered by the view. Having an empty\nobject results in no rendering, once the data arrives from the server then the object is\npopulated with the data and the view automatically re-renders itself showing the new data. This\nmeans that in most cases one never has to write a callback function for the action methods.\n\nThe action methods on the class object or instance object can be invoked with the following\nparameters:\n\n- HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n- non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n- non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n\n\nSuccess callback is called with (value, responseHeaders) arguments. Error callback is called\nwith (httpResponse) argument.\n\nClass actions return empty instance (with additional properties below).\nInstance actions return promise of the action.\n\nThe Resource instances and collection have these additional properties:\n\n- `$promise`: the {@link ng.$q promise} of the original server interaction that created this\ninstance or collection.\n\nOn success, the promise is resolved with the same resource instance or collection object,\nupdated with data from server. This makes it easy to use in\n{@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\nrendering until the resource(s) are loaded.\n\nOn failure, the promise is resolved with the {@link ng.$http http response} object, without\nthe `resource` property.\n\nIf an interceptor object was provided, the promise will instead be resolved with the value\nreturned by the interceptor.\n\n- `$resolved`: `true` after first server interaction is completed (either with success or\nrejection), `false` before that. Knowing if the Resource has been resolved is useful in\ndata-binding.",
        "example": "# Credit card resource\n\n```js\n     // Define CreditCard class\n     var CreditCard = $resource('/user/:userId/card/:cardId',\n      {userId:123, cardId:'@id'}, {\n       charge: {method:'POST', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = \"J. Smith\";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:'0123'});\n     newCard.name = \"Mike Smith\";\n     newCard.$save();\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\n     expect(newCard.id).toEqual(789);\n```\n\nThe object returned from this function execution is a resource \"class\" which has \"static\" method\nfor each action in the definition.\n\nCalling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n`headers`.\nWhen the data is returned from the server then the object is an instance of the resource type and\nall of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\noperations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n\nIt's worth noting that the success callback for `get`, `query` and other methods gets passed\nin the response that came from the server as well as $http header getter function, so one\ncould rewrite the above example and get access to http headers as:\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(u, getResponseHeaders){\n       u.abc = true;\n       u.$save(function(u, putResponseHeaders) {\n         //u => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n\nYou can also access the raw `$http` promise via the `$promise` property on the object returned\n\n   ```\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n\n# Creating a custom 'PUT' request\nIn this example we create a custom method on our resource to make a PUT request\n```js\nvar app = angular.module('app', ['ngResource', 'ngRoute']);\n\n// Some APIs expect a PUT request in the format URL/object/ID\n// Here we are creating an 'update' method\napp.factory('Notes', ['$resource', function($resource) {\nreturn $resource('/notes/:id', null,\n{\n'update': { method:'PUT' }\n});\n}]);\n\n// In our controller we get the ID from the URL using ngRoute and $routeParams\n// We pass in $routeParams and our Notes factory along with $scope\napp.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                      function($scope, $routeParams, Notes) {\n// First get a note object from the factory\nvar note = Notes.get({ id:$routeParams.id });\n$id = note.id;\n\n// Now call update passing in the ID first then the object you are updating\nNotes.update({ id:$id }, note);\n\n// This will PUT /notes/ID with the note object in the request payload\n}]);\n```",
        "parentDoc": {
            "module": "ngResource",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngResource/resource.js",
        "module": "ngResource",
        "id": "$resource",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$resource ngResource.service:$resource downloaded/angular/angular.js-master/src/ngResource/resource.js",
        "sortOn": "$resource",
        "left": 2,
        "level": 1,
        "root": "ngResource",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngRoute",
        "description": "# ngRoute\n\nThe `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n\n<div doc-module-components=\"ngRoute\"></div>",
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "ngRoute",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngRoute ngRoute.module:ngRoute downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "ngRoute",
        "left": 1,
        "level": 0,
        "root": "ngRoute",
        "right": 30
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "onload",
                "altName": null,
                "description": "Expression to evaluate whenever the view updates.",
                "optional": true,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "autoscroll",
                "altName": null,
                "description": "Whether `ngView` should call {@link ng.$anchorScroll\n$anchorScroll} to scroll the viewport after the view is updated.\n\n- If the attribute is not set, disable scrolling.\n- If the attribute is set without value, enable scrolling.\n- Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\nas an expression yields a truthy value.",
                "optional": true,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngView",
        "restrict": "ECA",
        "description": "# Overview\n`ngView` is a directive that complements the {@link ngRoute.$route $route} service by\nincluding the rendered template of the current route into the main layout (`index.html`) file.\nEvery time the current route changes, the included view changes with it according to the\nconfiguration of the `$route` service.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
        "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
        "scope": true,
        "priority": "400",
        "example": "<example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"BookCtrl\";\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"ChapterCtrl\";\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: BookCtrl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ngRoute",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/directive/ngView.js",
        "module": "ngRoute",
        "id": "ngView",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngView ngRoute.directive:ngView downloaded/angular/angular.js-master/src/ngRoute/directive/ngView.js",
        "sortOn": "ngView",
        "left": 2,
        "level": 1,
        "root": "ngRoute",
        "right": 5
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$viewContentLoaded",
        "eventType": "emit on the current ngView scope",
        "description": "Emitted every time the ngView content is reloaded.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "ngView"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/directive/ngView.js",
        "module": "ngRoute",
        "id": "$viewContentLoaded",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$viewContentLoaded ngRoute.event:$viewContentLoaded downloaded/angular/angular.js-master/src/ngRoute/directive/ngView.js",
        "sortOn": "$viewContentLoaded",
        "left": 3,
        "level": 2,
        "root": "ngRoute",
        "right": 4
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "provider",
        "name": "$routeProvider",
        "description": "Used for configuring routes.\n\n## Example\nSee {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n\n## Dependencies\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
        "parentDoc": {
            "module": "ngRoute",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$routeProvider",
        "path": "angular/api",
        "groupId": 5,
        "type": "provider",
        "handler": "ngdoc",
        "search": "$routeProvider ngRoute.provider:$routeProvider downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$routeProvider",
        "left": 6,
        "level": 1,
        "root": "ngRoute",
        "right": 13
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "path",
                "altName": null,
                "description": "Route path (matched against `$location.path`). If `$location.path`\ncontains redundant trailing slash or is missing one, the route will still match and the\n`$location.path` will be updated to add or drop the trailing slash to exactly match the\nroute definition.\n\n* `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\nto the next slash are matched and stored in `$routeParams` under the given `name`\nwhen the route matches.\n* `path` can contain named groups starting with a colon and ending with a star:\ne.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\nwhen the route matches.\n* `path` can contain optional named groups with a question mark: e.g.`:name?`.\n\nFor example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n`/color/brown/largecode/code/with/slashes/edit` and extract:\n\n* `color: brown`\n* `largecode: code/with/slashes`.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "route",
                "altName": null,
                "description": "Mapping information to be assigned to `$route.current` on route\nmatch.\n\nObject properties:\n\n- `controller` – `{(string|function()=}` – Controller fn that should be associated with\nnewly created scope or the name of a {@link angular.Module#controller registered\ncontroller} if passed as a string.\n- `controllerAs` – `{string=}` – An identifier name for a reference to the controller.\nIf present, the controller will be published to scope under the `controllerAs` name.\n- `template` – `{string=|function()=}` – html template as a string or a function that\nreturns an html template as a string which should be used by {@link\nngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\nThis property takes precedence over `templateUrl`.\n\nIf `template` is a function, it will be called with the following parameters:\n\n- `{Array.<Object>}` - route parameters extracted from the current\n`$location.path()` by applying the current route\n\n- `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\ntemplate that should be used by {@link ngRoute.directive:ngView ngView}.\n\nIf `templateUrl` is a function, it will be called with the following parameters:\n\n- `{Array.<Object>}` - route parameters extracted from the current\n`$location.path()` by applying the current route\n\n- `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\nbe injected into the controller. If any of these dependencies are promises, the router\nwill wait for them all to be resolved or one to be rejected before the controller is\ninstantiated.\nIf all the promises are resolved successfully, the values of the resolved promises are\ninjected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\nfired. If any of the promises are rejected the\n{@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\nis:\n\n- `key` – `{string}`: a name of a dependency to be injected into the controller.\n- `factory` - `{string|function}`: If `string` then it is an alias for a service.\nOtherwise if function, then it is {@link auto.$injector#invoke injected}\nand the return value is treated as the dependency. If the result is a promise, it is\nresolved before its value is injected into the controller. Be aware that\n`ngRoute.$routeParams` will still refer to the previous route within these resolve\nfunctions.  Use `$route.current.params` to access the new route parameters, instead.\n\n- `redirectTo` – {(string|function())=} – value to update\n{@link ng.$location $location} path with and trigger route redirection.\n\nIf `redirectTo` is a function, it will be called with the following parameters:\n\n- `{Object.<string>}` - route parameters extracted from the current\n`$location.path()` by applying the current route templateUrl.\n- `{string}` - current `$location.path()`\n- `{Object}` - current `$location.search()`\n\nThe custom `redirectTo` function is expected to return a string which will be used\nto update `$location.path()` and `$location.search()`.\n\n- `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\nor `$location.hash()` changes.\n\nIf the option is set to `false` and url in the browser changes, then\n`$routeUpdate` event is broadcasted on the root scope.\n\n- `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n\nIf the option is set to `true`, then the particular route can be matched without being\ncase sensitive",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "when",
        "returns": "{Object} self",
        "description": "Adds a new route definition to the `$route` service.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$routeProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "when",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "when ngRoute.method:when downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "when",
        "left": 7,
        "level": 2,
        "root": "ngRoute",
        "right": 8
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "property",
        "name": "caseInsensitiveMatch",
        "description": "A boolean property indicating if routes defined\nusing this provider should be matched using a case insensitive\nalgorithm. Defaults to `false`.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$routeProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "caseInsensitiveMatch",
        "path": "angular/api",
        "groupId": 5,
        "type": "property",
        "handler": "ngdoc",
        "search": "caseInsensitiveMatch ngRoute.property:caseInsensitiveMatch downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "caseInsensitiveMatch",
        "left": 9,
        "level": 2,
        "root": "ngRoute",
        "right": 10
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "params",
                "altName": null,
                "description": "Mapping information to be assigned to `$route.current`.\nIf called with a string, the value maps to `redirectTo`.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "otherwise",
        "description": "Sets route definition that will be used on route change when no other route definition\nis matched.",
        "returns": "{Object} self",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$routeProvider"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "otherwise",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "otherwise ngRoute.method:otherwise downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "otherwise",
        "left": 11,
        "level": 2,
        "root": "ngRoute",
        "right": 12
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$route",
        "requires": [
            "$location",
            "$routeParams"
        ],
        "property": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "current",
                "altName": null,
                "description": "Reference to the current route definition.\nThe route definition contains:\n\n- `controller`: The controller constructor as define in route definition.\n- `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\ncontroller instantiation. The `locals` contain\nthe resolved values of the `resolve` map. Additionally the `locals` also contain:\n\n- `$scope` - The current route scope.\n- `$template` - The current route template HTML.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "routes",
                "altName": null,
                "description": "Object with all route configuration Objects as its properties.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "description": "`$route` is used for deep-linking URLs to controllers and views (HTML partials).\nIt watches `$location.url()` and tries to map the path to an existing route definition.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nYou can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n\nThe `$route` service is typically used in conjunction with the\n{@link ngRoute.directive:ngView `ngView`} directive and the\n{@link ngRoute.$routeParams `$routeParams`} service.",
        "example": "This example shows how changing the URL hash causes the `$route` to match a route against the\nURL, and the `ngView` pulls in the partial.\n\n<example name=\"$route-service\" module=\"ngRouteExample\"\ndeps=\"angular-route.js\" fixBase=\"true\">\n<file name=\"index.html\">\n<div ng-controller=\"MainController\">\nChoose:\n<a href=\"Book/Moby\">Moby</a> |\n<a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n<a href=\"Book/Gatsby\">Gatsby</a> |\n<a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n<a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n<div ng-view></div>\n\n<hr />\n\n<pre>$location.path() = {{$location.path()}}</pre>\n<pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n<pre>$route.current.params = {{$route.current.params}}</pre>\n<pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n<pre>$routeParams = {{$routeParams}}</pre>\n</div>\n</file>\n\n<file name=\"book.html\">\ncontroller: {{name}}<br />\nBook Id: {{params.bookId}}<br />\n</file>\n\n<file name=\"chapter.html\">\ncontroller: {{name}}<br />\nBook Id: {{params.bookId}}<br />\nChapter Id: {{params.chapterId}}\n</file>\n\n<file name=\"script.js\">\nangular.module('ngRouteExample', ['ngRoute'])\n\n.controller('MainController', function($scope, $route, $routeParams, $location) {\n$scope.$route = $route;\n$scope.$location = $location;\n$scope.$routeParams = $routeParams;\n})\n\n.controller('BookController', function($scope, $routeParams) {\n$scope.name = \"BookController\";\n$scope.params = $routeParams;\n})\n\n.controller('ChapterController', function($scope, $routeParams) {\n$scope.name = \"ChapterController\";\n$scope.params = $routeParams;\n})\n\n.config(function($routeProvider, $locationProvider) {\n$routeProvider\n.when('/Book/:bookId', {\ntemplateUrl: 'book.html',\ncontroller: 'BookController',\nresolve: {\n// I will cause a 1 second delay\ndelay: function($q, $timeout) {\nvar delay = $q.defer();\n$timeout(delay.resolve, 1000);\nreturn delay.promise;\n}\n}\n})\n.when('/Book/:bookId/ch/:chapterId', {\ntemplateUrl: 'chapter.html',\ncontroller: 'ChapterController'\n});\n\n// configure html5 to get links working on jsfiddle\n$locationProvider.html5Mode(true);\n});\n\n</file>\n\n<file name=\"protractor.js\" type=\"protractor\">\nit('should load and compile correct template', function() {\nelement(by.linkText('Moby: Ch1')).click();\nvar content = element(by.css('[ng-view]')).getText();\nexpect(content).toMatch(/controller\\: ChapterController/);\nexpect(content).toMatch(/Book Id\\: Moby/);\nexpect(content).toMatch(/Chapter Id\\: 1/);\n\nelement(by.partialLinkText('Scarlet')).click();\n\ncontent = element(by.css('[ng-view]')).getText();\nexpect(content).toMatch(/controller\\: BookController/);\nexpect(content).toMatch(/Book Id\\: Scarlet/);\n});\n</file>\n</example>",
        "parentDoc": {
            "module": "ngRoute",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$route",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$route ngRoute.service:$route downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$route",
        "left": 14,
        "level": 1,
        "root": "ngRoute",
        "right": 27
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "next",
                "altName": null,
                "description": "Future route information.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "current",
                "altName": null,
                "description": "Current route information.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$routeChangeStart",
        "eventType": "broadcast on root scope",
        "description": "Broadcasted before a route change. At this  point the route services starts\nresolving all of the dependencies needed for the route change to occur.\nTypically this involves fetching the view template as well as any dependencies\ndefined in `resolve` route property. Once  all of the dependencies are resolved\n`$routeChangeSuccess` is fired.\n\nThe route change (and the `$location` change that triggered it) can be prevented\nby calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\nfor more details about event object.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$routeChangeStart",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$routeChangeStart ngRoute.event:$routeChangeStart downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$routeChangeStart",
        "left": 15,
        "level": 2,
        "root": "ngRoute",
        "right": 16
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "current",
                "altName": null,
                "description": "Current route information.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    },
                    {
                        "name": "Undefined",
                        "type": "undefined"
                    }
                ],
                "varName": "previous",
                "altName": null,
                "description": "Previous route information, or undefined if current is\nfirst route entered.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$routeChangeSuccess",
        "eventType": "broadcast on root scope",
        "description": "Broadcasted after a route dependencies are resolved.\n{@link ngRoute.directive:ngView ngView} listens for the directive\nto instantiate the controller and render the view.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$routeChangeSuccess",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$routeChangeSuccess ngRoute.event:$routeChangeSuccess downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$routeChangeSuccess",
        "left": 17,
        "level": 2,
        "root": "ngRoute",
        "right": 18
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "current",
                "altName": null,
                "description": "Current route information.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "previous",
                "altName": null,
                "description": "Previous route information.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "rejection",
                "altName": null,
                "description": "Rejection of the promise. Usually the error of the failed promise.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$routeChangeError",
        "eventType": "broadcast on root scope",
        "description": "Broadcasted if any of the resolve promises are rejected.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$routeChangeError",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$routeChangeError ngRoute.event:$routeChangeError downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$routeChangeError",
        "left": 19,
        "level": 2,
        "root": "ngRoute",
        "right": 20
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    }
                ],
                "varName": "angularEvent",
                "altName": null,
                "description": "Synthetic event object",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "Route",
                        "type": "route"
                    }
                ],
                "varName": "current",
                "altName": null,
                "description": "Current/previous route information.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "event",
        "name": "$routeUpdate",
        "eventType": "broadcast on root scope",
        "description": "The `reloadOnSearch` property has been set to false, and we are reusing the same\ninstance of the Controller.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "$routeUpdate",
        "path": "angular/api",
        "groupId": 5,
        "type": "event",
        "handler": "ngdoc",
        "search": "$routeUpdate ngRoute.event:$routeUpdate downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "$routeUpdate",
        "left": 21,
        "level": 2,
        "root": "ngRoute",
        "right": 22
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "reload",
        "description": "Causes `$route` service to reload the current route even if\n{@link ng.$location $location} hasn't changed.\n\nAs a result of that, {@link ngRoute.directive:ngView ngView}\ncreates new scope and reinstantiates the controller.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "reload",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "reload ngRoute.method:reload downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "reload",
        "left": 23,
        "level": 2,
        "root": "ngRoute",
        "right": 24
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "Object",
                        "type": "object"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    },
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "newParams",
                "altName": null,
                "description": "mapping of URL parameter names to values",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "updateParams",
        "description": "Causes `$route` service to update the current URL, replacing\ncurrent route parameters with those specified in `newParams`.\nProvided property names that match the route's path segment\ndefinitions will be interpolated into the location's path, while\nremaining properties will be treated as query params.",
        "parentDoc": {
            "module": "ngRoute",
            "name": "$route"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "module": "ngRoute",
        "id": "updateParams",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "updateParams ngRoute.method:updateParams downloaded/angular/angular.js-master/src/ngRoute/route.js",
        "sortOn": "updateParams",
        "left": 25,
        "level": 2,
        "root": "ngRoute",
        "right": 26
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$routeParams",
        "requires": [
            "$route"
        ],
        "description": "The `$routeParams` service allows you to retrieve the current set of route parameters.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nThe route parameters are a combination of {@link ng.$location `$location`}'s\n{@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\nThe `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n\nIn case of parameter name collision, `path` params take precedence over `search` params.\n\nThe service guarantees that the identity of the `$routeParams` object will remain unchanged\n(but its properties will likely change) even when a route change occurs.\n\nNote that the `$routeParams` are only updatedafter* a route change completes successfully.\nThis means that you cannot rely on `$routeParams` being correct in route resolve functions.\nInstead you can use `$route.current.params` to access the new route's parameters.",
        "example": "```js\n// Given:\n// URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n// Route: /Chapter/:chapterId/Section/:sectionId\n//\n// Then\n$routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n```",
        "parentDoc": {
            "module": "ngRoute",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngRoute/routeParams.js",
        "module": "ngRoute",
        "id": "$routeParams",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$routeParams ngRoute.service:$routeParams downloaded/angular/angular.js-master/src/ngRoute/routeParams.js",
        "sortOn": "$routeParams",
        "left": 28,
        "level": 1,
        "root": "ngRoute",
        "right": 29
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngSanitize",
        "description": "# ngSanitize\n\nThe `ngSanitize` module provides functionality to sanitize HTML.\n\n\n<div doc-module-components=\"ngSanitize\"></div>\n\nSee {@link ngSanitize.$sanitize `$sanitize`} for usage.",
        "file": "downloaded/angular/angular.js-master/src/ngSanitize/sanitize.js",
        "module": "ngSanitize",
        "id": "ngSanitize",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngSanitize ngSanitize.module:ngSanitize downloaded/angular/angular.js-master/src/ngSanitize/sanitize.js",
        "sortOn": "ngSanitize",
        "left": 1,
        "level": 0,
        "root": "ngSanitize",
        "right": 6
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "text",
                "altName": null,
                "description": "Input text.",
                "optional": false,
                "defaultValue": null
            },
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "target",
                "altName": null,
                "description": "Window (_blank|_self|_parent|_top) or named frame to open links in.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "filter",
        "name": "linky",
        "kind": "function",
        "description": "Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\nplain email address links.\n\nRequires the {@link ngSanitize `ngSanitize`} module to be installed.",
        "returns": "{string} Html-linkified text.",
        "usage": "<span ng-bind-html=\"linky_expression | linky\"></span>",
        "example": "<example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <script>\n         angular.module('linkyExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', function($scope) {\n             $scope.snippet =\n               'Pretty text with some links:\\n'+\n               'http://angularjs.org/,\\n'+\n               'mailto:us@somewhere.org,\\n'+\n               'another@somewhere.org,\\n'+\n               'and one more: ftp://127.0.0.1/.';\n             $scope.snippetWithTarget = 'http://angularjs.org/';\n           }]);\n       </script>\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Filter</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithTarget | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n     </file>\n   </example>",
        "parentDoc": {
            "module": "ngSanitize",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngSanitize/filter/linky.js",
        "module": "ngSanitize",
        "id": "linky",
        "path": "angular/api",
        "groupId": 5,
        "type": "filter",
        "handler": "ngdoc",
        "search": "linky ngSanitize.filter:linky downloaded/angular/angular.js-master/src/ngSanitize/filter/linky.js",
        "sortOn": "linky",
        "left": 2,
        "level": 1,
        "root": "ngSanitize",
        "right": 3
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "string",
                        "type": "string"
                    }
                ],
                "varName": "html",
                "altName": null,
                "description": "HTML input.",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$sanitize",
        "kind": "function",
        "description": "The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\nthen serialized back to properly escaped html string. This means that no unsafe input can make\nit into the returned string, however, since our parser is more strict than a typical browser\nparser, it's possible that some obscure input, which would be recognized as valid HTML by a\nbrowser, won't make it through the sanitizer. The input may also contain SVG markup.\nThe whitelist is configured using the functions `aHrefSanitizationWhitelist` and\n`imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.",
        "returns": "{string} Sanitized HTML.",
        "example": "<example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>",
        "parentDoc": {
            "module": "ngSanitize",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngSanitize/sanitize.js",
        "module": "ngSanitize",
        "id": "$sanitize",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$sanitize ngSanitize.service:$sanitize downloaded/angular/angular.js-master/src/ngSanitize/sanitize.js",
        "sortOn": "$sanitize",
        "left": 4,
        "level": 1,
        "root": "ngSanitize",
        "right": 5
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "module",
        "name": "ngTouch",
        "description": "# ngTouch\n\nThe `ngTouch` module provides touch events and other helpers for touch-enabled devices.\nThe implementation is based on jQuery Mobile touch event handling\n([jquerymobile.com](http://jquerymobile.com/)).\n\n\nSee {@link ngTouch.$swipe `$swipe`} for usage.\n\n<div doc-module-components=\"ngTouch\"></div>",
        "file": "downloaded/angular/angular.js-master/src/ngTouch/touch.js",
        "module": "ngTouch",
        "id": "ngTouch",
        "path": "angular/api",
        "groupId": 5,
        "type": "module",
        "handler": "ngdoc",
        "search": "ngTouch ngTouch.module:ngTouch downloaded/angular/angular.js-master/src/ngTouch/touch.js",
        "sortOn": "ngTouch",
        "left": 1,
        "level": 0,
        "root": "ngTouch",
        "right": 12
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngClick",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate\nupon tap. (Event object is available as `$event`)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngClick",
        "description": "A more powerful replacement for the default ngClick designed to be used on touchscreen\ndevices. Most mobile browsers wait about 300ms after a tap-and-release before sending\nthe click event. This version handles them immediately, and then prevents the\nfollowing click event from propagating.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\nThis directive can fall back to using an ordinary click event, and so works on desktop\nbrowsers as well as mobile.\n\nThis directive also sets the CSS class `ng-click-active` while the element is being held\ndown (by a mouse click or touch) so you can restyle the depressed element if you wish.",
        "element": "ANY",
        "example": "<example module=\"ngClickExample\" deps=\"angular-touch.js\">\n      <file name=\"index.html\">\n        <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n          Increment\n        </button>\n        count: {{ count }}\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngClickExample', ['ngTouch']);\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ngTouch",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngTouch/directive/ngClick.js",
        "module": "ngTouch",
        "id": "ngClick",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngClick ngTouch.directive:ngClick downloaded/angular/angular.js-master/src/ngTouch/directive/ngClick.js",
        "sortOn": "ngClick",
        "left": 2,
        "level": 1,
        "root": "ngTouch",
        "right": 3
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngSwipeLeft",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate\nupon left swipe. (Event object is available as `$event`)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSwipeLeft",
        "description": "Specify custom behavior when an element is swiped to the left on a touchscreen device.\nA leftward swipe is a quick, right-to-left slide of the finger.\nThough ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nTo disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to\nthe `ng-swipe-left` or `ng-swipe-right` DOM Element.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
        "element": "ANY",
        "example": "<example module=\"ngSwipeLeftExample\" deps=\"angular-touch.js\">\n      <file name=\"index.html\">\n        <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n          Some list content, like an email in the inbox\n        </div>\n        <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n          <button ng-click=\"reply()\">Reply</button>\n          <button ng-click=\"delete()\">Delete</button>\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngSwipeLeftExample', ['ngTouch']);\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ngTouch",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngTouch/directive/ngSwipe.js",
        "module": "ngTouch",
        "id": "ngSwipeLeft",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSwipeLeft ngTouch.directive:ngSwipeLeft downloaded/angular/angular.js-master/src/ngTouch/directive/ngSwipe.js",
        "sortOn": "ngSwipeLeft",
        "left": 4,
        "level": 1,
        "root": "ngTouch",
        "right": 5
    },
    {
        "params": [
            {
                "type": [
                    {
                        "name": "expression",
                        "type": "expression"
                    }
                ],
                "varName": "ngSwipeRight",
                "altName": null,
                "description": "{@link guide/expression Expression} to evaluate\nupon right swipe. (Event object is available as `$event`)",
                "optional": false,
                "defaultValue": null
            }
        ],
        "docType": "ngdoc",
        "ngdoc": "directive",
        "name": "ngSwipeRight",
        "description": "Specify custom behavior when an element is swiped to the right on a touchscreen device.\nA rightward swipe is a quick, left-to-right slide of the finger.\nThough ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
        "element": "ANY",
        "example": "<example module=\"ngSwipeRightExample\" deps=\"angular-touch.js\">\n      <file name=\"index.html\">\n        <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n          Some list content, like an email in the inbox\n        </div>\n        <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n          <button ng-click=\"reply()\">Reply</button>\n          <button ng-click=\"delete()\">Delete</button>\n        </div>\n      </file>\n      <file name=\"script.js\">\n        angular.module('ngSwipeRightExample', ['ngTouch']);\n      </file>\n    </example>",
        "parentDoc": {
            "module": "ngTouch",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngTouch/directive/ngSwipe.js",
        "module": "ngTouch",
        "id": "ngSwipeRight",
        "path": "angular/api",
        "groupId": 5,
        "type": "directive",
        "handler": "ngdoc",
        "search": "ngSwipeRight ngTouch.directive:ngSwipeRight downloaded/angular/angular.js-master/src/ngTouch/directive/ngSwipe.js",
        "sortOn": "ngSwipeRight",
        "left": 6,
        "level": 1,
        "root": "ngTouch",
        "right": 7
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "service",
        "name": "$swipe",
        "description": "The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe\nbehavior, to make implementing swipe-related directives more convenient.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\n`$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by\n`ngCarousel` in a separate component.\n\n# Usage\nThe `$swipe` service is an object with a single method: `bind`. `bind` takes an element\nwhich is to be watched for swipes, and an object with four handler functions. See the\ndocumentation for `bind` below.",
        "parentDoc": {
            "module": "ngTouch",
            "type": "module"
        },
        "file": "downloaded/angular/angular.js-master/src/ngTouch/swipe.js",
        "module": "ngTouch",
        "id": "$swipe",
        "path": "angular/api",
        "groupId": 5,
        "type": "service",
        "handler": "ngdoc",
        "search": "$swipe ngTouch.service:$swipe downloaded/angular/angular.js-master/src/ngTouch/swipe.js",
        "sortOn": "$swipe",
        "left": 8,
        "level": 1,
        "root": "ngTouch",
        "right": 11
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "bind",
        "description": "The main method of `$swipe`. It takes an element to be watched for swipe motions, and an\nobject containing event handlers.\nThe pointer types that should be used can be specified via the optional\nthird argument, which is an array of strings `'mouse'` and `'touch'`. By default,\n`$swipe` will listen for `mouse` and `touch` events.\n\nThe four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`\nreceive as a parameter a coordinates object of the form `{ x: 150, y: 310 }`.\n\n`start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is\nwatching for `touchmove` or `mousemove` events. These events are ignored until the total\ndistance moved in either dimension exceeds a small threshold.\n\nOnce this threshold is exceeded, either the horizontal or vertical delta is greater.\n- If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.\n- If the vertical distance is greater, this is a scroll, and we let the browser take over.\nA `cancel` event is sent.\n\n`move` is called on `mousemove` and `touchmove` after the above logic has determined that\na swipe is in progress.\n\n`end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.\n\n`cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling\nas described above.",
        "parentDoc": {
            "module": "ngTouch",
            "name": "$swipe"
        },
        "file": "downloaded/angular/angular.js-master/src/ngTouch/swipe.js",
        "module": "ngTouch",
        "id": "bind",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "bind ngTouch.method:bind downloaded/angular/angular.js-master/src/ngTouch/swipe.js",
        "sortOn": "bind",
        "left": 9,
        "level": 2,
        "root": "ngTouch",
        "right": 10
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Developer Guide",
        "description": "\n\n# Guide to AngularJS Documentation\n\nEverything you need to know about AngularJS\n\n* {@link guide/introduction What is AngularJS?}\n* {@link guide/concepts Conceptual Overview}\n\n## Tutorials\n\n* {@link tutorial/index Official AngularJS Tutorial}\n* [10 Reasons Why You Should Use AngularJS](http://www.sitepoint.com/10-reasons-use-angularjs/)\n* [10 Reasons Why Developers Should Learn AngularJS](http://wintellect.com/blogs/jlikness/10-reasons-web-developers-should-learn-angularjs)\n* [Design Principles of AngularJS (video)](https://www.youtube.com/watch?v=HCR7i5F5L8c)\n* [Fundamentals in 60 Minutes (video)](http://www.youtube.com/watch?v=i9MHigUZKEM)\n* [For folks with a jQuery background](http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background)\n\n## Core Concepts\n\n### Templates\n\nIn Angular applications, you move the job of filling page templates with data from the server to the client.  The result is a system better structured for dynamic page updates.  Below are the core features you'll use.\n\n* {@link guide/databinding Data binding}\n* {@link guide/expression Expressions}\n* {@link guide/directive Directives}\n* {@link ngRoute.$route Views and routes (see the example)}\n* {@link guide/filter Filters}\n* {@link guide/forms Forms} and [Concepts of AngularJS Forms](http://mrbool.com/the-concepts-of-angularjs-forms/29117)\n\n### Application Structure\n\n* **Blog post: **[When to use directives, controllers or services](http://kirkbushell.me/when-to-use-directives-controllers-or-services-in-angular/)\n* **App wiring:** {@link guide/di Dependency injection}\n* **Exposing model to templates:** {@link guide/scope Scopes}\n* **Communicating with servers:** {@link ng.$http $http}, {@link ngResource.$resource $resource}\n\n### Other AngularJS Features\n\n* **Animation:** {@link guide/animations Core concepts}, {@link ngAnimate ngAnimate API}, and [Animation in AngularJS 1.2](http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html)\n* **Security:** {@link guide/security Security Docs}, {@link ng.$sce Strict Contextual Escaping}, {@link ng.directive:ngCsp Content Security Policy}, {@link ngSanitize.$sanitize $sanitize}, [video](https://www.youtube.com/watch?v=18ifoT-Id54)\n* **Internationalization and Localization:** {@link guide/i18n Angular Guide to i18n and l10n}, {@link ng.filter:date date filter}, {@link ng.filter:currency currency filter}, [Creating multilingual support](http://www.novanet.no/blog/hallstein-brotan/dates/2013/10/creating-multilingual-support-using-angularjs/)\n* **Mobile:** {@link ngTouch Touch events}\n* **Accessibility:** {@link guide/accessibility ngAria}\n\n### Testing\n\n* **Unit testing:** [Using Karma (video)](http://www.youtube.com/watch?v=YG5DEzaQBIc), {@link guide/unit-testing Unit testing}, {@link guide/services#unit-testing Testing services}, [Karma in Webstorm](http://blog.jetbrains.com/webstorm/2013/10/running-javascript-tests-with-karma-in-webstorm-7/)\n* **Scenario testing:** [Protractor](https://github.com/angular/protractor)\n\n## Specific Topics\n\n* **Login: **[Google example](https://developers.google.com/+/photohunt/python), [AngularJS Faceb0ok library](https://github.com/pc035860/angular-easyfb), [Facebook example](http://blog.brunoscopelliti.com/facebook-authentication-in-your-angularjs-web-app), [authentication strategy](http://blog.brunoscopelliti.com/deal-with-users-authentication-in-an-angularjs-web-app), [unix-style authorization](http://frederiknakstad.com/authentication-in-single-page-applications-with-angular-js/)\n* **Mobile:** [Angular on Mobile Guide](http://www.ng-newsletter.com/posts/angular-on-mobile.html), [PhoneGap](http://devgirl.org/2013/06/10/quick-start-guide-phonegap-and-angularjs/)\n* **Other Languages:** [CoffeeScript](http://www.coffeescriptlove.com/2013/08/angularjs-and-coffeescript-tutorials.html), [Dart](https://github.com/angular/angular.dart.tutorial/wiki)\n* **Realtime: **[Socket.io](http://www.creativebloq.com/javascript/angularjs-collaboration-board-socketio-2132885), [OmniBinder](https://github.com/jeffbcross/omnibinder)\n* **Visualization:** [SVG](http://gaslight.co/blog/angular-backed-svgs), [D3.js](http://www.ng-newsletter.com/posts/d3-on-angular.html)\n* **Local Storage and session:** [ngStorage](https://github.com/gsklee/ngStorage)\n\n## Tools\n\n* **Getting Started:** [Comparison of the options for starting a new project](http://www.dancancro.com/comparison-of-angularjs-application-starters/)\n* **Debugging:** [Batarang](https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en)\n* **Testing:** [Karma](http://karma-runner.github.io), [Protractor](https://github.com/angular/protractor)\n* **Editor support:** [Webstorm](http://plugins.jetbrains.com/plugin/6971) (and [video](http://www.youtube.com/watch?v=LJOyrSh1kDU)), [Sublime Text](https://github.com/angular-ui/AngularJS-sublime-package), [Visual Studio](http://madskristensen.net/post/angularjs-intellisense-in-visual-studio-2012)\n* **Workflow:** [Yeoman.io](https://github.com/yeoman/generator-angular) and [Angular Yeoman Tutorial](http://www.sitepoint.com/kickstart-your-angularjs-development-with-yeoman-grunt-and-bower/)\n\n## Complementary Libraries\n\nThis is a short list of libraries with specific support and documentation for working with Angular.  You can find a full list of all known Angular external libraries at [ngmodules.org](http://ngmodules.org/).\n\n* **Internationalization:** [angular-translate](http://angular-translate.github.io), [angular-gettext](http://angular-gettext.rocketeer.be/), [angular-localization](http://doshprompt.github.io/angular-localization/)\n* **RESTful services:** [Restangular](https://github.com/mgonto/restangular)\n* **SQL and NoSQL backends:** [BreezeJS](http://www.breezejs.com/), [AngularFire](http://angularfire.com/)\n* **UI Widgets: **[KendoUI](http://kendo-labs.github.io/angular-kendo/#/), [UI Bootstrap](http://angular-ui.github.io/bootstrap/), [Wijmo](http://wijmo.com/tag/angularjs-2/), [ngTagsInput](https://github.com/mbenford/ngTagsInput)\n* **Advanced Routing:** [UI-Router](https://github.com/angular-ui/ui-router)\n* **Maps:** [UI-Map (Google Maps)](https://github.com/angular-ui/ui-map)\n\n## Deployment\n\n### General\n\n* **Docs Page:** {@link guide/production Running an AngularJS App in Production}\n* **Javascript minification: **[Background](http://thegreenpizza.github.io/2013/05/25/building-minification-safe-angular.js-applications/), [ng-annotate automation tool](https://github.com/olov/ng-annotate)\n* **Analytics and Logging:** [Angularyitcs (Google Analytics)](http://ngmodules.org/modules/angularytics), [Angulartics (Analytics)](https://github.com/luisfarzati/angulartics), [Logging Client-Side Errors](http://www.bennadel.com/blog/2542-Logging-Client-Side-Errors-With-AngularJS-And-Stacktrace-js.htm)\n* **SEO:** [By hand](http://www.yearofmoo.com/2012/11/angularjs-and-seo.html), [prerender.io](http://prerender.io/), [Brombone](http://www.brombone.com/), [SEO.js](http://getseojs.com/), [SEO4Ajax](http://www.seo4ajax.com/)\n\n### Server-Specific\n\n* **Django:** [Tutorial](http://blog.mourafiq.com/post/55034504632/end-to-end-web-app-with-django-rest-framework), [Integrating AngularJS with Django](http://django-angular.readthedocs.org/en/latest/integration.html), [Getting Started with Django Rest Framework and AngularJS](http://blog.kevinastone.com/getting-started-with-django-rest-framework-and-angularjs.html)\n* **FireBase:** [AngularFire](http://angularfire.com/), [Realtime Apps with AngularJS and FireBase (video)](http://www.youtube.com/watch?v=C7ZI7z7qnHU)\n* **Google Cloud Platform: **[with Cloud Endpoints](https://cloud.google.com/developers/articles/angularjs-cloud-endpoints-recipe-for-building-modern-web-applications/), [with Go](https://github.com/GoogleCloudPlatform/appengine-angular-gotodos)\n* **Hood.ie:** [60 Minutes to Awesome](http://www.roberthorvick.com/2013/06/30/todomvc-angularjs-hood-ie-60-minutes-to-awesome/)\n* **MEAN Stack: **[Blog post](http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and), [Setup](http://thecodebarbarian.wordpress.com/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/), [GDL Video](https://developers.google.com/live/shows/913996610)\n* **Rails: **[Tutorial](http://coderberry.me/blog/2013/04/22/angularjs-on-rails-4-part-1/), [AngularJS with Rails4](https://shellycloud.com/blog/2013/10/how-to-integrate-angularjs-with-rails-4), [angularjs-rails](https://github.com/hiravgandhi/angularjs-rails)\n* **PHP: **[Building a RESTful web service](http://blog.brunoscopelliti.com/building-a-restful-web-service-with-angularjs-and-php-more-power-with-resource), [End to End with Laravel 4 (video)](http://www.youtube.com/watch?v=hqAyiqUs93c)\n* **Meteor: **[angular-meteor package](https://github.com/Urigo/angular-meteor)\n\n## Learning Resources\n\n###Books\n* [AngularJS: Up and Running](http://www.amazon.com/AngularJS-Running-Enhanced-Productivity-Structured/dp/1491901942) by Brad Green and Shyam Seshadri\n* [Mastering Web App Development](http://www.amazon.com/Mastering-Web-Application-Development-AngularJS/dp/1782161821) by Pawel Kozlowski and Pete Bacon Darwin\n* [AngularJS Directives](http://www.amazon.com/AngularJS-Directives-Alex-Vanston/dp/1783280336) by Alex Vanston\n* [Recipes With AngularJS](http://www.amazon.co.uk/Recipes-Angular-js-Frederik-Dietz-ebook/dp/B00DK95V48) by Frederik Dietz\n* [Developing an AngularJS Edge](http://www.amazon.com/Developing-AngularJS-Edge-Christopher-Hiller-ebook/dp/B00CJLFF8K) by Christopher Hiller\n* [ng-book: The Complete Book on AngularJS](http://ng-book.com/) by Ari Lerner\n* [AngularJS : Novice to Ninja](http://www.amazon.in/AngularJS-Novice-Ninja-Sandeep-Panda/dp/0992279453) by Sandeep Panda\n* [AngularJS UI Development](http://www.amazon.com/AngularJS-UI-Development-Amit-Ghart-ebook/dp/B00OXVAK7A) by Amit Gharat and Matthias Nehlsen\n* [Responsive Web Design with AngularJS](http://www.amazon.com/Responsive-Design-AngularJS-Sandeep-Kumar/dp/178439842X) by Sandeep Kumar Patel\n\n###Videos:\n* [egghead.io](http://egghead.io/)\n* [Angular on YouTube](http://youtube.com/angularjs)\n\n### Courses\n* **Free online:**\n  [thinkster.io](http://thinkster.io),\n  [CodeAcademy](http://www.codecademy.com/courses/javascript-advanced-en-2hJ3J/0/1),\n  [CodeSchool](https://www.codeschool.com/courses/shaping-up-with-angular-js)\n* **Paid online:**\n  [Pluralsite (3 courses)](http://www.pluralsight.com/training/Courses/Find?highlight=true&searchTerm=angularjs),\n  [Tuts+](https://tutsplus.com/course/easier-js-apps-with-angular/),\n  [lynda.com](http://www.lynda.com/AngularJS-tutorials/Up-Running-AngularJS/133318-2.html),\n  [WintellectNOW (4 lessons)](http://www.wintellectnow.com/Course/Detail/mastering-angularjs)\n* **Paid onsite:**\n  [angularbootcamp.com](http://angularbootcamp.com/)\n\n## Getting Help\n\nThe recipe for getting help on your unique issue is to create an example that could work (even if it doesn't) in a shareable example on [Plunker](http://plnkr.co/), [JSFiddle](http://jsfiddle.net/), or similar site and then post to one of the following:\n\n* [Stackoverflow.com](http://stackoverflow.com/search?q=angularjs)\n* [AngularJS mailing list](https://groups.google.com/forum/#!forum/angular)\n* [AngularJS IRC channel](http://webchat.freenode.net/?channels=angularjs&uio=d4)\n\n## Social Channels\n\n* **Daily updates:** [Google+](https://plus.google.com/u/0/+AngularJS) or [Twitter](https://twitter.com/angularjs)\n* **Weekly newsletter:** [ng-newsletter](http://www.ng-newsletter.com/)\n* **Meetups: **[meetup.com](http://www.meetup.com/find/?keywords=angularJS&radius=Infinity&userFreeform=San+Francisco%2C+CA&mcId=z94108&mcName=San+Francisco%2C+CA&sort=member_count&eventFilter=mysugg)\n* **Official news and releases: **[AngularJS Blog](http://blog.angularjs.org/)\n\n## Contributing to AngularJS\n\nThough we have a core group of core contributors at Google, Angular is an open source project with hundreds of contributors.  We'd love you to be one of them.  When you're ready, please read the {@link misc/contribute Guide for contributing to AngularJS}.\n\n## Final Bits\n\nDidn't find what you're looking for here?  Check out [AngularJS-Learning](https://github.com/jmcunningham/AngularJS-Learning) for an even more comprehensive list of links to videos, tutorials, and blog posts.\n\nIf you have awesome AngularJS resources that belong on this page, please tell us about them on [Google+](https://plus.google.com/u/0/+AngularJS) or [Twitter](https://twitter.com/angularjs).\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/index.ngdoc",
        "id": "Developer Guide",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Developer Guide undefined.overview:Developer Guide downloaded/angular/angular.js-master/docs/content/guide/index.ngdoc",
        "sortOn": "Developer Guide",
        "module": "Developer Guide",
        "left": 1,
        "level": 0,
        "root": "Developer Guide",
        "right": 54
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Using $location",
        "sortOrder": "500",
        "description": "\n\n# What does it do?\n\nThe `$location` service parses the URL in the browser address bar (based on [`window.location`](https://developer.mozilla.org/en/window.location)) and makes the URL available to\nyour application. Changes to the URL in the address bar are reflected into the `$location` service and\nchanges to `$location` are reflected into the browser address bar.\n\n**The $location service:**\n\n- Exposes the current URL in the browser address bar, so you can\n  - Watch and observe the URL.\n  - Change the URL.\n- Maintains synchronization between itself and the browser's URL when the user\n  - Changes the address in the browser's address bar.\n  - Clicks the back or forward button in the browser (or clicks a History link).\n  - Clicks on a link in the page.\n- Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n\n\n## Comparing `$location` to `window.location`\n\n<table class=\"table\">\n<thead>\n\n  <tr>\n    <th class=\"empty-corner-lt\"></th>\n    <th>window.location</th>\n    <th>$location service</th>\n  </tr>\n\n</thead>\n<tbody>\n\n  <tr>\n    <td class=\"head\">purpose</td>\n    <td>allow read/write access to the current browser location</td>\n    <td>same</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">API</td>\n    <td>exposes \"raw\" object with properties that can be directly modified</td>\n    <td>exposes jQuery-style getters and setters</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">integration with angular application life-cycle</td>\n    <td>none</td>\n    <td>knows about all internal life-cycle phases, integrates with {@link ng.$rootScope.Scope#$watch $watch}, ...</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">seamless integration with HTML5 API</td>\n    <td>no</td>\n    <td>yes (with a fallback for legacy browsers)</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">aware of docroot/context from which the application is loaded</td>\n    <td>no - window.location.pathname returns \"/docroot/actual/path\"</td>\n    <td>yes - $location.path() returns \"/actual/path\"</td>\n  </tr>\n\n</tbody>\n</table>\n\n## When should I use `$location`?\nAny time your application needs to react to a change in the current URL or if you want to change\nthe current URL in the browser.\n\n## What does it not do?\nIt does not cause a full page reload when the browser URL is changed. To reload the page after\nchanging the URL, use the lower-level API, `$window.location.href`.\n\n# General overview of the API\n\nThe `$location` service can behave differently, depending on the configuration that was provided to\nit when it was instantiated. The default configuration is suitable for many applications, for\nothers customizing the configuration can enable new features.\n\nOnce the `$location` service is instantiated, you can interact with it via jQuery-style getter and\nsetter methods that allow you to get or change the current URL in the browser.\n\n## `$location` service configuration\n\nTo configure the `$location` service, retrieve the\n{@link ng.$locationProvider $locationProvider} and set the parameters as follows:\n\n\n- **html5Mode(mode)**: {boolean|Object}<br />\n  `true` or `enabled:true` - see HTML5 mode<br />\n  `false` or `enabled:false` - see Hashbang mode<br />\n  `requireBase:true` - see Relative links<br />\n  default: `enabled:false`\n\n- **hashPrefix(prefix)**: {string}<br />\n  prefix used for Hashbang URLs (used in Hashbang mode or in legacy browser in Html5 mode)<br />\n  default: `\"\"`\n\n### Example configuration\n```js\n$locationProvider.html5Mode(true).hashPrefix('!');\n```\n\n## Getter and setter methods\n\n`$location` service provides getter methods for read-only parts of the URL (absUrl, protocol, host,\nport) and getter / setter methods for url, path, search, hash:\n```js\n// get the current path\n$location.path();\n\n// change the path\n$location.path('/newValue')\n```\n\nAll of the setter methods return the same `$location` object to allow chaining. For example, to\nchange multiple segments in one go, chain setters like this:\n\n```js\n$location.path('/newValue').search({key: value});\n```\n\n## Replace method\n\nThere is a special `replace` method which can be used to tell the $location service that the next\ntime the $location service is synced with the browser, the last history record should be replaced\ninstead of creating a new one. This is useful when you want to implement redirection, which would\notherwise break the back button (navigating back would retrigger the redirection). To change the\ncurrent URL without creating a new browser history record you can call:\n\n```js\n  $location.path('/someNewPath');\n  $location.replace();\n  // or you can chain these as: $location.path('/someNewPath').replace();\n```\n\nNote that the setters don't update `window.location` immediately. Instead, the `$location` service is\naware of the {@link ng.$rootScope.Scope scope} life-cycle and coalesces multiple `$location`\nmutations into one \"commit\" to the `window.location` object during the scope `$digest` phase. Since\nmultiple changes to the $location's state will be pushed to the browser as a single change, it's\nenough to call the `replace()` method just once to make the entire \"commit\" a replace operation\nrather than an addition to the browser history. Once the browser is updated, the $location service\nresets the flag set by `replace()` method and future mutations will create new history records,\nunless `replace()` is called again.\n\n### Setters and character encoding\nYou can pass special characters to `$location` service and it will encode them according to rules\nspecified in [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt). When you access the methods:\n\n- All values that are passed to `$location` setter methods, `path()`, `search()`, `hash()`, are\nencoded.\n- Getters (calls to methods without parameters) return decoded values for the following methods\n`path()`, `search()`, `hash()`.\n- When you call the `absUrl()` method, the returned value is a full url with its segments encoded.\n- When you call the `url()` method, the returned value is path, search and hash, in the form\n`/path?search=a&b=c#hash`. The segments are encoded as well.\n\n\n# Hashbang and HTML5 Modes\n\n`$location` service has two configuration modes which control the format of the URL in the browser\naddress bar: **Hashbang mode** (the default) and the **HTML5 mode** which is based on using the\n[HTML5 History API](https://html.spec.whatwg.org/multipage/browsers.html#the-history-interface). Applications use the same API in\nboth modes and the `$location` service will work with appropriate URL segments and browser APIs to\nfacilitate the browser URL change and history management.\n\n<img src=\"img/guide/hashbang_vs_regular_url.jpg\">\n\n<table class=\"table\">\n<thead>\n\n  <tr>\n    <th class=\"empty-corner-lt\"></th>\n    <th>Hashbang mode</th>\n    <th>HTML5 mode</th>\n  </tr>\n\n</thead>\n<tbody>\n\n  <tr>\n    <td class=\"head\">configuration</td>\n    <td>the default</td>\n    <td>{ html5Mode: true }</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">URL format</td>\n    <td>hashbang URLs in all browsers</td>\n    <td>regular URLs in modern browser, hashbang URLs in old browser</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">&lt;a href=\"\"&gt; link rewriting</td>\n    <td>no</td>\n    <td>yes</td>\n  </tr>\n\n  <tr>\n    <td class=\"head\">requires server-side configuration</td>\n    <td>no</td>\n    <td>yes</td>\n  </tr>\n</tbody>\n</table>\n\n## Hashbang mode (default mode)\n\nIn this mode, `$location` uses Hashbang URLs in all browsers.\nAngular also does not intercept and rewrite links in this mode. I.e. links work\nas expected and also perform full page reloads when other parts of the url\nthan the hash fragment was changed.\n\n\n### Example\n\n```js\nit('should show example', inject(\n  function($locationProvider) {\n    $locationProvider.html5Mode(false);\n    $locationProvider.hashPrefix('!');\n  },\n  function($location) {\n    // open http://example.com/base/index.html#!/a\n    $location.absUrl() == 'http://example.com/base/index.html#!/a'\n    $location.path() == '/a'\n\n    $location.path('/foo')\n    $location.absUrl() == 'http://example.com/base/index.html#!/foo'\n\n    $location.search() == {}\n    $location.search({a: 'b', c: true});\n    $location.absUrl() == 'http://example.com/base/index.html#!/foo?a=b&c'\n\n    $location.path('/new').search('x=y');\n    $location.absUrl() == 'http://example.com/base/index.html#!/new?x=y'\n  }\n));\n```\n\n## HTML5 mode\n\nIn HTML5 mode, the `$location` service getters and setters interact with the browser URL address\nthrough the HTML5 history API. This allows for use of regular URL path and search segments,\ninstead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the\n`$location` service will fall back to using the hashbang URLs automatically. This frees you from\nhaving to worry about whether the browser displaying your app supports the history API  or not; the\n`$location` service transparently uses the best available option.\n\n- Opening a regular URL in a legacy browser -> redirects to a hashbang URL\n- Opening hashbang URL in a modern browser -> rewrites to a regular URL\n\nNote that in this mode, Angular intercepts all links (subject to the \"Html link rewriting\" rules below)\nand updates the url in a way that never performs a full page reload.\n\n\n### Example\n\n```js\nit('should show example', inject(\n  function($locationProvider) {\n    $locationProvider.html5Mode(true);\n    $locationProvider.hashPrefix('!');\n  },\n  function($location) {\n    // in browser with HTML5 history support:\n    // open http://example.com/#!/a -> rewrite to http://example.com/a\n    // (replacing the http://example.com/#!/a history record)\n    $location.path() == '/a'\n\n    $location.path('/foo');\n    $location.absUrl() == 'http://example.com/foo'\n\n    $location.search() == {}\n    $location.search({a: 'b', c: true});\n    $location.absUrl() == 'http://example.com/foo?a=b&c'\n\n    $location.path('/new').search('x=y');\n    $location.url() == 'new?x=y'\n    $location.absUrl() == 'http://example.com/new?x=y'\n\n    // in browser without html5 history support:\n    // open http://example.com/new?x=y -> redirect to http://example.com/#!/new?x=y\n    // (again replacing the http://example.com/new?x=y history item)\n    $location.path() == '/new'\n    $location.search() == {x: 'y'}\n\n    $location.path('/foo/bar');\n    $location.path() == '/foo/bar'\n    $location.url() == '/foo/bar?x=y'\n    $location.absUrl() == 'http://example.com/#!/foo/bar?x=y'\n  }\n));\n```\n\n### Fallback for legacy browsers\n\nFor browsers that support the HTML5 history API, `$location` uses the HTML5 history API to write\npath and search. If the history API is not supported by a browser, `$location` supplies a Hasbang\nURL. This frees you from having to worry about whether the browser viewing your app supports the\nhistory API  or not; the `$location` service makes this transparent to you.\n\n### Html link rewriting\n\nWhen you use HTML5 history API mode, you will not need special hashbang links. All you have to do\nis specify regular URL links, such as: `<a href=\"/some?foo=bar\">link</a>`\n\nWhen a user clicks on this link,\n\n- In a legacy browser, the URL changes to `/index.html#!/some?foo=bar`\n- In a modern browser, the URL changes to `/some?foo=bar`\n\n\nIn cases like the following, links are not rewritten; instead, the browser will perform a full page\nreload to the original link.\n\n- Links that contain `target` element<br>\n  Example: `<a href=\"/ext/link?a=b\" target=\"_self\">link</a>`\n- Absolute links that go to a different domain<br>\n  Example: `<a href=\"http://angularjs.org/\">link</a>`\n- Links starting with '/' that lead to a different base path<br>\n  Example: `<a href=\"/not-my-base/link\">link</a>`\n\n\n### Relative links\n\nBe sure to check all relative links, images, scripts etc. Angular requires you to specify the url\nbase in the head of your main html file (`<base href=\"/my-base\">`) unless `html5Mode.requireBase` is\nset to `false` in the html5Mode definition object passed to `$locationProvider.html5Mode()`. With\nthat, relative urls will always be resolved to this base url, even if the initial url of the\ndocument was different.\n\nThere is one exception: Links that only contain a hash fragment (e.g. `<a href=\"#target\">`)\nwill only change `$location.hash()` and not modify the url otherwise. This is useful for scrolling\nto anchors on the same page without needing to know on which page the user currently is.\n\n### Server side\n\nUsing this mode requires URL rewriting on server side, basically you have to rewrite all your links\nto entry point of your application (e.g. index.html). Requiring a `<base>` tag is also important for\nthis case, as it allows Angular to differentiate between the part of the url that is the application\nbase and the path that should be handled by the application.\n\n### Sending links among different browsers\n\nBecause of rewriting capability in HTML5 mode, your users will be able to open regular url links in\nlegacy browsers and hashbang links in modern browser:\n\n- Modern browser will rewrite hashbang URLs to regular URLs.\n- Older browsers will redirect regular URLs to hashbang URLs.\n\n### Example\n\nHere you can see two `$location` instances, both in **Html5 mode**, but on different browsers, so\nthat you can see the differences. These `$location` services are connected to a fake browsers. Each\ninput represents the address bar of the browser.\n\nNote that when you type hashbang url into first browser (or vice versa) it doesn't rewrite /\nredirect to regular / hashbang url, as this conversion happens only during parsing the initial URL\n= on page reload.\n\nIn these examples we use `<base href=\"/base/index.html\" />`\n\n#### Browser in HTML5 mode\n<example module=\"html5-mode\" name=\"location-html5-mode\">\n  <file name=\"index.html\">\n    <div ng-controller=\"LocationController\">\n      <div ng-address-bar></div><br><br>\n      <div>\n        $location.protocol() = <span ng-bind=\"$location.protocol()\"></span> <br>\n        $location.host() = <span ng-bind=\"$location.host()\"></span> <br>\n        $location.port() = <span ng-bind=\"$location.port()\"></span> <br>\n        $location.path() = <span ng-bind=\"$location.path()\"></span> <br>\n        $location.search() = <span ng-bind=\"$location.search()\"></span> <br>\n        $location.hash() = <span ng-bind=\"$location.hash()\"></span> <br>\n      </div>\n      <div id=\"navigation\">\n        <a href=\"http://www.example.com/base/first?a=b\">/base/first?a=b</a> |\n        <a href=\"http://www.example.com/base/sec/ond?flag#hash\">sec/ond?flag#hash</a> |\n        <a href=\"/other-base/another?search\">external</a>\n      </div>\n    </div>\n  </file>\n  <file name=\"app.js\">\n   angular.module('html5-mode', ['fake-browser', 'address-bar'])\n\n   .constant('initUrl', 'http://www.example.com/base/path?a=b#h')\n   .constant('baseHref', '/base/index.html')\n   .value('$sniffer', { history: true })\n\n   .controller(\"LocationController\", function($scope, $location) {\n     $scope.$location = {};\n     angular.forEach(\"protocol host port path search hash\".split(\" \"), function(method){\n      $scope.$location[method] = function(){\n        var result = $location[method].call($location);\n        return angular.isObject(result) ? angular.toJson(result) : result;\n      };\n     });\n   })\n\n   .config(function($locationProvider) {\n     $locationProvider.html5Mode(true).hashPrefix('!');\n   })\n\n   .run(function($rootElement) {\n     $rootElement.on('click', function(e) { e.stopPropagation(); });\n   });\n  </file>\n\n  <file name=\"fakeBrowser.js\">\n    angular.module('fake-browser', [])\n\n    .config(function($provide) {\n     $provide.decorator('$browser', function($delegate, baseHref, initUrl) {\n\n      $delegate.onUrlChange = function(fn) {\n         this.urlChange = fn;\n       };\n\n      $delegate.url = function() {\n         return initUrl;\n      };\n\n      $delegate.defer = function(fn, delay) {\n         setTimeout(function() { fn(); }, delay || 0);\n       };\n\n      $delegate.baseHref = function() {\n         return baseHref;\n       };\n\n       return $delegate;\n     });\n    });\n    </file>\n\n  <file name=\"addressBar.js\">\n   angular.module('address-bar', [])\n   .directive('ngAddressBar', function($browser, $timeout) {\n      return {\n        template: 'Address: <input id=\"addressBar\" type=\"text\" style=\"width: 400px\" >',\n        link: function(scope, element, attrs){\n          var input = element.children(\"input\"), delay;\n\n          input.on('keypress keyup keydown', function(event) {\n                  delay = (!delay ? $timeout(fireUrlChange, 250) : null);\n                  event.stopPropagation();\n                })\n               .val($browser.url());\n\n          $browser.url = function(url) {\n            return url ? input.val(url) : input.val();\n          };\n\n          function fireUrlChange() {\n            delay = null;\n            $browser.urlChange(input.val());\n          }\n        }\n      };\n    });\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n\n    var addressBar = element(by.css(\"#addressBar\")),\n        url = 'http://www.example.com/base/path?a=b#h';\n\n\n    it(\"should show fake browser info on load\", function(){\n      expect(addressBar.getAttribute('value')).toBe(url);\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/path');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"a\":\"b\"}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('h');\n\n    });\n\n    it(\"should change $location accordingly\", function(){\n      var navigation = element.all(by.css(\"#navigation a\"));\n\n      navigation.get(0).click();\n\n      expect(addressBar.getAttribute('value')).toBe(\"http://www.example.com/base/first?a=b\");\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/first');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"a\":\"b\"}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('');\n\n\n      navigation.get(1).click();\n\n      expect(addressBar.getAttribute('value')).toBe(\"http://www.example.com/base/sec/ond?flag#hash\");\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/sec/ond');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"flag\":true}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('hash');\n    });\n\n  </file>\n\n</example>\n\n####Browser in HTML5 Fallback mode (Hashbang mode)\n<example module=\"hashbang-mode\" name=\"location-hashbang-mode\">\n  <file name=\"index.html\">\n    <div ng-controller=\"LocationController\">\n      <div ng-address-bar></div><br><br>\n      <div>\n        $location.protocol() = <span ng-bind=\"$location.protocol()\"></span> <br>\n        $location.host() = <span ng-bind=\"$location.host()\"></span> <br>\n        $location.port() = <span ng-bind=\"$location.port()\"></span> <br>\n        $location.path() = <span ng-bind=\"$location.path()\"></span> <br>\n        $location.search() = <span ng-bind=\"$location.search()\"></span> <br>\n        $location.hash() = <span ng-bind=\"$location.hash()\"></span> <br>\n      </div>\n      <div id=\"navigation\">\n        <a href=\"http://www.example.com/base/first?a=b\">/base/first?a=b</a> |\n        <a href=\"http://www.example.com/base/sec/ond?flag#hash\">sec/ond?flag#hash</a> |\n        <a href=\"/other-base/another?search\">external</a>\n      </div>\n    </div>\n  </file>\n  <file name=\"app.js\">\n    angular.module('hashbang-mode', ['fake-browser', 'address-bar'])\n\n    .constant('initUrl', 'http://www.example.com/base/index.html#!/path?a=b#h')\n    .constant('baseHref', '/base/index.html')\n    .value('$sniffer', { history: false })\n\n    .config(function($locationProvider) {\n      $locationProvider.html5Mode(true).hashPrefix('!');\n    })\n\n    .controller(\"LocationController\", function($scope, $location) {\n      $scope.$location = {};\n      angular.forEach(\"protocol host port path search hash\".split(\" \"), function(method){\n        $scope.$location[method] = function(){\n          var result = $location[method].call($location);\n          return angular.isObject(result) ? angular.toJson(result) : result;\n        };\n      });\n    })\n\n    .run(function($rootElement) {\n      $rootElement.on('click', function(e) {\n        e.stopPropagation();\n      });\n    });\n\n  </file>\n\n  <file name=\"fakeBrowser.js\">\n    angular.module('fake-browser', [])\n\n    .config(function($provide) {\n     $provide.decorator('$browser', function($delegate, baseHref, initUrl) {\n\n      $delegate.onUrlChange = function(fn) {\n         this.urlChange = fn;\n       };\n\n      $delegate.url = function() {\n         return initUrl;\n      };\n\n      $delegate.defer = function(fn, delay) {\n         setTimeout(function() { fn(); }, delay || 0);\n       };\n\n      $delegate.baseHref = function() {\n         return baseHref;\n       };\n\n       return $delegate;\n     });\n    });\n  </file>\n\n\n  <file name=\"addressBar.js\">\n   angular.module('address-bar', [])\n   .directive('ngAddressBar', function($browser, $timeout) {\n      return {\n        template: 'Address: <input id=\"addressBar\" type=\"text\" style=\"width: 400px\" >',\n        link: function(scope, element, attrs){\n          var input = element.children(\"input\"), delay;\n\n          input.on('keypress keyup keydown', function(event) {\n                  delay = (!delay ? $timeout(fireUrlChange, 250) : null);\n                  event.stopPropagation();\n                })\n               .val($browser.url());\n\n          $browser.url = function(url) {\n            return url ? input.val(url) : input.val();\n          };\n\n          function fireUrlChange() {\n            delay = null;\n            $browser.urlChange(input.val());\n          }\n        }\n      };\n    });\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n\n    var addressBar = element(by.css(\"#addressBar\")),\n         url = 'http://www.example.com/base/index.html#!/path?a=b#h';\n\n    it(\"should show fake browser info on load\", function(){\n      expect(addressBar.getAttribute('value')).toBe(url);\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/path');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"a\":\"b\"}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('h');\n\n    });\n\n    it(\"should change $location accordingly\", function(){\n      var navigation = element.all(by.css(\"#navigation a\"));\n\n      navigation.get(0).click();\n\n      expect(addressBar.getAttribute('value')).toBe(\"http://www.example.com/base/index.html#!/first?a=b\");\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/first');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"a\":\"b\"}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('');\n\n\n      navigation.get(1).click();\n\n      expect(addressBar.getAttribute('value')).toBe(\"http://www.example.com/base/index.html#!/sec/ond?flag#hash\");\n\n      expect(element(by.binding('$location.protocol()')).getText()).toBe('http');\n      expect(element(by.binding('$location.host()')).getText()).toBe('www.example.com');\n      expect(element(by.binding('$location.port()')).getText()).toBe('80');\n      expect(element(by.binding('$location.path()')).getText()).toBe('/sec/ond');\n      expect(element(by.binding('$location.search()')).getText()).toBe('{\"flag\":true}');\n      expect(element(by.binding('$location.hash()')).getText()).toBe('hash');\n\n    });\n  </file>\n\n</example>\n\n# Caveats\n\n## Page reload navigation\n\nThe `$location` service allows you to change only the URL; it does not allow you to reload the\npage. When you need to change the URL and reload the page or navigate to a different page, please\nuse a lower level API, {@link ng.$window $window.location.href}.\n\n## Using $location outside of the scope life-cycle\n\n`$location` knows about Angular's {@link ng.$rootScope.Scope scope} life-cycle. When a URL changes in\nthe browser it updates the `$location` and calls `$apply` so that all\n{@link ng.$rootScope.Scope#$watch $watchers} /\n{@link ng.$compile.directive.Attributes#$observe $observers} are notified.\nWhen you change the `$location` inside the `$digest` phase everything is ok; `$location` will\npropagate this change into browser and will notify all the {@link ng.$rootScope.Scope#$watch $watchers} /\n{@link ng.$compile.directive.Attributes#$observe $observers}.\nWhen you want to change the `$location` from outside Angular (for example, through a DOM Event or\nduring testing) - you must call `$apply` to propagate the changes.\n\n## $location.path() and ! or / prefixes\n\nA path should always begin with forward slash (`/`); the `$location.path()` setter will add the\nforward slash if it is missing.\n\nNote that the `!` prefix in the hashbang mode is not part of `$location.path()`; it is actually\nhashPrefix.\n\n## Crawling your app\n\nTo allow indexing of your AJAX application, you have to add special meta tag in the head section of\nyour document:\n\n```html\n<meta name=\"fragment\" content=\"!\" />\n```\n\nThis will cause crawler bot to request links with `_escaped_fragment_` param so that your server\ncan recognize the crawler and serve a HTML snapshots. For more information about this technique,\nsee [Making AJAX Applications\nCrawlable](http://code.google.com/web/ajaxcrawling/docs/specification.html).\n\n\n# Testing with the $location service\n\nWhen using `$location` service during testing, you are outside of the angular's {@link\nng.$rootScope.Scope scope} life-cycle. This means it's your responsibility to call `scope.$apply()`.\n\n```js\ndescribe('serviceUnderTest', function() {\n  beforeEach(module(function($provide) {\n    $provide.factory('serviceUnderTest', function($location){\n      // whatever it does...\n    });\n  });\n\n  it('should...', inject(function($location, $rootScope, serviceUnderTest) {\n    $location.path('/new/path');\n    $rootScope.$apply();\n\n    // test whatever the service should do...\n\n  }));\n});\n```\n\n\n# Migrating from earlier AngularJS releases\n\nIn earlier releases of Angular, `$location` used `hashPath` or `hashSearch` to process path and\nsearch methods. With this release, the `$location` service processes path and search methods and\nthen uses the information it obtains to compose hashbang URLs (such as\n`http://server.com/#!/path?search=a`), when necessary.\n\n## Changes to your code\n\n<table class=\"table\">\n  <thead>\n    <tr class=\"head\">\n      <th>Navigation inside the app</th>\n      <th>Change to</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr>\n      <td>$location.href = value<br />$location.hash = value<br />$location.update(value)<br\n/>$location.updateHash(value)</td>\n      <td>$location.path(path).search(search)</td>\n    </tr>\n\n    <tr>\n      <td>$location.hashPath = path</td>\n      <td>$location.path(path)</td>\n    </tr>\n\n    <tr>\n      <td>$location.hashSearch = search</td>\n      <td>$location.search(search)</td>\n    </tr>\n\n    <tr class=\"head\">\n      <td>Navigation outside the app</td>\n      <td>Use lower level API</td>\n    </tr>\n\n    <tr>\n      <td>$location.href = value<br />$location.update(value)</td>\n      <td>$window.location.href = value</td>\n    </tr>\n\n    <tr>\n      <td>$location[protocol | host | port | path | search]</td>\n      <td>$window.location[protocol | host | port | path | search]</td>\n    </tr>\n\n    <tr class=\"head\">\n      <td>Read access</td>\n      <td>Change to</td>\n    </tr>\n\n    <tr>\n      <td>$location.hashPath</td>\n      <td>$location.path()</td>\n    </tr>\n\n    <tr>\n      <td>$location.hashSearch</td>\n      <td>$location.search()</td>\n    </tr>\n\n    <tr>\n      <td>$location.href<br />$location.protocol<br />$location.host<br />$location.port<br\n/>$location.hash</td>\n      <td>$location.absUrl()<br />$location.protocol()<br />$location.host()<br />$location.port()<br\n/>$location.path() + $location.search()</td>\n    </tr>\n\n    <tr>\n      <td>$location.path<br />$location.search</td>\n      <td>$window.location.path<br />$window.location.search</td>\n    </tr>\n  </tbody>\n</table>\n\n## Two-way binding to $location\n\nBecause `$location` uses getters/setters, you can use `ng-model-options=\"{ getterSetter: true }\"`\nto bind it to `ngModel`:\n\n<example module=\"locationExample\">\n<file name=\"index.html\">\n<div ng-controller=\"LocationController\">\n  <input type=\"text\" ng-model=\"locationPath\" ng-model-options=\"{ getterSetter: true }\" />\n</div>\n</file>\n<file name=\"script.js\">\nangular.module('locationExample', [])\n  .controller('LocationController', ['$scope', '$location', function($scope, $location) {\n    $scope.locationPath = function (newLocation) {\n      return $location.path(newLocation);\n    };\n  }]);\n</file>\n</example>\n\n# Related API\n\n* {@link ng.$location `$location` API}\n\n\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/$location.ngdoc",
        "id": "Using $location",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Using $location undefined.overview:Using $location downloaded/angular/angular.js-master/docs/content/guide/$location.ngdoc",
        "sortOn": "Using $location",
        "module": "Using $location",
        "left": 2,
        "level": 1,
        "root": "Developer Guide",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Accessibility",
        "sortOrder": "530",
        "description": "\n\n\n# Accessibility with ngAria\n\nThe goal of ngAria is to improve Angular's default accessibility by enabling common\n[ARIA](http://www.w3.org/TR/wai-aria/) attributes that convey state or semantic information for\nassistive technologies used by persons with disabilities.\n\n##Including ngAria\n\nUsing {@link ngAria ngAria} is as simple as requiring the ngAria module in your application. ngAria hooks into\nstandard AngularJS directives and quietly injects accessibility support into your application\nat runtime.\n\n```js\nangular.module('myApp', ['ngAria'])...\n```\n\n###Using ngAria\nMost of what ngAria does is only visible \"under the hood\". To see the module in action, once you've\nadded it as a dependency, you can test a few things:\n * Using your favorite element inspector, look for ngAria attributes in your own code.\n * Test using your keyboard to ensure `tabindex` is used correctly.\n * Fire up a screen reader such as VoiceOver to listen for ARIA support.\n[Helpful screen reader tips.](http://webaim.org/articles/screenreader_testing/)\n\n##Supported directives\nCurrently, ngAria interfaces with the following directives:\n\n * {@link guide/accessibility#ngmodel ngModel}\n * {@link guide/accessibility#ngdisabled ngDisabled}\n * {@link guide/accessibility#ngshow ngShow}\n * {@link guide/accessibility#nghide ngHide}\n * {@link guide/accessibility#ngclick ngClick}\n * {@link guide/accessibility#ngdblclick ngDblClick}\n * {@link guide/accessibility#ngmessages ngMessages}\n\n<h2 id=\"ngmodel\">ngModel</h2>\n\nMost of ngAria's heavy lifting happens in the {@link ngModel ngModel}\ndirective.  For elements using ngModel, special attention is paid by ngAria if that element also\nhas a a role or type of `checkbox`, `radio`, `range` or `textbox`.\n\nFor those elements using ngModel, ngAria will dynamically bind and update the following ARIA\nattributes (if they have not been explicitly specified by the developer):\n\n * aria-checked\n * aria-valuemin\n * aria-valuemax\n * aria-valuenow\n * aria-invalid\n * aria-required\n\n###Example\n\n<example module=\"ngAria_ngModelExample\" deps=\"angular-aria.js\">\n <file name=\"index.html\">\n  <style>\n    [role=checkbox] {\n      cursor: pointer;\n      display: inline-block;\n    }\n    [role=checkbox] .icon:before {\n      content: '\\2610';\n      display: inline-block;\n      font-size: 2em;\n      line-height: 1;\n      vertical-align: middle;\n      speak: none;\n    }\n    [role=checkbox].active .icon:before {\n      content: '\\2611';\n    }\n    pre {\n      white-space: pre-wrap;\n    }\n  </style>\n <div>\n <form ng-controller=\"formsController\">\n  <some-checkbox role=\"checkbox\" ng-model=\"checked\" ng-class=\"{active: checked}\"\n    ng-disabled=\"isDisabled\" ng-click=\"toggleCheckbox()\"\n    aria-label=\"Custom Checkbox\" show-attrs>\n    <span class=\"icon\" aria-hidden=\"true\"></span>\n    Custom Checkbox\n  </some-checkbox>\n </form>\n </div>\n <script>\n  var app = angular.module('ngAria_ngModelExample', ['ngAria'])\n  .controller('formsController', function($scope){\n    $scope.checked = false;\n    $scope.toggleCheckbox = function(){\n      $scope.checked = !$scope.checked;\n    }\n  })\n  .directive('someCheckbox', function(){\n    return {\n      restrict: 'E',\n      link: function($scope, $el, $attrs) {\n        $el.on('keypress', function(event){\n          event.preventDefault();\n          if(event.keyCode === 32 || event.keyCode === 13){\n            $scope.toggleCheckbox();\n            $scope.$apply();\n          }\n        });\n      }\n    }\n  })\n  .directive('showAttrs', function() {\n    return function($scope, $el, $attrs) {\n      var pre = document.createElement('pre');\n      $el.after(pre);\n      $scope.$watch(function() {\n        var $attrs = {};\n        Array.prototype.slice.call($el[0].attributes, 0).forEach(function(item) {\n          if (item.name !== 'show-$attrs') {\n            $attrs[item.name] = item.value;\n          }\n        });\n        return $attrs;\n      }, function(newAttrs, oldAttrs) {\n        pre.textContent = JSON.stringify(newAttrs, null, 2);\n      }, true);\n    }\n  });\n </script>\n </file>\n</example>\n\nngAria will also add `tabIndex`, ensuring custom elements with these roles will be reachable from\nthe keyboard. It is still up to **you** as a developer to **ensure custom controls will be\noperable** from the keybard. Think of `ng-click` on a `<div>` or `<md-checkbox>`: you still need\nto bind `ng-keypress` to make it fully operable from the keyboard. As a rule, any time you create\na widget involving user interaction, be sure to test it with your keyboard and at least one mobile\nand desktop screen reader (preferably more).\n\n<h2 id=\"ngdisabled\">ngDisabled</h2>\n\nThe `disabled` attribute is only valid for certain elements such as `button`, `input` and\n`textarea`. To properly disable custom element directives such as `<md-checkbox>` or `<taco-tab>`,\nusing ngAria with [ngDisabled](https://docs.angularjs.org/api/ng/directive/ngDisabled) will also\nadd `aria-disabled`. This tells assistive technologies when a non-native input is disabled, helping\ncustom controls to be more accessible.\n\n###Example\n\n```html\n<md-checkbox ng-disabled=\"disabled\">\n```\n\nBecomes:\n\n```html\n<md-checkbox disabled aria-disabled=\"true\">\n```\n\n>You can check whether a control is legitimately disabled for a screen reader by visiting\n[chrome://accessibility](chrome://accessibility).\n\n<h2 id=\"ngshow\">ngShow</h2>\n\n>The [ngShow](https://docs.angularjs.org/api/ng/directive/ngShow) directive shows or hides the\ngiven HTML element based on the expression provided to the `ngShow` attribute. The element is\nshown or hidden by removing or adding the `.ng-hide` CSS class onto the element.\n\nIn its default setup, ngAria for `ngShow` is actually redundant. It toggles `aria-hidden` on the\ndirective when it is hidden or shown. However, the default CSS of `display: none !important`,\nalready hides child elements from a screen reader. It becomes more useful when the default\nCSS is overridden with properties that don’t affect assistive technologies, such as `opacity`\nor `transform`. By toggling `aria-hidden` dynamically with ngAria, we can ensure content visually\nhidden with this technique will not be read aloud in a screen reader.\n\nOne caveat with this combination of CSS and `aria-hidden`: you must also remove links and other\ninteractive child elements from the tab order using `tabIndex=“-1”` on each control. This ensures\nscreen reader users won't accidentally focus on \"mystery elements\". Managing tab index on every\nchild control can be complex and affect performance, so it’s best to just stick with the default\n`display: none` CSS. See the [fourth rule of ARIA use](http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use).\n\n###Example\n```css\n.ng-hide {\n  display: block;\n  opacity: 0;\n}\n```\n```html\n<div ng-show=\"false\" class=\"ng-hide\" aria-hidden=\"true\"></div>\n```\n\nBecomes:\n\n```html\n<div ng-show=\"true\" aria-hidden=\"false\"></div>\n```\n*Note: Child links, buttons or other interactive controls must also be removed from the tab order.*\n\n<h2 id=\"nghide\">ngHide</h2>\n\n>The [ngHide](https://docs.angularjs.org/api/ng/directive/ngHide) directive shows or hides the\ngiven HTML element based on the expression provided to the `ngHide` attribute. The element is\nshown or hidden by removing or adding the `.ng-hide` CSS class onto the element.\n\nThe default CSS for `ngHide`, the inverse method to `ngShow`, makes ngAria redundant. It toggles\n`aria-hidden` on the directive when it is hidden or shown, but the content is already hidden with\n`display: none`. See explanation for {@link guide/accessibility#ngshow ngShow} when overriding the default CSS.\n\n<h2><span id=\"ngclick\">ngClick</span> and <span id=\"ngdblclick\">ngDblclick</span></h2>\nIf `ng-click` or `ng-dblclick` is encountered, ngAria will add `tabindex=\"0\"` if it isn't there\nalready.\n\nTo fix widespread accessibility problems with `ng-click` on div elements, ngAria will dynamically\nbind keypress by default as long as the element isn't an anchor, button, input or textarea.\nYou can turn this functionality on or off with the `bindKeypress` configuration option. ngAria\nwill also add the `button` role to communicate to users of assistive technologies.\n\nFor `ng-dblclick`, you must still manually add `ng-keypress` and role to non-interactive elements such\nas `div` or `taco-button` to enable keyboard access.\n\n<h3>Example</h3>\n```html\n<div ng-click=\"toggleMenu()\"></div>\n```\n\nBecomes:\n```html\n<div ng-click=\"toggleMenu()\" tabindex=\"0\"></div>\n```\n\n<h2 id=\"ngmessages\">ngMessages</h2>\n\nThe new ngMessages module makes it easy to display form validation or other messages with priority\nsequencing and animation. To expose these visual messages to screen readers,\nngAria injects `aria-live=\"assertive\"`, causing them to be read aloud any time a message is shown,\nregardless of the user's focus location.\n###Example\n\n```html\n<div ng-messages=\"myForm.myName.$error\">\n  <div ng-message=\"required\">You did not enter a field</div>\n  <div ng-message=\"maxlength\">Your field is too long</div>\n</div>\n```\n\nBecomes:\n\n```html\n<div ng-messages=\"myForm.myName.$error\" aria-live=\"assertive\">\n  <div ng-message=\"required\">You did not enter a field</div>\n  <div ng-message=\"maxlength\">Your field is too long</div>\n</div>\n```\n\n##Disabling attributes\nThe attribute magic of ngAria may not work for every scenario. To disable individual attributes,\nyou can use the {@link ngAria.$ariaProvider#config config} method. Just keep in mind this will\ntell ngAria to ignore the attribute globally.\n\n<example module=\"ngAria_ngDisabledExample\" deps=\"angular-aria.js\">\n <file name=\"index.html\">\n  <style>\n    [role=checkbox] {\n      cursor: pointer;\n      display: inline-block;\n    }\n    [role=checkbox] .icon:before {\n      content: '\\2610';\n      display: inline-block;\n      font-size: 2em;\n      line-height: 1;\n      vertical-align: middle;\n      speak: none;\n    }\n    [role=checkbox].active .icon:before {\n      content: '\\2611';\n    }\n  </style>\n <form ng-controller=\"formsController\">\n  <div ng-model=\"someModel\" show-attrs>\n    Div with ngModel and aria-invalid disabled\n  </div>\n  <div role=\"checkbox\" ng-model=\"checked\" ng-class=\"{active: checked}\"\n    aria-label=\"Custom Checkbox\" ng-click=\"toggleCheckbox()\" some-checkbox show-attrs>\n    <span class=\"icon\" aria-hidden=\"true\"></span>\n    Custom Checkbox for comparison\n  </div>\n </form>\n <script>\n  angular.module('ngAria_ngDisabledExample', ['ngAria'], function config($ariaProvider) {\n    $ariaProvider.config({\n      ariaInvalid: false,\n      tabindex: true\n    });\n  })\n  .controller('formsController', function($scope){\n    $scope.checked = false;\n    $scope.toggleCheckbox = function(){\n      $scope.checked = !$scope.checked;\n    }\n  })\n  .directive('someCheckbox', function(){\n    return {\n      restrict: 'A',\n      link: function($scope, $el, $attrs) {\n        $el.on('keypress', function(event){\n          event.preventDefault();\n          if(event.keyCode === 32 || event.keyCode === 13){\n            $scope.toggleCheckbox();\n            $scope.$apply();\n          }\n        });\n      }\n    }\n  })\n  .directive('showAttrs', function() {\n    return function(scope, el, attrs) {\n      var pre = document.createElement('pre');\n      el.after(pre);\n      scope.$watch(function() {\n        var attrs = {};\n        Array.prototype.slice.call(el[0].attributes, 0).forEach(function(item) {\n          if (item.name !== 'show-attrs') {\n            attrs[item.name] = item.value;\n          }\n        });\n        return attrs;\n      }, function(newAttrs, oldAttrs) {\n        pre.textContent = JSON.stringify(newAttrs, null, 2);\n      }, true);\n    }\n  });\n </script>\n </file>\n</example>\n\n##Common Accessibility Patterns\n\nAccessibility best practices that apply to web apps in general also apply to Angular.\n\n * **Text alternatives**: Add alternate text content to make visual information accessible using\n [these W3C guidelines](http://www.w3.org/TR/html-alt-techniques/). The appropriate technique\n depends on the specific markup but can be accomplished using offscreen spans, `aria-label` or\n label elements, image `alt` attributes, `figure`/`figcaption` elements and more.\n * **HTML Semantics**: If you're creating custom element directives, Web Components or HTML in\n general, use native elements wherever possible to utilize built-in events and properties.\n Alternatively, use ARIA to communicate semantic meaning. See [notes on ARIA use](http://www.w3.org/TR/aria-in-html/#notes-on-aria-use-in-html).\n * **Focus management**: Guide the user around the app as views are appended/removed.\n Focus should *never* be lost, as this causes unexpected behavior and much confusion (referred to\n as \"freak-out mode\").\n * **Announcing changes**: When filtering or other UI messaging happens away from the user's focus,\n notify with [ARIA Live Regions](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions).\n * **Color contrast and scale**: Make sure content is legible and interactive controls are usable\n at all screen sizes. Consider configurable UI themes for people with color blindness, low vision\n or other visual impairments.\n * **Progressive enhancement**: Some users do not browse with JavaScript enabled or do not have\n the latest browser. An accessible message about site requirements can inform users and improve\n the experience.\n\n## Additional Resources\n\n * [Using ARIA in HTML](http://www.w3.org/TR/aria-in-html/)\n * [AngularJS Accessibility at ngEurope](https://www.youtube.com/watch?v=dmYDggEgU-s&list=UUEGUP3TJJfMsEM_1y8iviSQ)\n * [Testing with Screen Readers](http://webaim.org/articles/screenreader_testing/)\n * [Chrome Accessibility Developer Tools](https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?hl=en)\n * [W3C Accessibility Testing](http://www.w3.org/wiki/Accessibility_testing)\n * [WebAIM](http://webaim.org)\n * [A11y Project](http://a11yproject.com)\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/accessibility.ngdoc",
        "id": "Accessibility",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Accessibility undefined.overview:Accessibility downloaded/angular/angular.js-master/docs/content/guide/accessibility.ngdoc",
        "sortOn": "Accessibility",
        "module": "Accessibility",
        "left": 4,
        "level": 1,
        "root": "Developer Guide",
        "right": 5
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Bootstrap",
        "sortOrder": "350",
        "description": "\n\n# Bootstrap\n\nThis page explains the Angular initialization process and how you can manually initialize Angular\nif necessary.\n\n\n## Angular `<script>` Tag\n\nThis example shows the recommended path for integrating Angular with what we call automatic\ninitialization.\n\n\n```html\n<!doctype html>\n<html xmlns:ng=\"http://angularjs.org\" ng-app>\n  <body>\n    ...\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n\n  1. Place the `script` tag at the bottom of the page. Placing script tags at the end of the page\n    improves app load time because the HTML loading is not blocked by loading of the `angular.js`\n    script. You can get the latest bits from http://code.angularjs.org. Please don't link\n    your production code to this URL, as it will expose a security hole on your site. For\n    experimental development linking to our site is fine.\n    * Choose: `angular-[version].js` for a human-readable file, suitable for development and\n      debugging.\n    * Choose: `angular-[version].min.js` for a compressed and obfuscated file, suitable for use in\n      production.\n  2. Place `ng-app` to the root of your application, typically on the `<html>` tag if you want\n    angular to auto-bootstrap your application.\n\n        <html ng-app>\n\n  3. If you choose to use the old style directive syntax `ng:` then include xml-namespace in `html`\n    to make IE happy. (This is here for historical reasons, and we no longer recommend use of\n    `ng:`.)\n\n        <html xmlns:ng=\"http://angularjs.org\">\n\n\n\n## Automatic Initialization\n\n<img class=\"pull-right\" style=\"padding-left: 3em;\" src=\"img/guide/concepts-startup.png\">\n\nAngular initializes automatically upon `DOMContentLoaded` event or when the `angular.js` script is\nevaluated if at that time `document.readyState` is set to `'complete'`. At this point Angular looks\nfor the {@link ng.directive:ngApp `ng-app`} directive which designates your application root.\nIf the {@link ng.directive:ngApp `ng-app`} directive is found then Angular will:\n\n  * load the {@link guide/module module} associated with the directive.\n  * create the application {@link auto.$injector injector}\n  * compile the DOM treating the {@link ng.directive:ngApp\n    `ng-app`} directive as the root of the compilation. This allows you to tell it to treat only a\n    portion of the DOM as an Angular application.\n\n\n```html\n<!doctype html>\n<html ng-app=\"optionalModuleName\">\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n\nAs a best practice, consider adding an `ng-strict-di` directive on the same element as\n`ng-app`:\n\n\n```html\n<!doctype html>\n<html ng-app=\"optionalModuleName\" ng-strict-di>\n  <body>\n    I can add: {{ 1+2 }}.\n    <script src=\"angular.js\"></script>\n  </body>\n</html>\n```\n\nThis will ensure that all services in your application are properly annotated.\nSee the {@link guide/di#using-strict-dependency-injection dependency injection strict mode} docs\nfor more.\n\n\n## Manual Initialization\n\nIf you need to have more control over the initialization process, you can use a manual\nbootstrapping method instead. Examples of when you'd need to do this include using script loaders\nor the need to perform an operation before Angular compiles a page.\n\nHere is an example of manually initializing Angular:\n\n```html\n<!doctype html>\n<html>\n<body>\n  <div ng-controller=\"MyController\">\n    Hello {{greetMe}}!\n  </div>\n  <script src=\"http://code.angularjs.org/snapshot/angular.js\"></script>\n\n  <script>\n    angular.module('myApp', [])\n      .controller('MyController', ['$scope', function ($scope) {\n        $scope.greetMe = 'World';\n      }]);\n\n    angular.element(document).ready(function() {\n      angular.bootstrap(document, ['myApp']);\n    });\n  </script>\n</body>\n</html>\n```\n\nNote that we provided the name of our application module to be loaded into the injector as the second\nparameter of the {@link angular.bootstrap} function. Notice that `angular.bootstrap` will not create modules\non the fly. You must create any custom {@link guide/module modules} before you pass them as a parameter.\n\nYou should call `angular.bootstrap()` *after* you've loaded or defined your modules.\nYou cannot add controllers, services, directives, etc after an application bootstraps.\n\n<div class=\"alert alert-warning\">\n**Note:** You should not use the ng-app directive when manually bootstrapping your app.\n</div>\n\nThis is the sequence that your code should follow:\n\n  1. After the page and all of the code is loaded, find the root element of your AngularJS\n  application, which is typically the root of the document.\n\n  2. Call {@link angular.bootstrap} to {@link compiler compile} the element into an\n  executable, bi-directionally bound application.\n\n\n## Deferred Bootstrap\n\nThis feature enables tools like [Batarang](https://github.com/angular/angularjs-batarang) and test runners\nto hook into angular's bootstrap process and sneak in more modules\ninto the DI registry which can replace or augment DI services for\nthe purpose of instrumentation or mocking out heavy dependencies.\n\nIf `window.name` contains prefix `NG_DEFER_BOOTSTRAP!` when\n{@link angular.bootstrap} is called, the bootstrap process will be paused\nuntil `angular.resumeBootstrap()` is called.\n\n`angular.resumeBootstrap()` takes an optional array of modules that\nshould be added to the original list of modules that the app was\nabout to be bootstrapped with.",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/bootstrap.ngdoc",
        "id": "Bootstrap",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Bootstrap undefined.overview:Bootstrap downloaded/angular/angular.js-master/docs/content/guide/bootstrap.ngdoc",
        "sortOn": "Bootstrap",
        "module": "Bootstrap",
        "left": 6,
        "level": 1,
        "root": "Developer Guide",
        "right": 7
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "HTML Compiler",
        "sortOrder": "330",
        "description": "\n\n# HTML Compiler\n\n<div class=\"alert alert-warning\">\n**Note:** this guide is targeted towards developers who are already familiar with AngularJS basics.\n\nIf you're just getting started, we recommend the {@link tutorial/ tutorial} first.\nIf you just want to create custom directives, we recommend the {@link guide/directive directives guide}.\nIf you want a deeper look into Angular's compilation process, you're in the right place.\n</div>\n\n\n## Overview\n\nAngular's {@link ng.$compile HTML compiler} allows the developer to teach the\nbrowser new HTML syntax. The compiler allows you to attach behavior to any HTML element or attribute\nand even create new HTML elements or attributes with custom behavior. Angular calls these behavior\nextensions {@link ng.$compileProvider#directive directives}.\n\nHTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion.\nFor example if something needs to be centered, there is no need to provide instructions to the\nbrowser how the window size needs to be divided in half so that the center is found, and that this\ncenter needs to be aligned with the text's center. Simply add an `align=\"center\"` attribute to any\nelement to achieve the desired behavior. Such is the power of declarative language.\n\nHowever, the declarative language is also limited, as it does not allow you to teach the browser new\nsyntax. For example, there is no easy way to get the browser to align the text at 1/3 the position\ninstead of 1/2. What is needed is a way to teach the browser new HTML syntax.\n\nAngular comes pre-bundled with common directives which are useful for building any app. We also\nexpect that you will create directives that are specific to your app. These extensions become a\nDomain Specific Language for building your application.\n\nAll of this compilation takes place in the web browser; no server side or pre-compilation step is\ninvolved.\n\n\n## Compiler\n\nCompiler is an Angular service which traverses the DOM looking for attributes. The compilation\nprocess happens in two phases.\n\n  1. **Compile:** traverse the DOM and collect all of the directives. The result is a linking\n  function.\n\n  2. **Link:** combine the directives with a scope and produce a live view. Any changes in the\n  scope model are reflected in the view, and any user interactions with the view are reflected\n  in the scope model. This makes the scope model the single source of truth.\n\nSome directives such as {@link ng.directive:ngRepeat `ng-repeat`} clone DOM elements once\nfor each item in a collection. Having a compile and link phase improves performance since the\ncloned template only needs to be compiled once, and then linked once for each clone instance.\n\n\n## Directive\n\nA directive is a behavior which should be triggered when specific HTML constructs are encountered\nduring the compilation process. The directives can be placed in element names, attributes, class\nnames, as well as comments. Here are some equivalent examples of invoking the {@link\nng.directive:ngBind `ng-bind`} directive.\n\n```html\n  <span ng-bind=\"exp\"></span>\n  <span class=\"ng-bind: exp;\"></span>\n  <ng-bind></ng-bind>\n  <!-- directive: ng-bind exp -->\n```\n\nA directive is just a function which executes when the compiler encounters it in the DOM. See {@link\nng.$compileProvider#directive directive API} for in-depth documentation on how\nto write directives.\n\nHere is a directive which makes any element draggable. Notice the `draggable` attribute on the\n`<span>` element.\n\n<example module=\"drag\">\n  <file name=\"script.js\">\n    angular.module('drag', []).\n      directive('draggable', function($document) {\n        return function(scope, element, attr) {\n          var startX = 0, startY = 0, x = 0, y = 0;\n          element.css({\n           position: 'relative',\n           border: '1px solid red',\n           backgroundColor: 'lightgrey',\n           cursor: 'pointer',\n           display: 'block',\n           width: '65px'\n          });\n          element.on('mousedown', function(event) {\n            // Prevent default dragging of selected content\n            event.preventDefault();\n            startX = event.screenX - x;\n            startY = event.screenY - y;\n            $document.on('mousemove', mousemove);\n            $document.on('mouseup', mouseup);\n          });\n\n          function mousemove(event) {\n            y = event.screenY - startY;\n            x = event.screenX - startX;\n            element.css({\n              top: y + 'px',\n              left:  x + 'px'\n            });\n          }\n\n          function mouseup() {\n            $document.off('mousemove', mousemove);\n            $document.off('mouseup', mouseup);\n          }\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <span draggable>Drag ME</span>\n  </file>\n</example>\n\n\nThe presence of the `draggable` attribute on any element gives the element new behavior.\nWe extended the vocabulary of the browser in a way which is natural to anyone who is familiar with the principles of HTML.\n\n\n## Understanding View\n\nMost other templating systems consume a static string template and\ncombine it with data, resulting in a new string. The resulting text is then `innerHTML`ed into\nan element.\n\n<img src=\"img/One_Way_Data_Binding.png\">\n\nThis means that any changes to the data need to be re-merged with the template and then\n`innerHTML`ed into the DOM. Some of the issues with this approach are:\n\n1. reading user input and merging it with data\n2. clobbering user input by overwriting it\n3. managing the whole update process\n4. lack of behavior expressiveness\n\nAngular is different. The Angular compiler consumes the DOM, not string templates.\nThe result is a linking function, which when combined with a scope model results in a live view. The\nview and scope model bindings are transparent. The developer does not need to make any special calls to update\nthe view. And because `innerHTML` is not used, you won't accidentally clobber user input.\nFurthermore, Angular directives can contain not just text bindings, but behavioral constructs as\nwell.\n\n<img src=\"img/Two_Way_Data_Binding.png\">\n\nThe Angular approach produces a stable DOM. The DOM element instance bound to a model\nitem instance does not change for the lifetime of the binding. This means that the code can get\nhold of the elements and register event handlers and know that the reference will not be destroyed\nby template data merge.\n\n\n\n## How directives are compiled\n\nIt's important to note that Angular operates on DOM nodes rather than strings. Usually, you don't\nnotice this restriction because when a page loads, the web browser parses HTML into the DOM automatically.\n\nHTML compilation happens in three phases:\n\n  1. {@link ng.$compile `$compile`} traverses the DOM and matches directives.\n\n  If the compiler finds that an element matches a directive, then the directive is added to the list of\n  directives that match the DOM element. A single element may match multiple directives.\n\n  2. Once all directives matching a DOM element have been identified, the compiler sorts the directives\n  by their `priority`.\n\n  Each directive's `compile` functions are executed. Each `compile` function has a chance to\n  modify the DOM. Each `compile` function returns a `link` function. These functions are composed into\n  a \"combined\" link function, which invokes each directive's returned `link` function.\n\n  3. `$compile` links the template with the scope by calling the combined linking function from the previous step.\n  This in turn will call the linking function of the individual directives, registering listeners on the elements\n  and setting up {@link ng.$rootScope.Scope#$watch `$watch`s} with the {@link ng.$rootScope.Scope `scope`}\n  as each directive is configured to do.\n\nThe result of this is a live binding between the scope and the DOM. So at this point, a change in\na model on the compiled scope will be reflected in the DOM.\n\nBelow is the corresponding code using the `$compile` service.\nThis should help give you an idea of what Angular does internally.\n\n```js\n  var $compile = ...; // injected into your code\n  var scope = ...;\n  var parent = ...; // DOM element where the compiled template can be appended\n\n  var html = '<div ng-bind=\"exp\"></div>';\n\n  // Step 1: parse HTML into DOM element\n  var template = angular.element(html);\n\n  // Step 2: compile the template\n  var linkFn = $compile(template);\n\n  // Step 3: link the compiled template with the scope.\n  var element = linkFn(scope);\n\n  // Step 4: Append to DOM (optional)\n  parent.appendChild(element);\n```\n\n### The difference between Compile and Link\n\nAt this point you may wonder why the compile process has separate compile and link phases. The\nshort answer is that compile and link separation is needed any time a change in a model causes\na change in the **structure** of the DOM.\n\nIt's rare for directives to have a **compile function**, since most directives are concerned with\nworking with a specific DOM element instance rather than changing its overall structure.\n\nDirectives often have a **link function**. A link function allows the directive to register\nlisteners to the specific cloned DOM element instance as well as to copy content into the DOM\nfrom the scope.\n\n<div class=\"alert alert-success\">\n**Best Practice:** Any operation which can be shared among the instance of directives should be\nmoved to the compile function for performance reasons.\n</div>\n\n#### An Example of \"Compile\" Versus \"Link\"\n\nTo understand, let's look at a real-world example with `ngRepeat`:\n\n```html\nHello {{user.name}}, you have these actions:\n<ul>\n  <li ng-repeat=\"action in user.actions\">\n    {{action.description}}\n  </li>\n</ul>\n```\n\nWhen the above example is compiled, the compiler visits every node and looks for directives.\n\n`{{user.name}}` matches the {@link ng.$interpolate interpolation directive}\nand `ng-repeat` matches the {@link ng.directive:ngRepeat `ngRepeat` directive}.\n\nBut {@link ng.directive:ngRepeat ngRepeat} has a dilemma.\n\nIt needs to be able to clone new `<li>` elements for every `action` in `user.actions`.\nThis initially seems trivial, but it becomes more complicated when you consider that `user.actions`\nmight have items added to it later. This means that it needs to save a clean copy of the `<li>`\nelement for cloning purposes.\n\nAs new `action`s are inserted, the template `<li>` element needs to be cloned and inserted into `ul`.\nBut cloning the `<li>` element is not enough. It also needs to compile the `<li>` so that its\ndirectives, like `{{action.description}}`, evaluate against the right {@link ng.$rootScope.Scope scope}.\n\n\nA naive approach to solving this problem would be to simply insert a copy of the `<li>` element and\nthen compile it.\nThe problem with this approach is that compiling on every `<li>` element that we clone would duplicate\na lot of the work. Specifically, we'd be traversing `<li>` each time before cloning it to find the\ndirectives. This would cause the compilation process to be slower, in turn making applications\nless responsive when inserting new nodes.\n\nThe solution is to break the compilation process into two phases:\n\nthe **compile phase** where all of the directives are identified and sorted by priority,\nand a **linking phase** where any work which \"links\" a specific instance of the\n{@link ng.$rootScope.Scope scope} and the specific instance of an `<li>` is performed.\n\n<div class=\"alert alert-warning\">\n**Note:** *Link* means setting up listeners on the DOM and setting up `$watch` on the Scope to\nkeep the two in sync.\n</div>\n\n{@link ng.directive:ngRepeat `ngRepeat`} works by preventing the compilation process from\ndescending into the `<li>` element so it can make a clone of the original and handle inserting\nand removing DOM nodes itself.\n\nInstead the {@link ng.directive:ngRepeat `ngRepeat`} directive compiles `<li>` separately.\nThe result of the `<li>` element compilation is a linking function which contains all of the\ndirectives contained in the `<li>` element, ready to be attached to a specific clone of the `<li>`\nelement.\n\nAt runtime the {@link ng.directive:ngRepeat `ngRepeat`} watches the expression and as items\nare added to the array it clones the `<li>` element, creates a new\n{@link ng.$rootScope.Scope scope} for the cloned `<li>` element and calls the link function\non the cloned `<li>`.\n\n\n\n### Understanding How Scopes Work with Transcluded Directives\n\nOne of the most common use cases for directives is to create reusable components.\n\nBelow is a pseudo code showing how a simplified dialog component may work.\n\n```html\n<div>\n  <button ng-click=\"show=true\">show</button>\n\n  <dialog title=\"Hello {{username}}.\"\n          visible=\"show\"\n          on-cancel=\"show = false\"\n          on-ok=\"show = false; doSomething()\">\n     Body goes here: {{username}} is {{title}}.\n  </dialog>\n</div>\n```\n\nClicking on the \"show\" button will open the dialog. The dialog will have a title, which is\ndata bound to `username`, and it will also have a body which we would like to transclude\ninto the dialog.\n\nHere is an example of what the template definition for the `dialog` widget may look like.\n\n```html\n<div ng-show=\"visible\">\n  <h3>{{title}}</h3>\n  <div class=\"body\" ng-transclude></div>\n  <div class=\"footer\">\n    <button ng-click=\"onOk()\">Save changes</button>\n    <button ng-click=\"onCancel()\">Close</button>\n  </div>\n</div>\n```\n\nThis will not render properly, unless we do some scope magic.\n\nThe first issue we have to solve is that the dialog box template expects `title` to be defined.\nBut we would like the template's scope property `title` to be the result of interpolating the\n`<dialog>` element's `title` attribute (i.e. `\"Hello {{username}}\"`). Furthermore, the buttons expect\nthe `onOk` and `onCancel` functions to be present in the scope. This limits the usefulness of the\nwidget. To solve the mapping issue we use the `scope` to create local variables which the template\nexpects as follows:\n\n```js\n  scope: {\n    title: '@',             // the title uses the data-binding from the parent scope\n    onOk: '&',              // create a delegate onOk function\n    onCancel: '&',          // create a delegate onCancel function\n    visible: '='            // set up visible to accept data-binding\n  }\n```\n\nCreating local properties on widget scope creates two problems:\n\n  1. isolation - if the user forgets to set `title` attribute of the dialog widget the dialog\n     template will bind to parent scope property. This is unpredictable and undesirable.\n\n  2. transclusion - the transcluded DOM can see the widget locals, which may overwrite the\n     properties which the transclusion needs for data-binding. In our example the `title`\n     property of the widget clobbers the `title` property of the transclusion.\n\n\nTo solve the issue of lack of isolation, the directive declares a new `isolated` scope. An\nisolated scope does not prototypically inherit from the parent scope, and therefore we don't have\nto worry about accidentally clobbering any properties.\n\nHowever `isolated` scope creates a new problem: if a transcluded DOM is a child of the widget\nisolated scope then it will not be able to bind to anything. For this reason the transcluded scope\nis a child of the original scope, before the widget created an isolated scope for its local\nvariables. This makes the transcluded and widget isolated scope siblings.\n\nThis may seem to be unexpected complexity, but it gives the widget user and developer the least\nsurprise.\n\nTherefore the final directive definition looks something like this:\n\n```js\ntransclude: true,\nscope: {\n    title: '@',             // the title uses the data-binding from the parent scope\n    onOk: '&',              // create a delegate onOk function\n    onCancel: '&',          // create a delegate onCancel function\n    visible: '='            // set up visible to accept data-binding\n},\nrestrict: 'E',\nreplace: true\n```\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/compiler.ngdoc",
        "id": "HTML Compiler",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "HTML Compiler undefined.overview:HTML Compiler downloaded/angular/angular.js-master/docs/content/guide/compiler.ngdoc",
        "sortOn": "HTML Compiler",
        "module": "HTML Compiler",
        "left": 8,
        "level": 1,
        "root": "Developer Guide",
        "right": 9
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Conceptual Overview",
        "sortOrder": "200",
        "description": "\n\n# Conceptual Overview\n\nThis section briefly touches on all of the important parts of AngularJS using a simple example.\nFor a more in-depth explanation, see the {@link tutorial/ tutorial}.\n\n| Concept          | Description                     |\n|------------------|------------------------------------------|\n|{@link concepts#template Template}          | HTML with additional markup |\n|{@link concepts#directive Directives}        | extend HTML with custom attributes and elements |\n|{@link concepts#model Model}             | the data shown to the user in the view and with which the user interacts |\n|{@link concepts#scope Scope}             | context where the model is stored so that controllers, directives and expressions can access it |\n|{@link concepts#expression Expressions}       | access variables and functions from the scope |\n|{@link concepts#compiler Compiler}          | parses the template and instantiates directives and expressions |\n|{@link concepts#filter Filter}            | formats the value of an expression for display to the user |\n|{@link concepts#view View}              | what the user sees (the DOM) |\n|{@link concepts#databinding Data Binding}      | sync data between the model and the view |\n|{@link concepts#controller Controller}        | the business logic behind views |\n|{@link concepts#di Dependency Injection} | Creates and wires objects and functions |\n|{@link concepts#injector Injector}          | dependency injection container |\n|{@link concepts#module Module}            | a container for the different parts of an app including controllers, services, filters, directives which configures the Injector |\n|{@link concepts#service Service}           | reusable business logic independent of views |\n\n\n## A first example: Data binding\n\nIn the following example we will build a form to calculate the costs of an invoice in different currencies.\n\nLet's start with input fields for quantity and cost whose values are multiplied to produce the total of the invoice:\n\n\n<example name=\"guide-concepts-1\" ng-app-included=\"true\">\n  <file name=\"index.html\">\n      <div ng-app ng-init=\"qty=1;cost=2\">\n        <b>Invoice:</b>\n        <div>\n          Quantity: <input type=\"number\" min=\"0\" ng-model=\"qty\">\n        </div>\n        <div>\n          Costs: <input type=\"number\" min=\"0\" ng-model=\"cost\">\n        </div>\n        <div>\n          <b>Total:</b> {{qty * cost | currency}}\n        </div>\n      </div>\n  </file>\n</example>\n\nTry out the Live Preview above, and then let's walk through the example and describe what's going on.\n\n<img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-databinding1.png\">\n\nThis looks like normal HTML, with some new markup. In Angular, a file like this is called a\n<a name=\"template\">{@link templates template}</a>. When Angular starts your application, it parses and\nprocesses this new markup from the template using the <a name=\"compiler\">{@link compiler compiler}</a>.\nThe loaded, transformed and rendered DOM is then called the <a name=\"view\">view</a>.\n\nThe first kind of new markup are the <a name=\"directive\">{@link directive directives}</a>.\nThey apply special behavior to attributes or elements in the HTML. In the example above we use the\n{@link ng.directive:ngApp `ng-app`} attribute, which is linked to a directive that automatically\ninitializes our application. Angular also defines a directive for the {@link ng.directive:input `input`}\nelement that adds extra behavior to the element. The {@link ng.directive:ngModel `ng-model`} directive\nstores/updates the value of the input field into/from a variable.\n\n<div class=\"alert alert-info\">\n**Custom directives to access the DOM**: In Angular, the only place where an application should access the DOM is\n within directives. This is important because artifacts that access the DOM are hard to test.\n If you need to access the DOM directly you should write a custom directive for this. The\n {@link directive directives guide} explains how to do this.\n</div>\n\nThe second kind of new markup are the double curly braces `{{ expression | filter }}`:\nWhen the compiler encounters this markup, it will replace it with the evaluated value of the markup.\nAn <a name=\"expression\">{@link expression expression}</a> in a template is a JavaScript-like code snippet that allows\nto read and write variables. Note that those variables are not global variables.\nJust like variables in a JavaScript function live in a scope,\nAngular provides a <a name=\"scope\">{@link scope scope}</a> for the variables accessible to expressions.\nThe values that are stored in variables on the scope are referred to as the <a name=\"model\">model</a>\nin the rest of the documentation.\nApplied to the example above, the markup directs Angular to \"take the data we got from the input widgets\nand multiply them together\".\n\nThe example above also contains a <a name=\"filter\">{@link guide/filter filter}</a>.\nA filter formats the value of an expression for display to the user.\nIn the example above, the filter {@link ng.filter:currency `currency`} formats a number\ninto an output that looks like money.\n\nThe important thing in the example is that Angular provides _live_ bindings:\nWhenever the input values change, the value of the expressions are automatically\nrecalculated and the DOM is updated with their values.\nThe concept behind this is <a name=\"databinding\">{@link databinding two-way data binding}</a>.\n\n\n## Adding UI logic: Controllers\n\nLet's add some more logic to the example that allows us to enter and calculate the costs in\ndifferent currencies and also pay the invoice.\n\n<example name=\"guide-concepts-2\" ng-app-included=\"true\" >\n  <file name=\"invoice1.js\">\n    angular.module('invoice1', [])\n      .controller('InvoiceController', function() {\n        this.qty = 1;\n        this.cost = 2;\n        this.inCurr = 'EUR';\n        this.currencies = ['USD', 'EUR', 'CNY'];\n        this.usdToForeignRates = {\n          USD: 1,\n          EUR: 0.74,\n          CNY: 6.09\n        };\n\n        this.total = function total(outCurr) {\n          return this.convertCurrency(this.qty * this.cost, this.inCurr, outCurr);\n        };\n        this.convertCurrency = function convertCurrency(amount, inCurr, outCurr) {\n          return amount * this.usdToForeignRates[outCurr] / this.usdToForeignRates[inCurr];\n        };\n        this.pay = function pay() {\n          window.alert(\"Thanks!\");\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n      <div ng-app=\"invoice1\" ng-controller=\"InvoiceController as invoice\">\n        <b>Invoice:</b>\n        <div>\n          Quantity: <input type=\"number\" min=\"0\" ng-model=\"invoice.qty\" required >\n        </div>\n        <div>\n          Costs: <input type=\"number\" min=\"0\" ng-model=\"invoice.cost\" required >\n          <select ng-model=\"invoice.inCurr\">\n            <option ng-repeat=\"c in invoice.currencies\">{{c}}</option>\n          </select>\n        </div>\n        <div>\n          <b>Total:</b>\n          <span ng-repeat=\"c in invoice.currencies\">\n            {{invoice.total(c) | currency:c}}\n          </span>\n          <button class=\"btn\" ng-click=\"invoice.pay()\">Pay</button>\n        </div>\n      </div>\n  </file>\n</example>\n\nWhat changed?\n\nFirst, there is a new JavaScript file that contains a <a name=\"controller\">{@link controller controller}</a>.\nMore exactly, the file contains a constructor function that creates the actual controller instance.\nThe purpose of controllers is to expose variables and functionality to expressions and directives.\n\nBesides the new file that contains the controller code we also added an\n{@link ng.directive:ngController `ng-controller`} directive to the HTML.\nThis directive tells Angular that the new `InvoiceController` is responsible for the element with the directive\nand all of the element's children.\nThe syntax `InvoiceController as invoice` tells Angular to instantiate the controller\nand save it in the variable `invoice` in the current scope.\n\nWe also changed all expressions in the page to read and write variables within that\ncontroller instance by prefixing them with `invoice.` . The possible currencies are defined in the controller\nand added to the template using {@link ng.directive:ngRepeat `ng-repeat`}.\nAs the controller contains a `total` function\nwe are also able to bind the result of that function to the DOM using `{{ invoice.total(...) }}`.\n\nAgain, this binding is live, i.e. the DOM will be automatically updated\nwhenever the result of the function changes.\nThe button to pay the invoice uses the directive {@link ng.directive:ngClick `ngClick`}. This will evaluate the\ncorresponding expression whenever the button is clicked.\n\nIn the new JavaScript file we are also creating a {@link concepts#module module}\nat which we register the controller. We will talk about modules in the next section.\n\nThe following graphic shows how everything works together after we introduced the controller:\n\n<img style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-databinding2.png\">\n\n## View-independent business logic: Services\n\nRight now, the `InvoiceController` contains all logic of our example. When the application grows it\nis a good practice to move view-independent logic from the controller into a\n<a name=\"service\">{@link services service}</a>, so it can be reused by other parts\nof the application as well. Later on, we could also change that service to load the exchange rates\nfrom the web, e.g. by calling the Yahoo Finance API, without changing the controller.\n\nLet's refactor our example and move the currency conversion into a service in another file:\n\n<example name=\"guide-concepts-2\" ng-app-included=\"true\">\n  <file name=\"finance2.js\">\n    angular.module('finance2', [])\n      .factory('currencyConverter', function() {\n        var currencies = ['USD', 'EUR', 'CNY'];\n        var usdToForeignRates = {\n          USD: 1,\n          EUR: 0.74,\n          CNY: 6.09\n        };\n        var convert = function (amount, inCurr, outCurr) {\n          return amount * usdToForeignRates[outCurr] / usdToForeignRates[inCurr];\n        };\n\n        return {\n          currencies: currencies,\n          convert: convert\n        };\n      });\n  </file>\n  <file name=\"invoice2.js\">\n    angular.module('invoice2', ['finance2'])\n      .controller('InvoiceController', ['currencyConverter', function(currencyConverter) {\n        this.qty = 1;\n        this.cost = 2;\n        this.inCurr = 'EUR';\n        this.currencies = currencyConverter.currencies;\n\n        this.total = function total(outCurr) {\n          return currencyConverter.convert(this.qty * this.cost, this.inCurr, outCurr);\n        };\n        this.pay = function pay() {\n          window.alert(\"Thanks!\");\n        };\n      }]);\n  </file>\n  <file name=\"index.html\">\n      <div ng-app=\"invoice2\" ng-controller=\"InvoiceController as invoice\">\n        <b>Invoice:</b>\n        <div>\n          Quantity: <input type=\"number\" min=\"0\" ng-model=\"invoice.qty\" required >\n        </div>\n        <div>\n          Costs: <input type=\"number\" min=\"0\" ng-model=\"invoice.cost\" required >\n          <select ng-model=\"invoice.inCurr\">\n            <option ng-repeat=\"c in invoice.currencies\">{{c}}</option>\n          </select>\n        </div>\n        <div>\n          <b>Total:</b>\n          <span ng-repeat=\"c in invoice.currencies\">\n            {{invoice.total(c) | currency:c}}\n          </span>\n          <button class=\"btn\" ng-click=\"invoice.pay()\">Pay</button>\n        </div>\n      </div>\n  </file>\n</example>\n\n<img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-module-service.png\">\n\nWhat changed?\nWe moved the `convertCurrency` function and the definition of the existing currencies\ninto the new file `finance2.js`. But how does the controller\nget a hold of the now separated function?\n\nThis is where <a name=\"di\">{@link di Dependency Injection}</a> comes into play.\nDependency Injection (DI) is a software design pattern that\ndeals with how objects and functions get created and how they get a hold of their dependencies.\nEverything within Angular (directives, filters, controllers,\nservices, ...) is created and wired using dependency injection. Within Angular,\nthe DI container is called the <a name=\"injector\">{@link di injector}</a>.\n\nTo use DI, there needs to be a place where all the things that should work together are registered.\nIn Angular, this is the purpose of the <a name=\"module\">{@link module modules}</a>.\nWhen Angular starts, it will use the configuration of the module with the name defined by the `ng-app` directive,\nincluding the configuration of all modules that this module depends on.\n\nIn the example above:\nThe template contains the directive `ng-app=\"invoice2\"`. This tells Angular\nto use the `invoice2` module as the main module for the application.\nThe code snippet `angular.module('invoice2', ['finance2'])`  specifies that the `invoice2` module depends on the\n`finance2` module. By this, Angular uses the `InvoiceController` as well as the `currencyConverter` service.\n\nNow that Angular knows of all the parts of the application, it needs to create them.\nIn the previous section we saw that controllers are created using a factory function.\nFor services there are multiple ways to define their factory\n(see the {@link services service guide}).\nIn the example above, we are using a function that returns the `currencyConverter` function as the factory\nfor the service.\n\nBack to the initial question: How does the `InvoiceController` get a reference to the `currencyConverter` function?\nIn Angular, this is done by simply defining arguments on the constructor function. With this, the injector\nis able to create the objects in the right order and pass the previously created objects into the\nfactories of the objects that depend on them.\nIn our example, the `InvoiceController` has an argument named `currencyConverter`. By this, Angular knows about the\ndependency between the controller and the service and calls the controller with the service instance as argument.\n\nThe last thing that changed in the example between the previous section and this section is that we\nnow pass an array to the `module.controller` function, instead of a plain function. The array first\ncontains the names of the service dependencies that the controller needs. The last entry\nin the array is the controller constructor function.\nAngular uses this array syntax to define the dependencies so that the DI also works after minifying\nthe code, which will most probably rename the argument name of the controller constructor function\nto something shorter like `a`.\n\n## Accessing the backend\n\nLet's finish our example by fetching the exchange rates from the Yahoo Finance API.\nThe following example shows how this is done with Angular:\n\n<example name=\"guide-concepts-3\" ng-app-included=\"true\">\n  <file name=\"invoice3.js\">\n    angular.module('invoice3', ['finance3'])\n      .controller('InvoiceController', ['currencyConverter', function(currencyConverter) {\n        this.qty = 1;\n        this.cost = 2;\n        this.inCurr = 'EUR';\n        this.currencies = currencyConverter.currencies;\n\n        this.total = function total(outCurr) {\n          return currencyConverter.convert(this.qty * this.cost, this.inCurr, outCurr);\n        };\n        this.pay = function pay() {\n          window.alert(\"Thanks!\");\n        };\n      }]);\n  </file>\n  <file name=\"finance3.js\">\n    angular.module('finance3', [])\n      .factory('currencyConverter', ['$http', function($http) {\n        var YAHOO_FINANCE_URL_PATTERN =\n              '//query.yahooapis.com/v1/public/yql?q=select * from '+\n              'yahoo.finance.xchange where pair in (\"PAIRS\")&format=json&'+\n              'env=store://datatables.org/alltableswithkeys&callback=JSON_CALLBACK';\n        var currencies = ['USD', 'EUR', 'CNY'];\n        var usdToForeignRates = {};\n\n        var convert = function (amount, inCurr, outCurr) {\n          return amount * usdToForeignRates[outCurr] / usdToForeignRates[inCurr];\n        };\n\n        var refresh = function() {\n          var url = YAHOO_FINANCE_URL_PATTERN.\n                     replace('PAIRS', 'USD' + currencies.join('\",\"USD'));\n          return $http.jsonp(url).success(function(data) {\n            var newUsdToForeignRates = {};\n            angular.forEach(data.query.results.rate, function(rate) {\n              var currency = rate.id.substring(3,6);\n              newUsdToForeignRates[currency] = window.parseFloat(rate.Rate);\n            });\n            usdToForeignRates = newUsdToForeignRates;\n          });\n        };\n\n        refresh();\n\n        return {\n          currencies: currencies,\n          convert: convert,\n          refresh: refresh\n        };\n      }]);\n  </file>\n  <file name=\"index.html\">\n      <div ng-app=\"invoice3\" ng-controller=\"InvoiceController as invoice\">\n        <b>Invoice:</b>\n        <div>\n          Quantity: <input type=\"number\" min=\"0\" ng-model=\"invoice.qty\" required >\n        </div>\n        <div>\n          Costs: <input type=\"number\" min=\"0\" ng-model=\"invoice.cost\" required >\n          <select ng-model=\"invoice.inCurr\">\n            <option ng-repeat=\"c in invoice.currencies\">{{c}}</option>\n          </select>\n        </div>\n        <div>\n          <b>Total:</b>\n          <span ng-repeat=\"c in invoice.currencies\">\n            {{invoice.total(c) | currency:c}}\n          </span>\n          <button class=\"btn\" ng-click=\"invoice.pay()\">Pay</button>\n        </div>\n      </div>\n  </file>\n</example>\n\nWhat changed?\nOur `currencyConverter` service of the `finance` module now uses the {@link ng.$http `$http`}, a\nbuilt-in service provided by Angular for accessing a server backend. `$http` is a wrapper around\n[`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)\nand [JSONP](http://en.wikipedia.org/wiki/JSONP) transports.\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/concepts.ngdoc",
        "id": "Conceptual Overview",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Conceptual Overview undefined.overview:Conceptual Overview downloaded/angular/angular.js-master/docs/content/guide/concepts.ngdoc",
        "sortOn": "Conceptual Overview",
        "module": "Conceptual Overview",
        "left": 10,
        "level": 1,
        "root": "Developer Guide",
        "right": 11
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Controllers",
        "sortOrder": "220",
        "description": "\n\n# Understanding Controllers\n\nIn Angular, a Controller is a JavaScript **constructor function** that is used to augment the\n{@link scope Angular Scope}.\n\nWhen a Controller is attached to the DOM via the {@link ng.directive:ngController ng-controller}\ndirective, Angular will instantiate a new Controller object, using the specified Controller's\n**constructor function**. A new **child scope** will be available as an injectable parameter to the\nController's constructor function as `$scope`.\n\nUse controllers to:\n\n- Set up the initial state of the `$scope` object.\n- Add behavior to the `$scope` object.\n\nDo not use controllers to:\n\n- Manipulate DOM — Controllers should contain only business logic.\n  Putting any presentation logic into Controllers significantly affects its testability. Angular\n  has {@link databinding databinding} for most cases and {@link guide/directive directives} to\n  encapsulate manual DOM manipulation.\n- Format input — Use {@link forms angular form controls} instead.\n- Filter output — Use {@link guide/filter angular filters} instead.\n- Share code or state across controllers — Use {@link services angular\nservices} instead.\n- Manage the life-cycle of other components (for example, to create service instances).\n\n## Setting up the initial state of a `$scope` object\n\nTypically, when you create an application you need to set up the initial state for the Angular\n`$scope`. You set up the initial state of a scope by attaching properties to the `$scope` object.\nThe properties contain the **view model** (the model that will be presented by the view).  All the\n`$scope` properties will be available to the {@link templates template} at the point in the DOM where the Controller\nis registered.\n\nThe following example demonstrates creating a `GreetingController`, which attaches a `greeting`\nproperty containing the string `'Hola!'` to the `$scope`:\n\n```js\nvar myApp = angular.module('myApp',[]);\n\nmyApp.controller('GreetingController', ['$scope', function($scope) {\n  $scope.greeting = 'Hola!';\n}]);\n```\n\nWe create an {@link module Angular Module}, `myApp`, for our application. Then we add the controller's\nconstructor function to the module using the `.controller()` method. This keeps the controller's\nconstructor function out of the global scope.\n\n<div class=\"alert alert-info\">\nWe have used an **inline injection annotation** to explicitly specify the dependency\nof the Controller on the `$scope` service provided by Angular. See the guide on\n{@link guide/di Dependency Injection} for more information.\n</div>\n\nWe attach our controller to the DOM using the `ng-controller` directive. The `greeting` property can\nnow be data-bound to the template:\n\n```js\n<div ng-controller=\"GreetingController\">\n  {{ greeting }}\n</div>\n```\n\n\n## Adding Behavior to a Scope Object\n\nIn order to react to events or execute computation in the view we must provide behavior to the\nscope. We add behavior to the scope by attaching methods to the `$scope` object.  These methods are\nthen available to be called from the template/view.\n\nThe following example uses a Controller to add a method, which doubles a number, to the scope:\n\n```js\nvar myApp = angular.module('myApp',[]);\n\nmyApp.controller('DoubleController', ['$scope', function($scope) {\n  $scope.double = function(value) { return value * 2; };\n}]);\n```\n\nOnce the Controller has been attached to the DOM, the `double` method can be invoked in an Angular\nexpression in the template:\n\n```js\n<div ng-controller=\"DoubleController\">\n  Two times <input ng-model=\"num\"> equals {{ double(num) }}\n</div>\n```\n\nAs discussed in the {@link concepts Concepts} section of this guide, any\nobjects (or primitives) assigned to the scope become model properties. Any methods assigned to\nthe scope are available in the template/view, and can be invoked via angular expressions\nand `ng` event handler directives (e.g. {@link ng.directive:ngClick ngClick}).\n\n## Using Controllers Correctly\n\nIn general, a Controller shouldn't try to do too much. It should contain only the business logic\nneeded for a single view.\n\nThe most common way to keep Controllers slim is by encapsulating work that doesn't belong to\ncontrollers into services and then using these services in Controllers via dependency injection.\nThis is discussed in the {@link di Dependency Injection} {@link services\nServices} sections of this guide.\n\n\n# Associating Controllers with Angular Scope Objects\n\nYou can associate Controllers with scope objects implicitly via the {@link ng.directive:ngController ngController\ndirective} or {@link ngRoute.$route $route service}.\n\n\n## Simple Spicy Controller Example\n\nTo illustrate further how Controller components work in Angular, let's create a little app with the\nfollowing components:\n\n- A {@link templates template} with two buttons and a simple message\n- A model consisting of a string named `spice`\n- A Controller with two functions that set the value of `spice`\n\nThe message in our template contains a binding to the `spice` model which, by default, is set to the\nstring \"very\". Depending on which button is clicked, the `spice` model is set to `chili` or\n`jalapeño`, and the message is automatically updated by data-binding.\n\n<example module=\"spicyApp1\">\n  <file name=\"index.html\">\n    <div ng-controller=\"SpicyController\">\n     <button ng-click=\"chiliSpicy()\">Chili</button>\n     <button ng-click=\"jalapenoSpicy()\">Jalapeño</button>\n     <p>The food is {{spice}} spicy!</p>\n    </div>\n  </file>\n  <file name=\"app.js\">\n    var myApp = angular.module('spicyApp1', []);\n\n    myApp.controller('SpicyController', ['$scope', function($scope) {\n        $scope.spice = 'very';\n\n        $scope.chiliSpicy = function() {\n            $scope.spice = 'chili';\n        };\n\n        $scope.jalapenoSpicy = function() {\n            $scope.spice = 'jalapeño';\n        };\n    }]);\n  </file>\n</example>\n\nThings to notice in the example above:\n\n- The `ng-controller` directive is used to (implicitly) create a scope for our template, and the\nscope is augmented (managed) by the `SpicyController` Controller.\n- `SpicyController` is just a plain JavaScript function. As an (optional) naming convention the name\nstarts with capital letter and ends with \"Controller\".\n- Assigning a property to `$scope` creates or updates the model.\n- Controller methods can be created through direct assignment to scope (see the `chiliSpicy` method)\n- The Controller methods and properties are available in the template (for the `<div>` element and\nits children).\n\n## Spicy Arguments Example\n\nController methods can also take arguments, as demonstrated in the following variation of the\nprevious example.\n\n<example module=\"spicyApp2\">\n  <file name=\"index.html\">\n  <div ng-controller=\"SpicyController\">\n   <input ng-model=\"customSpice\">\n   <button ng-click=\"spicy('chili')\">Chili</button>\n   <button ng-click=\"spicy(customSpice)\">Custom spice</button>\n   <p>The food is {{spice}} spicy!</p>\n  </div>\n  </file>\n  <file name=\"app.js\">\n    var myApp = angular.module('spicyApp2', []);\n\n    myApp.controller('SpicyController', ['$scope', function($scope) {\n        $scope.customSpice = \"wasabi\";\n        $scope.spice = 'very';\n\n        $scope.spicy = function(spice) {\n            $scope.spice = spice;\n        };\n    }]);\n  </file>\n</example>\n\nNotice that the `SpicyController` Controller now defines just one method called `spicy`, which takes one\nargument called `spice`. The template then refers to this Controller method and passes in a string\nconstant `'chili'` in the binding for the first button and a model property `customSpice` (bound to an\ninput box) in the second button.\n\n## Scope Inheritance Example\n\nIt is common to attach Controllers at different levels of the DOM hierarchy.  Since the\n{@link ng.directive:ngController ng-controller} directive creates a new child scope, we get a\nhierarchy of scopes that inherit from each other.  The `$scope` that each Controller receives will\nhave access to properties and methods defined by Controllers higher up the hierarchy.\nSee [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes) for\nmore information about scope inheritance.\n\n<example module=\"scopeInheritance\">\n  <file name=\"index.html\">\n    <div class=\"spicy\">\n      <div ng-controller=\"MainController\">\n        <p>Good {{timeOfDay}}, {{name}}!</p>\n\n        <div ng-controller=\"ChildController\">\n          <p>Good {{timeOfDay}}, {{name}}!</p>\n\n          <div ng-controller=\"GrandChildController\">\n            <p>Good {{timeOfDay}}, {{name}}!</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </file>\n  <file name=\"app.css\">\n    div.spicy div {\n      padding: 10px;\n      border: solid 2px blue;\n    }\n  </file>\n  <file name=\"app.js\">\n      var myApp = angular.module('scopeInheritance', []);\n      myApp.controller('MainController', ['$scope', function($scope) {\n        $scope.timeOfDay = 'morning';\n        $scope.name = 'Nikki';\n      }]);\n      myApp.controller('ChildController', ['$scope', function($scope) {\n        $scope.name = 'Mattie';\n      }]);\n      myApp.controller('GrandChildController', ['$scope', function($scope) {\n        $scope.timeOfDay = 'evening';\n        $scope.name = 'Gingerbread Baby';\n      }]);\n  </file>\n</example>\n\nNotice how we nested three `ng-controller` directives in our template. This will result in four\nscopes being created for our view:\n\n- The root scope\n- The `MainController` scope, which contains `timeOfDay` and `name` properties\n- The `ChildController` scope, which inherits the `timeOfDay` property but overrides (hides) the `name`\nproperty from the previous\n- The `GrandChildController` scope, which overrides (hides) both the `timeOfDay` property defined in `MainController`\nand the `name` property defined in `ChildController`\n\nInheritance works with methods in the same way as it does with properties. So in our previous\nexamples, all of the properties could be replaced with methods that return string values.\n\n\n# Testing Controllers\n\nAlthough there are many ways to test a Controller, one of the best conventions, shown below,\ninvolves injecting the {@link ng.$rootScope $rootScope} and {@link ng.$controller $controller}:\n\n**Controller Definition:**\n```js\n    var myApp = angular.module('myApp',[]);\n\n    myApp.controller('MyController', function($scope) {\n      $scope.spices = [{\"name\":\"pasilla\", \"spiciness\":\"mild\"},\n                       {\"name\":\"jalapeno\", \"spiciness\":\"hot hot hot!\"},\n                       {\"name\":\"habanero\", \"spiciness\":\"LAVA HOT!!\"}];\n      $scope.spice = \"habanero\";\n    });\n```\n\n**Controller Test:**\n```js\ndescribe('myController function', function() {\n\n  describe('myController', function() {\n    var $scope;\n\n    beforeEach(module('myApp'));\n\n    beforeEach(inject(function($rootScope, $controller) {\n      $scope = $rootScope.$new();\n      $controller('MyController', {$scope: $scope});\n    }));\n\n    it('should create \"spices\" model with 3 spices', function() {\n      expect($scope.spices.length).toBe(3);\n    });\n\n    it('should set the default value of spice', function() {\n      expect($scope.spice).toBe('habanero');\n    });\n  });\n});\n```\n\n\nIf you need to test a nested Controller you need to create the same scope hierarchy\nin your test that exists in the DOM:\n\n```js\ndescribe('state', function() {\n    var mainScope, childScope, grandChildScope;\n\n    beforeEach(module('myApp'));\n\n    beforeEach(inject(function($rootScope, $controller) {\n        mainScope = $rootScope.$new();\n        $controller('MainController', {$scope: mainScope});\n        childScope = mainScope.$new();\n        $controller('ChildController', {$scope: childScope});\n        grandChildScope = childScope.$new();\n        $controller('GrandChildController', {$scope: grandChildScope});\n    }));\n\n    it('should have over and selected', function() {\n        expect(mainScope.timeOfDay).toBe('morning');\n        expect(mainScope.name).toBe('Nikki');\n        expect(childScope.timeOfDay).toBe('morning');\n        expect(childScope.name).toBe('Mattie');\n        expect(grandChildScope.timeOfDay).toBe('evening');\n        expect(grandChildScope.name).toBe('Gingerbread Baby');\n    });\n});\n```\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/controller.ngdoc",
        "id": "Controllers",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Controllers undefined.overview:Controllers downloaded/angular/angular.js-master/docs/content/guide/controller.ngdoc",
        "sortOn": "Controllers",
        "module": "Controllers",
        "left": 12,
        "level": 1,
        "root": "Developer Guide",
        "right": 13
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Working With CSS",
        "sortOrder": "510",
        "description": "\n\n\nAngular sets these CSS classes. It is up to your application to provide useful styling.\n\n# CSS classes used by angular\n\n* `ng-scope`\n  - **Usage:** angular applies this class to any element for which a new {@link $rootScope scope}\n    is defined. (see {@link guide/scope scope} guide for more information about scopes)\n\n* `ng-isolate-scope`\n  - **Usage:** angular applies this class to any element for which a new\n    {@link guide/directive#isolating-the-scope-of-a-directive isolate scope} is defined.\n\n* `ng-binding`\n  - **Usage:** angular applies this class to any element that is attached to a data binding, via `ng-bind` or\n    `{{}}` curly braces, for example. (see {@link guide/databinding databinding} guide)\n\n* `ng-invalid`, `ng-valid`\n  - **Usage:** angular applies this class to a form control widget element if that element's input does\n    not pass validation. (see {@link ng.directive:input input} directive)\n\n* `ng-pristine`, `ng-dirty`\n  - **Usage:** angular {@link ng.directive:ngModel ngModel} directive applies `ng-pristine` class\n    to a new form control widget which did not have user interaction. Once the user interacts with\n    the form control, the class is changed to `ng-dirty`.\n\n* `ng-touched`, `ng-untouched`\n  - **Usage:** angular {@link ng.directive:ngModel ngModel} directive applies `ng-untouched` class\n    to a new form control widget which has not been blurred. Once the user blurs the form control,\n    the class is changed to `ng-touched`.\n\n\n## Related Topics\n\n* {@link guide/templates Angular Templates}\n* {@link guide/forms Angular Forms}\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/css-styling.ngdoc",
        "id": "Working With CSS",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Working With CSS undefined.overview:Working With CSS downloaded/angular/angular.js-master/docs/content/guide/css-styling.ngdoc",
        "sortOn": "Working With CSS",
        "module": "Working With CSS",
        "left": 14,
        "level": 1,
        "root": "Developer Guide",
        "right": 15
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Data Binding",
        "sortOrder": "210",
        "description": "\n\n# Data Binding\n\nData-binding in Angular apps is the automatic synchronization of data between the model and view\ncomponents.  The way that Angular implements data-binding lets you treat the model as the\nsingle-source-of-truth in your application.  The view is a projection of the model at all times.\nWhen the model changes, the view reflects the change, and vice versa.\n\n## Data Binding in Classical Template Systems\n\n<img class=\"right\" src=\"img/One_Way_Data_Binding.png\"/><br />\nMost templating systems bind data in only one direction: they merge template and model components\ntogether into a view. After the merge occurs, changes to the model\nor related sections of the view are NOT automatically reflected in the view. Worse, any changes\nthat the user makes to the view are not reflected in the model. This means that the developer has\nto write code that constantly syncs the view with the model and the model with the view.\n\n## Data Binding in Angular Templates\n\n<img class=\"right\" src=\"img/Two_Way_Data_Binding.png\"/><br />\nAngular templates work differently. First the template (which is the uncompiled HTML along with\nany additional markup or directives) is compiled on the browser. The compilation step produces a\nlive view. Any changes to the view are immediately reflected in the model, and any changes in\nthe model are propagated to the view. The model is the single-source-of-truth for the application\nstate, greatly simplifying the programming model for the developer. You can think of\nthe view as simply an instant projection of your model.\n\nBecause the view is just a projection of the model, the controller is completely separated from the\nview and unaware of it. This makes testing a snap because it is easy to test your controller in\nisolation without the view and the related DOM/browser dependency.\n\n\n## Related Topics\n\n* {@link scope Angular Scopes}\n* {@link templates Angular Templates}\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/databinding.ngdoc",
        "id": "Data Binding",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Data Binding undefined.overview:Data Binding downloaded/angular/angular.js-master/docs/content/guide/databinding.ngdoc",
        "sortOn": "Data Binding",
        "module": "Data Binding",
        "left": 16,
        "level": 1,
        "root": "Developer Guide",
        "right": 17
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Dependency Injection",
        "sortOrder": "250",
        "description": "\n\n# Dependency Injection\n\nDependency Injection (DI) is a software design pattern that deals with how components get hold of\ntheir dependencies.\n\nThe Angular injector subsystem is in charge of creating components, resolving their dependencies,\nand providing them to other components as requested.\n\n\n## Using Dependency Injection\n\nDI is pervasive throughout Angular. You can use it when defining components or when providing `run`\nand `config` blocks for a module.\n\n- Components such as services, directives, filters, and animations are defined by an injectable\nfactory method or constructor function. These components can be injected with \"service\" and \"value\"\ncomponents as dependencies.\n\n- Controllers are defined by a constructor function, which can be injected with any of the \"service\"\nand \"value\" components as dependencies, but they can also be provided with special dependencies. See\n{@link di#controllers Controllers} below for a list of these special dependencies.\n\n- The `run` method accepts a function, which can be injected with \"service\", \"value\" and \"constant\"\ncomponents as dependencies. Note that you cannot inject \"providers\" into `run` blocks.\n\n- The `config` method accepts a function, which can be injected with \"provider\" and \"constant\"\ncomponents as dependencies. Note that you cannot inject \"service\" or \"value\" components into\nconfiguration.\n\nSee {@link module#module-loading-dependencies Modules} for more details about `run` and `config`\nblocks.\n\n\n### Factory Methods\n\nThe way you define a directive, service, or filter is with a factory function.\nThe factory methods are registered with modules. The recommended way of declaring factories is:\n\n```js\nangular.module('myModule', [])\n  .factory('serviceId', ['depService', function(depService) {\n    // ...\n  }])\n  .directive('directiveName', ['depService', function(depService) {\n    // ...\n  }])\n  .filter('filterName', ['depService', function(depService) {\n    // ...\n  }]);\n```\n\n### Module Methods\n\nWe can specify functions to run at configuration and run time for a module by calling the `config`\nand `run` methods. These functions are injectable with dependencies just like the factory functions\nabove.\n\n```js\nangular.module('myModule', [])\n  .config(['depProvider', function(depProvider) {\n    // ...\n  }])\n  .run(['depService', function(depService) {\n    // ...\n  }]);\n```\n\n### Controllers\n\nControllers are \"classes\" or \"constructor functions\" that are responsible for providing the\napplication behavior that supports the declarative markup in the template. The recommended way of\ndeclaring Controllers is using the array notation:\n\n```js\nsomeModule.controller('MyController', ['$scope', 'dep1', 'dep2', function($scope, dep1, dep2) {\n  ...\n  $scope.aMethod = function() {\n    ...\n  }\n  ...\n}]);\n```\n\nUnlike services, there can be many instances of the same type of controller in an application.\n\nMoreover, additional dependencies are made available to Controllers:\n\n* {@link scope `$scope`}: Controllers are associated with an element in the DOM and so are\n  provided with access to the {@link scope scope}. Other components (like services) only have\n  access to the {@link $rootScope `$rootScope`} service.\n* {@link ngRoute.$routeProvider#when resolves}: If a controller is instantiated as part of a route,\n  then any values that are resolved as part of the route are made available for injection into the\n  controller.\n\n\n## Dependency Annotation\n\nAngular invokes certain functions (like service factories and controllers) via the injector.\nYou need to annotate these functions so that the injector knows what services to inject into\nthe function. There are three ways of annotating your code with service name information:\n\n- Using the inline array annotation (preferred)\n- Using the `$inject` property annotation\n- Implicitly from the function parameter names (has caveats)\n\n### Inline Array Annotation\n\nThis is the preferred way to annotate application components. This is how the examples in the\ndocumentation are written.\n\nFor example:\n\n```js\nsomeModule.controller('MyController', ['$scope', 'greeter', function($scope, greeter) {\n  // ...\n}]);\n```\n\nHere we pass an array whose elements consist of a list of strings (the names of the dependencies)\nfollowed by the function itself.\n\nWhen using this type of annotation, take care to keep the annotation array in sync with the\nparameters in the function declaration.\n\n### `$inject` Property Annotation\n\nTo allow the minifiers to rename the function parameters and still be able to inject the right services,\nthe function needs to be annotated with the `$inject` property. The `$inject` property is an array\nof service names to inject.\n\n```js\nvar MyController = function($scope, greeter) {\n  // ...\n}\nMyController.$inject = ['$scope', 'greeter'];\nsomeModule.controller('MyController', MyController);\n```\n\nIn this scenario the ordering of the values in the `$inject` array must match the ordering of the\nparameters in `MyController`.\n\nJust like with the array annotation, you'll need to take care to keep the `$inject` in sync with\nthe parameters in the function declaration.\n\n### Implicit Annotation\n\n<div class=\"alert alert-danger\">\n**Careful:** If you plan to [minify](http://en.wikipedia.org/wiki/Minification_(programming&#41;)\nyour code, your service names will get renamed and break your app.\n</div>\n\nThe simplest way to get hold of the dependencies is to assume that the function parameter names\nare the names of the dependencies.\n\n```js\nsomeModule.controller('MyController', function($scope, greeter) {\n  // ...\n});\n```\n\nGiven a function the injector can infer the names of the services to inject by examining the\nfunction declaration and extracting the parameter names. In the above example `$scope`, and\n`greeter` are two services which need to be injected into the function.\n\nOne advantage of this approach is that there's no array of names to keep in sync with the\nfunction parameters. You can also freely reorder dependencies.\n\nHowever this method will not work with JavaScript minifiers/obfuscators because of how they\nrename parameters.\n\nTools like [ng-annotate](https://github.com/olov/ng-annotate) let you use implicit dependency\nannotations in your app and automatically add inline array annotations prior to minifying.\nIf you decide to take this approach, you probably want to use `ng-strict-di`.\n\nBecause of these caveats, we recommend avoiding this style of annotation.\n\n\n## Using Strict Dependency Injection\n\nYou can add an `ng-strict-di` directive on the same element as `ng-app` to opt into strict DI mode:\n\n```html\n<!doctype html>\n<html ng-app=\"myApp\" ng-strict-di>\n<body>\n  I can add: {{ 1 + 2 }}.\n  <script src=\"angular.js\"></script>\n</body>\n</html>\n```\n\nStrict mode throws an error whenever a service tries to use implicit annotations.\n\nConsider this module, which includes a `willBreak` service that uses implicit DI:\n\n```js\nangular.module('myApp', [])\n  .factory('willBreak', function($rootScope) {\n    // $rootScope is implicitly injected\n  })\n  .run(['willBreak', function(willBreak) {\n    // Angular will throw when this runs\n  }]);\n```\n\nWhen the `willBreak` service is instantiated, Angular will throw an error because of strict mode.\nThis is useful when using a tool like [ng-annotate](https://github.com/olov/ng-annotate) to\nensure that all of your application components have annotations.\n\nIf you're using manual bootstrapping, you can also use strict DI by providing `strictDi: true` in\nthe optional config argument:\n\n```js\nangular.bootstrap(document, ['myApp'], {\n  strictDi: true\n});\n```\n\n\n\n## Why Dependency Injection?\n\nThis section motivates and explains Angular's use of DI. For how to use DI, see above.\n\nFor in-depth discussion about DI, see\n[Dependency Injection](http://en.wikipedia.org/wiki/Dependency_injection) at Wikipedia,\n[Inversion of Control](http://martinfowler.com/articles/injection.html) by Martin Fowler,\nor read about DI in your favorite software design pattern book.\n\nThere are only three ways a component (object or function) can get a hold of its dependencies:\n\n  1. The component can create the dependency, typically using the `new` operator.\n  2. The component can look up the dependency, by referring to a global variable.\n  3. The component can have the dependency passed to it where it is needed.\n\nThe first two options of creating or looking up dependencies are not optimal because they hard\ncode the dependency to the component. This makes it difficult, if not impossible, to modify the\ndependencies. This is especially problematic in tests, where it is often desirable to provide mock\ndependencies for test isolation.\n\nThe third option is the most viable, since it removes the responsibility of locating the\ndependency from the component. The dependency is simply handed to the component.\n\n```js\nfunction SomeClass(greeter) {\n  this.greeter = greeter;\n}\n\nSomeClass.prototype.doSomething = function(name) {\n  this.greeter.greet(name);\n}\n```\n\nIn the above example `SomeClass` is not concerned with creating or locating the `greeter`\ndependency, it is simply handed the `greeter` when it is instantiated.\n\nThis is desirable, but it puts the responsibility of getting hold of the dependency on the\ncode that constructs `SomeClass`.\n\n<img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-module-injector.png\">\n\nTo manage the responsibility of dependency creation, each Angular application has an {@link\nangular.injector injector}. The injector is a\n[service locator](http://en.wikipedia.org/wiki/Service_locator_pattern) that is responsible for\nconstruction and lookup of dependencies.\n\nHere is an example of using the injector service:\n\n```js\n// Provide the wiring information in a module\nvar myModule = angular.module('myModule', []);\n```\n\nTeach the injector how to build a `greeter` service. Notice that `greeter` is dependent on the\n`$window` service. The `greeter` service is an object that contains a `greet` method.\n\n```js\nmyModule.factory('greeter', function($window) {\n  return {\n    greet: function(text) {\n      $window.alert(text);\n    }\n  };\n});\n```\n\nCreate a new injector that can provide components defined in our `myModule` module and request our\n`greeter` service from the injector. (This is usually done automatically by angular bootstrap).\n\n```js\nvar injector = angular.injector(['myModule', 'ng']);\nvar greeter = injector.get('greeter');\n```\n\nAsking for dependencies solves the issue of hard coding, but it also means that the injector needs\nto be passed throughout the application. Passing the injector breaks the\n[Law of Demeter](http://en.wikipedia.org/wiki/Law_of_Demeter). To remedy this, we use a declarative\nnotation in our HTML templates, to hand the responsibility of creating components over to the\ninjector, as in this example:\n\n```html\n<div ng-controller=\"MyController\">\n  <button ng-click=\"sayHello()\">Hello</button>\n</div>\n```\n\n```js\nfunction MyController($scope, greeter) {\n  $scope.sayHello = function() {\n    greeter.greet('Hello World');\n  };\n}\n```\n\nWhen Angular compiles the HTML, it processes the `ng-controller` directive, which in turn\nasks the injector to create an instance of the controller and its dependencies.\n\n```js\ninjector.instantiate(MyController);\n```\n\nThis is all done behind the scenes. Notice that by having the `ng-controller` ask the injector to\ninstantiate the class, it can satisfy all of the dependencies of `MyController` without the\ncontroller ever knowing about the injector.\n\nThis is the best outcome. The application code simply declares the dependencies it needs, without\nhaving to deal with the injector. This setup does not break the Law of Demeter.\n\n<div class=\"alert alert-info\">\n**Note:** Angular uses\n[**constructor injection**](http://misko.hevery.com/2009/02/19/constructor-injection-vs-setter-injection/).\n</div>\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/di.ngdoc",
        "id": "Dependency Injection",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Dependency Injection undefined.overview:Dependency Injection downloaded/angular/angular.js-master/docs/content/guide/di.ngdoc",
        "sortOn": "Dependency Injection",
        "module": "Dependency Injection",
        "left": 18,
        "level": 1,
        "root": "Developer Guide",
        "right": 19
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Directives",
        "sortOrder": "300",
        "description": "\n\n# Creating Custom Directives\n\n<div class=\"alert alert-warning\">\n**Note:** this guide is targeted towards developers who are already familiar with AngularJS basics.\nIf you're just getting started, we recommend the {@link tutorial/ tutorial} first.\nIf you're looking for the **directives API**, we recently moved it to {@link ng.$compile `$compile`}.\n</div>\n\n\nThis document explains when you'd want to create your own directives in your AngularJS app, and\nhow to implement them.\n\n\n## What are Directives?\n\nAt a high level, directives are markers on a DOM element (such as an attribute, element\nname, comment or CSS class) that tell AngularJS's **HTML compiler** ({@link ng.$compile `$compile`}) to\nattach a specified behavior to that DOM element or even transform the DOM element and its children.\n\nAngular comes with a set of these directives built-in, like `ngBind`, `ngModel`, and `ngClass`.\nMuch like you create controllers and services, you can create your own directives for Angular to use.\nWhen Angular {@link guide/bootstrap bootstraps} your application, the\n{@link guide/compiler HTML compiler} traverses the DOM matching directives against the DOM elements.\n\n<div class=\"alert alert-info\">\n**What does it mean to \"compile\" an HTML template?**\n\nFor AngularJS, \"compilation\" means attaching event listeners to the HTML to make it interactive.\nThe reason we use the term \"compile\" is that the recursive process of attaching directives\nmirrors the process of compiling source code in\n[compiled programming languages](http://en.wikipedia.org/wiki/Compiled_languages).\n</div>\n\n\n## Matching Directives\n\nBefore we can write a directive, we need to know how Angular's {@link guide/compiler HTML compiler}\ndetermines when to use a given directive.\n\nIn the following example, we say that the `<input>` element **matches** the `ngModel` directive.\n\n```html\n<input ng-model=\"foo\">\n```\n\nThe following also **matches** `ngModel`:\n\n```html\n<input data-ng:model=\"foo\">\n```\n\n### Normalization\n\nAngular **normalizes** an element's tag and attribute name to determine which elements match which\ndirectives. We typically refer to directives by their case-sensitive\n[camelCase](http://en.wikipedia.org/wiki/CamelCase) **normalized** name (e.g. `ngModel`).\nHowever, since HTML is case-insensitive, we refer to directives in the DOM by lower-case\nforms, typically using [dash-delimited](http://en.wikipedia.org/wiki/Letter_case#Computers)\nattributes on DOM elements (e.g. `ng-model`).\n\nThe **normalization** process is as follows:\n\n1. Strip `x-` and `data-` from the front of the element/attributes.\n2. Convert the `:`, `-`, or `_`-delimited name to `camelCase`.\n\nFor example, the following forms are all equivalent and match the {@link ngBind} directive:\n\n<example module=\"docsBindExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      Hello <input ng-model='name'> <hr/>\n      <span ng-bind=\"name\"></span> <br/>\n      <span ng:bind=\"name\"></span> <br/>\n      <span ng_bind=\"name\"></span> <br/>\n      <span data-ng-bind=\"name\"></span> <br/>\n      <span x-ng-bind=\"name\"></span> <br/>\n    </div>\n  </file>\n  <file name=\"script.js\">\n    angular.module('docsBindExample', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.name = 'Max Karl Ernst Ludwig Planck (April 23, 1858 – October 4, 1947)';\n      }]);\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should show off bindings', function() {\n      expect(element(by.css('div[ng-controller=\"Controller\"] span[ng-bind]')).getText())\n          .toBe('Max Karl Ernst Ludwig Planck (April 23, 1858 – October 4, 1947)');\n    });\n  </file>\n</example>\n\n<div class=\"alert alert-success\">\n**Best Practice:** Prefer using the dash-delimited format (e.g. `ng-bind` for `ngBind`).\nIf you want to use an HTML validating tool, you can instead use the `data`-prefixed version (e.g.\n`data-ng-bind` for `ngBind`).\nThe other forms shown above are accepted for legacy reasons but we advise you to avoid them.\n</div>\n\n### Directive types\n\n`$compile` can match directives based on element names, attributes, class names, as well as comments.\n\nAll of the Angular-provided directives match attribute name, tag name, comments, or class name.\nThe following demonstrates the various ways a directive (`myDir` in this case) can be referenced\nfrom within a template:\n\n```html\n<my-dir></my-dir>\n<span my-dir=\"exp\"></span>\n<!-- directive: my-dir exp -->\n<span class=\"my-dir: exp;\"></span>\n```\n\n<div class=\"alert alert-success\">\n**Best Practice:** Prefer using directives via tag name and attributes over comment and class names.\nDoing so generally makes it easier to determine what directives a given element matches.\n</div>\n\n<div class=\"alert alert-success\">\n**Best Practice:** Comment directives were commonly used in places where the DOM API limits the\nability to create directives that spanned multiple elements (e.g. inside `<table>` elements).\nAngularJS 1.2 introduces {@link ng.directive:ngRepeat `ng-repeat-start` and `ng-repeat-end`}\nas a better solution to this problem. Developers are encouraged to use this over custom comment\ndirectives when possible.\n</div>\n\n\n\n### Text and attribute bindings\n\nDuring the compilation process the {@link ng.$compile compiler} matches text and attributes\nusing the {@link ng.$interpolate $interpolate} service to see if they contain embedded\nexpressions. These expressions are registered as {@link ng.$rootScope.Scope#$watch watches}\nand will update as part of normal {@link ng.$rootScope.Scope#$digest digest} cycle. An\nexample of interpolation is shown below:\n\n```html\n<a ng-href=\"img/{{username}}.jpg\">Hello {{username}}!</a>\n```\n\n\n### `ngAttr` attribute bindings\n\nWeb browsers are sometimes picky about what values they consider valid for attributes.\n\nFor example, considering this template:\n\n```html\n<svg>\n  <circle cx=\"{{cx}}\"></circle>\n</svg>\n```\n\nWe would expect Angular to be able to bind to this, but when we check the console we see\nsomething like `Error: Invalid value for attribute cx=\"{{cx}}\"`. Because of the SVG DOM API's\nrestrictions, you cannot simply write `cx=\"{{cx}}\"`.\n\nWith `ng-attr-cx` you can work around this problem.\n\nIf an attribute with a binding is prefixed with the `ngAttr` prefix (denormalized as `ng-attr-`)\nthen during the binding it will be applied to the corresponding unprefixed attribute. This allows\nyou to bind to attributes that would otherwise be eagerly processed by browsers\n(e.g. an SVG element's `circle[cx]` attributes). When using `ngAttr`, the `allOrNothing` flag of\n{@link ng.$interpolate $interpolate} is used, so if any expression in the interpolated string\nresults in `undefined`, the attribute is removed and not added to the element.\n\nFor example, we could fix the example above by instead writing:\n\n```html\n<svg>\n  <circle ng-attr-cx=\"{{cx}}\"></circle>\n</svg>\n```\n\nIf one wants to modify a camelcased attribute (SVG elements have valid camelcased attributes), such as `viewBox` on the `svg` element, one can use underscores to denote that the attribute to bind to is naturally camelcased.\n\nFor example, to bind to `viewBox`, we can write:\n\n```html\n<svg ng-attr-view_box=\"{{viewBox}}\">\n</svg>\n```\n\n\n## Creating Directives\n\nFirst let's talk about the {@link ng.$compileProvider#directive API for registering directives}. Much like\ncontrollers, directives are registered on modules. To register a directive, you use the\n`module.directive` API. `module.directive` takes the\n{@link guide/directive#matching-directives normalized} directive name\nfollowed by a **factory function.** This factory function should return an object with the different\noptions to tell `$compile` how the directive should behave when matched.\n\n\nThe factory function is invoked only once when the\n{@link ng.$compile compiler} matches the directive for the first time. You can perform any\ninitialization work here. The function is invoked using\n{@link auto.$injector#invoke $injector.invoke} which makes it injectable just like a\ncontroller.\n\n<div class=\"alert alert-success\">\n**Best Practice:** Prefer using the definition object over returning a function.\n</div>\n\n\nWe'll go over a few common examples of directives, then dive deep into the different options\nand compilation process.\n\n<div class=\"alert alert-success\">\n**Best Practice:** In order to avoid collisions with some future standard, it's best to prefix your own\ndirective names. For instance, if you created a `<carousel>` directive, it would be problematic if HTML7\nintroduced the same element. A two or three letter prefix (e.g. `btfCarousel`) works well. Similarly, do\nnot prefix your own directives with `ng` or they might conflict with directives included in a future\nversion of Angular.\n</div>\n\nFor the following examples, we'll use the prefix `my` (e.g. `myCustomer`).\n\n\n### Template-expanding directive\n\nLet's say you have a chunk of your template that represents a customer's information. This template\nis repeated many times in your code. When you change it in one place, you have to change it in\nseveral others. This is a good opportunity to use a directive to simplify your template.\n\nLet's create a directive that simply replaces its contents with a static template:\n\n<example module=\"docsSimpleDirective\">\n  <file name=\"script.js\">\n    angular.module('docsSimpleDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Naomi',\n          address: '1600 Amphitheatre'\n        };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          template: 'Name: {{customer.name}} Address: {{customer.address}}'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <div my-customer></div>\n    </div>\n  </file>\n</example>\n\nNotice that we have bindings in this directive. After `$compile` compiles and links\n`<div my-customer></div>`, it will try to match directives on the element's children. This means you\ncan compose directives of other directives. We'll see how to do that in\n{@link guide/directive#creating-directives-that-communicate an example}\nbelow.\n\nIn the example above we in-lined the value of the `template` option, but this will become annoying\nas the size of your template grows.\n\n<div class=\"alert alert-success\">\n**Best Practice:** Unless your template is very small, it's typically better to break it apart into\nits own HTML file and load it with the `templateUrl` option.\n</div>\n\nIf you are familiar with `ngInclude`, `templateUrl` works just like it. Here's the same example\nusing `templateUrl` instead:\n\n<example module=\"docsTemplateUrlDirective\">\n  <file name=\"script.js\">\n    angular.module('docsTemplateUrlDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Naomi',\n          address: '1600 Amphitheatre'\n        };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          templateUrl: 'my-customer.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <div my-customer></div>\n    </div>\n  </file>\n  <file name=\"my-customer.html\">\n    Name: {{customer.name}} Address: {{customer.address}}\n  </file>\n</example>\n\n`templateUrl` can also be a function which returns the URL of an HTML template to be loaded and\nused for the directive. Angular will call the `templateUrl` function with two parameters: the\nelement that the directive was called on, and an `attr` object associated with that element.\n\n<div class=\"alert alert-warning\">\n**Note:** You do not currently have the ability to access scope variables from the `templateUrl`\nfunction, since the template is requested before the scope is initialized.\n</div>\n\n<example module=\"docsTemplateUrlDirective\">\n  <file name=\"script.js\">\n    angular.module('docsTemplateUrlDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Naomi',\n          address: '1600 Amphitheatre'\n        };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          templateUrl: function(elem, attr){\n            return 'customer-'+attr.type+'.html';\n          }\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <div my-customer type=\"name\"></div>\n      <div my-customer type=\"address\"></div>\n    </div>\n  </file>\n  <file name=\"customer-name.html\">\n    Name: {{customer.name}}\n  </file>\n  <file name=\"customer-address.html\">\n    Address: {{customer.address}}\n  </file>\n</example>\n\n<div class=\"alert alert-warning\">\n**Note:** When you create a directive, it is restricted to attribute and elements only by default. In order to\ncreate directives that are triggered by class name, you need to use the `restrict` option.\n</div>\n\nThe `restrict` option is typically set to:\n\n* `'A'` - only matches attribute name\n* `'E'` - only matches element name\n* `'C'` - only matches class name\n\nThese restrictions can all be combined as needed:\n\n* `'AEC'` - matches either attribute or element or class name\n\nLet's change our directive to use `restrict: 'E'`:\n\n<example module=\"docsRestrictDirective\">\n  <file name=\"script.js\">\n    angular.module('docsRestrictDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Naomi',\n          address: '1600 Amphitheatre'\n        };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          restrict: 'E',\n          templateUrl: 'my-customer.html'\n        };\n      });\n  </file>\n\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <my-customer></my-customer>\n    </div>\n  </file>\n\n  <file name=\"my-customer.html\">\n    Name: {{customer.name}} Address: {{customer.address}}\n  </file>\n</example>\n\nFor more on the\n{@link ng.$compile#directive-definition-object `restrict`}\nproperty, see the\n{@link ng.$compile#directive-definition-object API docs}.\n\n<div class=\"alert alert-info\">\n**When should I use an attribute versus an element?**\n\nUse an element when you are creating a component that is in control of the template. The common case\nfor this is when you are creating a Domain-Specific Language for parts of your template.\n\nUse an attribute when you are decorating an existing element with new functionality.\n</div>\n\nUsing an element for the `myCustomer` directive is clearly the right choice because you're not\ndecorating an element with some \"customer\" behavior; you're defining the core behavior of the\nelement as a customer component.\n\n\n\n### Isolating the Scope of a Directive\n\nOur `myCustomer` directive above is great, but it has a fatal flaw. We can only use it once within a\ngiven scope.\n\nIn its current implementation, we'd need to create a different controller each time in order to\nre-use such a directive:\n\n<example module=\"docsScopeProblemExample\">\n  <file name=\"script.js\">\n    angular.module('docsScopeProblemExample', [])\n      .controller('NaomiController', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Naomi',\n          address: '1600 Amphitheatre'\n        };\n      }])\n      .controller('IgorController', ['$scope', function($scope) {\n        $scope.customer = {\n          name: 'Igor',\n          address: '123 Somewhere'\n        };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          restrict: 'E',\n          templateUrl: 'my-customer.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"NaomiController\">\n      <my-customer></my-customer>\n    </div>\n    <hr>\n    <div ng-controller=\"IgorController\">\n      <my-customer></my-customer>\n    </div>\n  </file>\n  <file name=\"my-customer.html\">\n    Name: {{customer.name}} Address: {{customer.address}}\n  </file>\n</example>\n\nThis is clearly not a great solution.\n\nWhat we want to be able to do is separate the scope inside a directive from the scope\noutside, and then map the outer scope to a directive's inner scope. We can do this by creating what\nwe call an **isolate scope**. To do this, we can use a directive's `scope` option:\n\n<example module=\"docsIsolateScopeDirective\">\n  <file name=\"script.js\">\n    angular.module('docsIsolateScopeDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };\n        $scope.igor = { name: 'Igor', address: '123 Somewhere' };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          restrict: 'E',\n          scope: {\n            customerInfo: '=info'\n          },\n          templateUrl: 'my-customer-iso.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <my-customer info=\"naomi\"></my-customer>\n      <hr>\n      <my-customer info=\"igor\"></my-customer>\n    </div>\n  </file>\n  <file name=\"my-customer-iso.html\">\n    Name: {{customerInfo.name}} Address: {{customerInfo.address}}\n  </file>\n</example>\n\nLooking at `index.html`, the first `<my-customer>` element binds the `info` attribute to `naomi`,\nwhich we have exposed on our controller's scope. The second binds `info` to `igor`.\n\nLet's take a closer look at the scope option:\n\n```javascript\n//...\nscope: {\n  customerInfo: '=info'\n},\n//...\n```\n\nThe **scope option** is an object that contains a property for each isolate scope binding.  In this\ncase it has just one property:\n\n- Its name (`customerInfo`) corresponds to the\ndirective's **isolate scope** property `customerInfo`.\n- Its value (`=info`) tells `$compile` to bind to the `info` attribute.\n\n<div class=\"alert alert-warning\">\n**Note:** These `=attr` attributes in the `scope` option of directives are normalized just like\ndirective names. To bind to the attribute in `<div bind-to-this=\"thing\">`, you'd specify a binding\nof `=bindToThis`.\n</div>\n\nFor cases where the attribute name is the same as the value you want to bind to inside the\ndirective's scope, you can use this shorthand syntax:\n\n```javascript\n...\nscope: {\n  // same as '=customer'\n  customer: '='\n},\n...\n```\n\nBesides making it possible to bind different data to the scope inside a directive, using an isolated\nscope has another effect.\n\nWe can show this by adding another property, `vojta`, to our scope and trying to access it from\nwithin our directive's template:\n\n<example module=\"docsIsolationExample\">\n  <file name=\"script.js\">\n    angular.module('docsIsolationExample', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.naomi = { name: 'Naomi', address: '1600 Amphitheatre' };\n        $scope.vojta = { name: 'Vojta', address: '3456 Somewhere Else' };\n      }])\n      .directive('myCustomer', function() {\n        return {\n          restrict: 'E',\n          scope: {\n            customerInfo: '=info'\n          },\n          templateUrl: 'my-customer-plus-vojta.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <my-customer info=\"naomi\"></my-customer>\n    </div>\n  </file>\n  <file name=\"my-customer-plus-vojta.html\">\n    Name: {{customerInfo.name}} Address: {{customerInfo.address}}\n    <hr>\n    Name: {{vojta.name}} Address: {{vojta.address}}\n  </file>\n</example>\n\nNotice that `{{vojta.name}}` and `{{vojta.address}}` are empty, meaning they are undefined.\nAlthough we defined `vojta` in the controller, it's not available within the directive.\n\nAs the name suggests, the **isolate scope** of the directive isolates everything except models that\nyou've explicitly added to the `scope: {}` hash object. This is helpful when building reusable\ncomponents because it prevents a component from changing your model state except for the models\nthat you explicitly pass in.\n\n<div class=\"alert alert-warning\">\n**Note:** Normally, a scope prototypically inherits from its parent. An isolated scope does not.\nSee the {@link $compile#directive-definition-object\n\"Directive Definition Object - scope\"} section for more information about isolate scopes.\n</div>\n\n<div class=\"alert alert-success\">\n**Best Practice:** Use the `scope` option to create isolate scopes when making components that you\nwant to reuse throughout your app.\n</div>\n\n\n### Creating a Directive that Manipulates the DOM\n\nIn this example we will build a directive that displays the current time.\nOnce a second, it updates the DOM to reflect the current time.\n\nDirectives that want to modify the DOM typically use the `link` option.\n`link` takes a function with the following signature, `function link(scope, element, attrs) { ... }`\nwhere:\n\n* `scope` is an Angular scope object.\n* `element` is the jqLite-wrapped element that this directive matches.\n* `attrs` is a hash object with key-value pairs of normalized attribute names and their\n  corresponding attribute values.\n\nIn our `link` function, we want to update the displayed time once a second, or whenever a user\nchanges the time formatting string that our directive binds to. We will use the `$interval` service\nto call a handler on a regular basis. This is easier than using `$timeout` but also works better with\nend-to-end testing, where we want to ensure that all `$timeout`s have completed before completing the test.\nWe also want to remove the `$interval` if the directive is deleted so we don't introduce a memory leak.\n\n<example module=\"docsTimeDirective\">\n  <file name=\"script.js\">\n    angular.module('docsTimeDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.format = 'M/d/yy h:mm:ss a';\n      }])\n      .directive('myCurrentTime', ['$interval', 'dateFilter', function($interval, dateFilter) {\n\n        function link(scope, element, attrs) {\n          var format,\n              timeoutId;\n\n          function updateTime() {\n            element.text(dateFilter(new Date(), format));\n          }\n\n          scope.$watch(attrs.myCurrentTime, function(value) {\n            format = value;\n            updateTime();\n          });\n\n          element.on('$destroy', function() {\n            $interval.cancel(timeoutId);\n          });\n\n          // start the UI update process; save the timeoutId for canceling\n          timeoutId = $interval(function() {\n            updateTime(); // update DOM\n          }, 1000);\n        }\n\n        return {\n          link: link\n        };\n      }]);\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      Date format: <input ng-model=\"format\"> <hr/>\n      Current time is: <span my-current-time=\"format\"></span>\n    </div>\n  </file>\n</example>\n\nThere are a couple of things to note here.\nJust like the `module.controller` API, the function argument in `module.directive` is dependency\ninjected. Because of this, we can use `$interval` and `dateFilter` inside our directive's `link`\nfunction.\n\nWe register an event `element.on('$destroy', ...)`. What fires this `$destroy` event?\n\nThere are a few special events that AngularJS emits. When a DOM node that has been compiled\nwith Angular's compiler is destroyed, it emits a `$destroy` event. Similarly, when an AngularJS\nscope is destroyed, it broadcasts a `$destroy` event to listening scopes.\n\nBy listening to this event, you can remove event listeners that might cause memory leaks.\nListeners registered to scopes and elements are automatically cleaned up when they are destroyed,\nbut if you registered a listener on a service, or registered a listener on a DOM node that isn't\nbeing deleted, you'll have to clean it up yourself or you risk introducing a memory leak.\n\n<div class=\"alert alert-success\">\n**Best Practice:** Directives should clean up after themselves. You can use\n`element.on('$destroy', ...)` or `scope.$on('$destroy', ...)` to run a clean-up function when the\ndirective is removed.\n</div>\n\n\n### Creating a Directive that Wraps Other Elements\n\nWe've seen that you can pass in models to a directive using the isolate scope, but sometimes\nit's desirable to be able to pass in an entire template rather than a string or an object.\nLet's say that we want to create a \"dialog box\" component. The dialog box should be able to\nwrap any arbitrary content.\n\nTo do this, we need to use the `transclude` option.\n\n<example module=\"docsTransclusionDirective\">\n  <file name=\"script.js\">\n    angular.module('docsTransclusionDirective', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.name = 'Tobias';\n      }])\n      .directive('myDialog', function() {\n        return {\n          restrict: 'E',\n          transclude: true,\n          templateUrl: 'my-dialog.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <my-dialog>Check out the contents, {{name}}!</my-dialog>\n    </div>\n  </file>\n  <file name=\"my-dialog.html\">\n    <div class=\"alert\" ng-transclude>\n    </div>\n  </file>\n</example>\n\nWhat does this `transclude` option do, exactly? `transclude` makes the contents of a directive with\nthis option have access to the scope **outside** of the directive rather than inside.\n\nTo illustrate this, see the example below. Notice that we've added a `link` function in `script.js`\nthat redefines `name` as `Jeff`. What do you think the `{{name}}` binding will resolve to now?\n\n<example module=\"docsTransclusionExample\">\n  <file name=\"script.js\">\n    angular.module('docsTransclusionExample', [])\n      .controller('Controller', ['$scope', function($scope) {\n        $scope.name = 'Tobias';\n      }])\n      .directive('myDialog', function() {\n        return {\n          restrict: 'E',\n          transclude: true,\n          scope: {},\n          templateUrl: 'my-dialog.html',\n          link: function (scope, element) {\n            scope.name = 'Jeff';\n          }\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      <my-dialog>Check out the contents, {{name}}!</my-dialog>\n    </div>\n  </file>\n  <file name=\"my-dialog.html\">\n    <div class=\"alert\" ng-transclude>\n    </div>\n  </file>\n</example>\n\nOrdinarily, we would expect that `{{name}}` would be `Jeff`. However, we see in this example that\nthe `{{name}}` binding is still `Tobias`.\n\nThe `transclude` option changes the way scopes are nested. It makes it so that the **contents** of a\ntranscluded directive have whatever scope is outside the directive, rather than whatever scope is on\nthe inside. In doing so, it gives the contents access to the outside scope.\n\nNote that if the directive did not create its own scope, then `scope` in `scope.name = 'Jeff';` would\nreference the outside scope and we would see `Jeff` in the output.\n\nThis behavior makes sense for a directive that wraps some content, because otherwise you'd have to\npass in each model you wanted to use separately. If you have to pass in each model that you want to\nuse, then you can't really have arbitrary contents, can you?\n\n<div class=\"alert alert-success\">\n**Best Practice:** only use `transclude: true` when you want to create a directive that wraps\narbitrary content.\n</div>\n\nNext, we want to add buttons to this dialog box, and allow someone using the directive to bind their\nown behavior to it.\n\n<example module=\"docsIsoFnBindExample\">\n  <file name=\"script.js\">\n    angular.module('docsIsoFnBindExample', [])\n      .controller('Controller', ['$scope', '$timeout', function($scope, $timeout) {\n        $scope.name = 'Tobias';\n        $scope.message = '';\n        $scope.hideDialog = function (message) {\n          $scope.message = message;\n          $scope.dialogIsHidden = true;\n          $timeout(function () {\n            $scope.message = '';\n            $scope.dialogIsHidden = false;\n          }, 2000);\n        };\n      }])\n      .directive('myDialog', function() {\n        return {\n          restrict: 'E',\n          transclude: true,\n          scope: {\n            'close': '&onClose'\n          },\n          templateUrl: 'my-dialog-close.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"Controller\">\n      {{message}}\n      <my-dialog ng-hide=\"dialogIsHidden\" on-close=\"hideDialog(message)\">\n        Check out the contents, {{name}}!\n      </my-dialog>\n    </div>\n  </file>\n  <file name=\"my-dialog-close.html\">\n    <div class=\"alert\">\n      <a href class=\"close\" ng-click=\"close({message: 'closing for now'})\">&times;</a>\n      <div ng-transclude></div>\n    </div>\n  </file>\n</example>\n\nWe want to run the function we pass by invoking it from the directive's scope, but have it run\nin the context of the scope where it's registered.\n\nWe saw earlier how to use `=attr` in the `scope` option, but in the above example, we're using\n`&attr` instead.  The `&` binding allows a directive to trigger evaluation of an expression in\nthe context of the original scope, at a specific time.  Any legal expression is allowed, including\nan expression which contains a function call.  Because of this, `&` bindings are ideal for binding\ncallback functions to directive behaviors.\n\nWhen the user clicks the `x` in the dialog, the directive's `close` function is called, thanks to\n`ng-click.`  This call to `close` on the isolated scope actually evaluates the expression\n`hideDialog(message)` in the context of the original scope, thus running `Controller`'s `hideDialog`\nfunction.\n\nOften it's desirable to pass data from the isolate scope via an expression to the\nparent scope, this can be done by passing a map of local variable names and values into the expression\nwrapper fn. For example, the hideDialog function takes a message to display when the dialog is hidden.\nThis is specified in the directive by calling `close({message: 'closing for now'})`. Then the local\nvariable `message` will be available within the `on-close` expression.\n\n<div class=\"alert alert-success\">\n**Best Practice:** use `&attr` in the `scope` option when you want your directive\nto expose an API for binding to behaviors.\n</div>\n\n\n### Creating a Directive that Adds Event Listeners\n\nPreviously, we used the `link` function to create a directive that manipulated its\nDOM elements. Building upon that example, let's make a directive that reacts to events on\nits elements.\n\nFor instance, what if we wanted to create a directive that lets a user drag an\nelement?\n\n<example module=\"dragModule\">\n  <file name=\"script.js\">\n    angular.module('dragModule', [])\n      .directive('myDraggable', ['$document', function($document) {\n        return {\n          link: function(scope, element, attr) {\n            var startX = 0, startY = 0, x = 0, y = 0;\n\n            element.css({\n             position: 'relative',\n             border: '1px solid red',\n             backgroundColor: 'lightgrey',\n             cursor: 'pointer'\n            });\n\n            element.on('mousedown', function(event) {\n              // Prevent default dragging of selected content\n              event.preventDefault();\n              startX = event.pageX - x;\n              startY = event.pageY - y;\n              $document.on('mousemove', mousemove);\n              $document.on('mouseup', mouseup);\n            });\n\n            function mousemove(event) {\n              y = event.pageY - startY;\n              x = event.pageX - startX;\n              element.css({\n                top: y + 'px',\n                left:  x + 'px'\n              });\n            }\n\n            function mouseup() {\n              $document.off('mousemove', mousemove);\n              $document.off('mouseup', mouseup);\n            }\n          }\n        };\n      }]);\n  </file>\n  <file name=\"index.html\">\n    <span my-draggable>Drag ME</span>\n  </file>\n</example>\n\n\n\n### Creating Directives that Communicate\n\nYou can compose any directives by using them within templates.\n\nSometimes, you want a component that's built from a combination of directives.\n\nImagine you want to have a container with tabs in which the contents of the container correspond\nto which tab is active.\n\n<example module=\"docsTabsExample\">\n  <file name=\"script.js\">\n    angular.module('docsTabsExample', [])\n      .directive('myTabs', function() {\n        return {\n          restrict: 'E',\n          transclude: true,\n          scope: {},\n          controller: function($scope) {\n            var panes = $scope.panes = [];\n\n            $scope.select = function(pane) {\n              angular.forEach(panes, function(pane) {\n                pane.selected = false;\n              });\n              pane.selected = true;\n            };\n\n            this.addPane = function(pane) {\n              if (panes.length === 0) {\n                $scope.select(pane);\n              }\n              panes.push(pane);\n            };\n          },\n          templateUrl: 'my-tabs.html'\n        };\n      })\n      .directive('myPane', function() {\n        return {\n          require: '^myTabs',\n          restrict: 'E',\n          transclude: true,\n          scope: {\n            title: '@'\n          },\n          link: function(scope, element, attrs, tabsCtrl) {\n            tabsCtrl.addPane(scope);\n          },\n          templateUrl: 'my-pane.html'\n        };\n      });\n  </file>\n  <file name=\"index.html\">\n    <my-tabs>\n      <my-pane title=\"Hello\">\n        <h4>Hello</h4>\n        <p>Lorem ipsum dolor sit amet</p>\n      </my-pane>\n      <my-pane title=\"World\">\n        <h4>World</h4>\n        <em>Mauris elementum elementum enim at suscipit.</em>\n        <p><a href ng-click=\"i = i + 1\">counter: {{i || 0}}</a></p>\n      </my-pane>\n    </my-tabs>\n  </file>\n  <file name=\"my-tabs.html\">\n    <div class=\"tabbable\">\n      <ul class=\"nav nav-tabs\">\n        <li ng-repeat=\"pane in panes\" ng-class=\"{active:pane.selected}\">\n          <a href=\"\" ng-click=\"select(pane)\">{{pane.title}}</a>\n        </li>\n      </ul>\n      <div class=\"tab-content\" ng-transclude></div>\n    </div>\n  </file>\n  <file name=\"my-pane.html\">\n    <div class=\"tab-pane\" ng-show=\"selected\" ng-transclude>\n    </div>\n  </file>\n</example>\n\nThe `myPane` directive has a `require` option with value `^myTabs`. When a directive uses this\noption, `$compile` will throw an error unless the specified controller is found. The `^` prefix\nmeans that this directive searches for the controller on its parents (without the `^` prefix, the\ndirective would look for the controller on just its own element).\n\nSo where does this `myTabs` controller come from? Directives can specify controllers using\nthe unsurprisingly named `controller` option. As you can see, the `myTabs` directive uses this\noption. Just like `ngController`, this option attaches a controller to the template of the directive.\n\nIf it is necessary to reference the controller or any functions bound to the controller's scope in\nthe template, you can use the option `controllerAs` to specify the name of the controller as an alias.\nThe directive needs to define a scope for this configuration to be used. This is particularly useful\nin the case when the directive is used as a component.\n\nLooking back at `myPane`'s definition, notice the last argument in its `link` function: `tabsCtrl`.\nWhen a directive requires a controller, it receives that controller as the fourth argument of its\n`link` function. Taking advantage of this, `myPane` can call the `addPane` function of `myTabs`.\n\nIf multiple controllers are required, the `require` option of the directive can take an array argument.\nThe corresponding parameter being sent to the `link` function will also be an array.\n\n```js\nangular.module('docsTabsExample', [])\n  .directive('myPane', function() {\n    return {\n      require: ['^myTabs', '^ngModel'],\n      restrict: 'E',\n      transclude: true,\n      scope: {\n        title: '@'\n      },\n      link: function(scope, element, attrs, controllers) {\n        var tabsCtrl = controllers[0],\n            modelCtrl = controllers[1];\n\n        tabsCtrl.addPane(scope);\n      },\n      templateUrl: 'my-pane.html'\n    };\n  });\n```\n\nSavvy readers may be wondering what the difference is between `link` and `controller`.\nThe basic difference is that `controller` can expose an API, and `link` functions can interact with\ncontrollers using `require`.\n\n<div class=\"alert alert-success\">\n**Best Practice:** use `controller` when you want to expose an API to other directives.\nOtherwise use `link`.\n</div>\n\n### Summary\n\nHere we've seen the main use cases for directives. Each of these samples acts as a good starting\npoint for creating your own directives.\n\nYou might also be interested in an in-depth explanation of the compilation process that's\navailable in the {@link guide/compiler compiler guide}.\n\nThe {@link ng.$compile `$compile` API} page has a comprehensive list of directive options for\nreference.\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/directive.ngdoc",
        "id": "Directives",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Directives undefined.overview:Directives downloaded/angular/angular.js-master/docs/content/guide/directive.ngdoc",
        "sortOn": "Directives",
        "module": "Directives",
        "left": 20,
        "level": 1,
        "root": "Developer Guide",
        "right": 21
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "E2E Testing",
        "sortOrder": "420",
        "description": "\n\n# E2E Testing\n\n<div class=\"alert alert-danger\">\n**Note:** In the past, end-to-end testing could be done with a deprecated tool called\n[Angular Scenario Runner](http://code.angularjs.org/1.2.16/docs/guide/e2e-testing). That tool\nis now in maintenance mode.\n</div>\n\nAs applications grow in size and complexity, it becomes unrealistic to rely on manual testing to\nverify the correctness of new features, catch bugs and notice regressions. Unit tests\nare the first line of defense for catching bugs, but sometimes issues come up with integration\nbetween components which can't be captured in a unit test. End-to-end tests are made to find\nthese problems.\n\nWe have built [Protractor](https://github.com/angular/protractor), an end\nto end test runner which simulates user interactions that will help you verify the health of your\nAngular application.\n\n## Using Protractor\n\nProtractor is a [Node.js](http://nodejs.org) program, and runs end-to-end tests that are also\nwritten in JavaScript and run with node. Protractor uses [WebDriver](https://code.google.com/p/selenium/wiki/GettingStarted)\nto control browsers and simulate user actions.\n\nFor more information on Protractor, view [getting started](http://angular.github.io/protractor/#/getting-started)\nor the [api docs](http://angular.github.io/protractor/#/api).\n\nProtractor uses [Jasmine](http://jasmine.github.io/1.3/introduction.html) for its test syntax.\nAs in unit testing, a test file is comprised of one or\nmore `it` blocks that describe the requirements of your application. `it` blocks are made of\n**commands** and **expectations**. Commands tell Protractor to do something with the application\nsuch as navigate to a page or click on a button. Expectations tell Protractor to assert something\nabout the application's state, such as the value of a field or the current URL.\n\nIf any expectation within an `it` block fails, the runner marks the `it` as \"failed\" and continues\non to the next block.\n\nTest files may also have `beforeEach` and `afterEach` blocks, which will be run before or after\neach `it` block regardless of whether the block passes or fails.\n\n<img src=\"img/guide/scenario_runner.png\">\n\nIn addition to the above elements, tests may also contain helper functions to avoid duplicating\ncode in the `it` blocks.\n\nHere is an example of a simple test:\n```js\ndescribe('TODO list', function() {\n  it('should filter results', function() {\n\n    // Find the element with ng-model=\"user\" and type \"jacksparrow\" into it\n    element(by.model('user')).sendKeys('jacksparrow');\n\n    // Find the first (and only) button on the page and click it\n    element(by.css(':button')).click();\n\n    // Verify that there are 10 tasks\n    expect(element.all(by.repeater('task in tasks')).count()).toEqual(10);\n\n    // Enter 'groceries' into the element with ng-model=\"filterText\"\n    element(by.model('filterText')).sendKeys('groceries');\n\n    // Verify that now there is only one item in the task list\n    expect(element.all(by.repeater('task in tasks')).count()).toEqual(1);\n  });\n});\n```\n\nThis test describes the requirements of a ToDo list, specifically, that it should be able to\nfilter the list of items.\n\n## Example\nSee the [angular-seed](https://github.com/angular/angular-seed) project for more examples, or look\nat the embedded examples in the Angular documentation (For example, {@link $http $http}\nhas an end-to-end test in the example under the `protractor.js` tag).\n\n## Caveats\n\nProtractor does not work out-of-the-box with apps that bootstrap manually using\n`angular.bootstrap`. You must use the `ng-app` directive.\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/e2e-testing.ngdoc",
        "id": "E2E Testing",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "E2E Testing undefined.overview:E2E Testing downloaded/angular/angular.js-master/docs/content/guide/e2e-testing.ngdoc",
        "sortOn": "E2E Testing",
        "module": "E2E Testing",
        "left": 22,
        "level": 1,
        "root": "Developer Guide",
        "right": 23
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Expressions",
        "sortOrder": "270",
        "description": "\n\n# Angular Expressions\n\nAngular expressions are JavaScript-like code snippets that are usually placed in bindings such as\n`{{ expression }}`.\n\nFor example, these are valid expressions in Angular:\n\n  * `1+2`\n  * `a+b`\n  * `user.name`\n  * `items[index]`\n\n\n## Angular Expressions vs. JavaScript Expressions\n\nAngular expressions are like JavaScript expressions with the following differences:\n\n  * **Context:** JavaScript expressions are evaluated against the global `window`.\n    In Angular, expressions are evaluated against a {@link ng.$rootScope.Scope `scope`} object.\n\n  * **Forgiving:** In JavaScript, trying to evaluate undefined properties generates `ReferenceError`\n    or `TypeError`. In Angular, expression evaluation is forgiving to `undefined` and `null`.\n\n  * **No Control Flow Statements:** You cannot use the following in an Angular expression:\n    conditionals, loops, or exceptions.\n\t\n  * **No Function Declarations:** You cannot declare functions in an Angular expression,\n    even inside `ng-init` directive.\n\t\n  * **No RegExp Creation With Literal Notation:** You cannot create regular expressions \n    in an Angular expression.\n\t\n  * **No Comma And Void Operators:** You cannot use `,` or `void` in an Angular expression.\n\n  * **Filters:** You can use {@link guide/filter filters} within expressions to format data before\n    displaying it.\n\nIf you want to run more complex JavaScript code, you should make it a controller method and call\nthe method from your view. If you want to `eval()` an Angular expression yourself, use the\n{@link ng.$rootScope.Scope#$eval `$eval()`} method.\n\n## Example\n<example>\n  <file name=\"index.html\">\n    <span>\n      1+2={{1+2}}\n    </span>\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should calculate expression in binding', function() {\n      expect(element(by.binding('1+2')).getText()).toEqual('1+2=3');\n    });\n  </file>\n</example>\n\nYou can try evaluating different expressions here:\n\n<example module=\"expressionExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\" class=\"expressions\">\n      Expression:\n      <input type='text' ng-model=\"expr\" size=\"80\"/>\n      <button ng-click=\"addExp(expr)\">Evaluate</button>\n      <ul>\n       <li ng-repeat=\"expr in exprs track by $index\">\n         [ <a href=\"\" ng-click=\"removeExp($index)\">X</a> ]\n         <tt>{{expr}}</tt> => <span ng-bind=\"$parent.$eval(expr)\"></span>\n        </li>\n      </ul>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('expressionExample', [])\n      .controller('ExampleController', ['$scope', function($scope) {\n        var exprs = $scope.exprs = [];\n        $scope.expr = '3*10|currency';\n        $scope.addExp = function(expr) {\n          exprs.push(expr);\n        };\n\n        $scope.removeExp = function(index) {\n          exprs.splice(index, 1);\n        };\n      }]);\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should allow user expression testing', function() {\n      element(by.css('.expressions button')).click();\n      var lis = element(by.css('.expressions ul')).all(by.repeater('expr in exprs'));\n      expect(lis.count()).toBe(1);\n      expect(lis.get(0).getText()).toEqual('[ X ] 3*10|currency => $30.00');\n    });\n  </file>\n</example>\n\n\n## Context\n\nAngular does not use JavaScript's `eval()` to evaluate expressions. Instead Angular's\n{@link ng.$parse $parse} service processes these expressions.\n\nAngular expressions do not have access to global variables like `window`, `document` or `location`.\nThis restriction is intentional. It prevents accidental access to the global state – a common source of subtle bugs.\n\nInstead use services like `$window` and `$location` in functions called from expressions. Such services\nprovide mockable access to globals.\n\n<example module=\"expressionExample\">\n  <file name=\"index.html\">\n    <div class=\"example2\" ng-controller=\"ExampleController\">\n      Name: <input ng-model=\"name\" type=\"text\"/>\n      <button ng-click=\"greet()\">Greet</button>\n      <button ng-click=\"window.alert('Should not see me')\">Won't greet</button>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('expressionExample', [])\n      .controller('ExampleController', ['$window', '$scope', function($window, $scope) {\n        $scope.name = 'World';\n\n        $scope.greet = function() {\n          $window.alert('Hello ' + $scope.name);\n        };\n      }]);\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should calculate expression in binding', function() {\n      if (browser.params.browser == 'safari') {\n        // Safari can't handle dialogs.\n        return;\n      }\n      element(by.css('[ng-click=\"greet()\"]')).click();\n\n      var alertDialog = browser.switchTo().alert();\n\n      expect(alertDialog.getText()).toEqual('Hello World');\n\n      alertDialog.accept();\n    });\n  </file>\n</example>\n\n## Forgiving\n\nExpression evaluation is forgiving to undefined and null. In JavaScript, evaluating `a.b.c` throws\nan exception if `a` is not an object. While this makes sense for a general purpose language, the\nexpression evaluations are primarily used for data binding, which often look like this:\n\n        {{a.b.c}}\n\nIt makes more sense to show nothing than to throw an exception if `a` is undefined (perhaps we are\nwaiting for the server response, and it will become defined soon). If expression evaluation wasn't\nforgiving we'd have to write bindings that clutter the code, for example: `{{((a||{}).b||{}).c}}`\n\nSimilarly, invoking a function `a.b.c()` on `undefined` or `null` simply returns `undefined`.\n\n\n## No Control Flow Statements\n\nApart from the ternary operator (`a ? b : c`), you cannot write a control flow statement in an\nexpression. The reason behind this is core to the Angular philosophy that application logic should\nbe in controllers, not the views. If you need a real conditional, loop, or to throw from a view\nexpression, delegate to a JavaScript method instead.\n\n## No function declarations or RegExp creation with literal notation\n\nYou can't declare functions or create regular expressions from within AngularJS expressions. This is\nto avoid complex model transformation logic inside templates. Such logic is better placed in a \ncontroller or in a dedicated filter where it can be tested properly.\n\n## `$event`\n\nDirectives like {@link ng.directive:ngClick `ngClick`} and {@link ng.directive:ngFocus `ngFocus`}\nexpose a `$event` object within the scope of that expression. The object is an instance of a [jQuery\nEvent Object](http://api.jquery.com/category/events/event-object/) when jQuery is present or a\nsimilar jqLite object.\n\n<example module=\"eventExampleApp\">\n  <file name=\"index.html\">\n    <div ng-controller=\"EventController\">\n      <button ng-click=\"clickMe($event)\">Event</button>\n      <p><code>$event</code>: <pre> {{$event | json}}</pre></p>\n      <p><code>clickEvent</code>: <pre>{{clickEvent | json}}</pre></p>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('eventExampleApp', []).\n      controller('EventController', ['$scope', function($scope) {\n        /*\n         * expose the event object to the scope\n         */\n        $scope.clickMe = function(clickEvent) {\n          $scope.clickEvent = simpleKeys(clickEvent);\n          console.log(clickEvent);\n        };\n\n        /*\n         * return a copy of an object with only non-object keys\n         * we need this to avoid circular references\n         */\n        function simpleKeys (original) {\n          return Object.keys(original).reduce(function (obj, key) {\n            obj[key] = typeof original[key] === 'object' ? '{ ... }' : original[key];\n            return obj;\n          }, {});\n        }\n      }]);\n  </file>\n</example>\n\nNote in the example above how we can pass in `$event` to `clickMe`, but how it does not show up\nin `{{$event}}`. This is because `$event` is outside the scope of that binding.\n\n\n## One-time binding\n\nAn expression that starts with `::` is considered a one-time expression. One-time expressions\nwill stop recalculating once they are stable, which happens after the first digest if the expression\nresult is a non-undefined value (see value stabilization algorithm below).\n\n<example module=\"oneTimeBidingExampleApp\">\n  <file name=\"index.html\">\n    <div ng-controller=\"EventController\">\n      <button ng-click=\"clickMe($event)\">Click Me</button>\n      <p id=\"one-time-binding-example\">One time binding: {{::name}}</p>\n      <p id=\"normal-binding-example\">Normal binding: {{name}}</p>\n    </div>\n  </file>\n  <file name=\"script.js\">\n    angular.module('oneTimeBidingExampleApp', []).\n      controller('EventController', ['$scope', function($scope) {\n        var counter = 0;\n        var names = ['Igor', 'Misko', 'Chirayu', 'Lucas'];\n        /*\n         * expose the event object to the scope\n         */\n        $scope.clickMe = function(clickEvent) {\n          $scope.name = names[counter % names.length];\n          counter++;\n        };\n      }]);\n  </file>\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should freeze binding after its value has stabilized', function() {\n      var oneTimeBiding = element(by.id('one-time-binding-example'));\n      var normalBinding = element(by.id('normal-binding-example'));\n\n      expect(oneTimeBiding.getText()).toEqual('One time binding:');\n      expect(normalBinding.getText()).toEqual('Normal binding:');\n      element(by.buttonText('Click Me')).click();\n\n      expect(oneTimeBiding.getText()).toEqual('One time binding: Igor');\n      expect(normalBinding.getText()).toEqual('Normal binding: Igor');\n      element(by.buttonText('Click Me')).click();\n\n      expect(oneTimeBiding.getText()).toEqual('One time binding: Igor');\n      expect(normalBinding.getText()).toEqual('Normal binding: Misko');\n\n      element(by.buttonText('Click Me')).click();\n      element(by.buttonText('Click Me')).click();\n\n      expect(oneTimeBiding.getText()).toEqual('One time binding: Igor');\n      expect(normalBinding.getText()).toEqual('Normal binding: Lucas');\n    });\n  </file>\n</example>\n\n\n### Why this feature\n\nThe main purpose of one-time binding expression is to provide a way to create a binding\nthat gets deregistered and frees up resources once the binding is stabilized.\nReducing the number of expressions being watched makes the digest loop faster and allows more\ninformation to be displayed at the same time.\n\n\n### Value stabilization algorithm\n\nOne-time binding expressions will retain the value of the expression at the end of the\ndigest cycle as long as that value is not undefined. If the value of the expression is set\nwithin the digest loop and later, within the same digest loop, it is set to undefined,\nthen the expression is not fulfilled and will remain watched.\n\n  1. Given an expression that starts with `::`, when a digest loop is entered and expression\n     is dirty-checked, store the value as V\n  2. If V is not undefined, mark the result of the expression as stable and schedule a task\n     to deregister the watch for this expression when we exit the digest loop\n  3. Process the digest loop as normal\n  4. When digest loop is done and all the values have settled, process the queue of watch\n     deregistration tasks. For each watch to be deregistered, check if it still evaluates\n     to a value that is not `undefined`. If that's the case, deregister the watch. Otherwise,\n     keep dirty-checking the watch in the future digest loops by following the same\n     algorithm starting from step 1\n\n\n### How to benefit from one-time binding\n\nIf the expression will not change once set, it is a candidate for one-time binding. \nHere are three example cases.\n\nWhen interpolating text or attributes:\n\n```html\n  <div name=\"attr: {{::color}}\">text: {{::name}}</div>\n```\n\nWhen using a directive with bidirectional binding and the parameters will not change:\n\n```js\nsomeModule.directive('someDirective', function() {\n  return {\n    scope: {\n      name: '=',\n      color: '@'\n    },\n    template: '{{name}}: {{color}}'\n  };\n});\n```\n\n```html\n  <div some-directive name=\"::myName\" color=\"My color is {{::myColor}}\"></div>\n```\n\n\nWhen using a directive that takes an expression:\n\n```html\n<ul>\n  <li ng-repeat=\"item in ::items\">{{item.name}};</li>\n</ul>\n```\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/expression.ngdoc",
        "id": "Expressions",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Expressions undefined.overview:Expressions downloaded/angular/angular.js-master/docs/content/guide/expression.ngdoc",
        "sortOn": "Expressions",
        "module": "Expressions",
        "left": 24,
        "level": 1,
        "root": "Developer Guide",
        "right": 25
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Filters",
        "sortOrder": "280",
        "description": "\n\nA filter formats the value of an expression for display to the user. They can be used in view templates,\ncontrollers or services and it is easy to define your own filter.\n\nThe underlying API is the {@link ng.$filterProvider `filterProvider`}.\n\n## Using filters in view templates\n\nFilters can be applied to expressions in view templates using the following syntax:\n\n        {{ expression | filter }}\n\nE.g. the markup `{{ 12 | currency }}` formats the number 12 as a currency using the {@link ng.filter:currency `currency`}\nfilter. The resulting value is `$12.00`.\n\nFilters can be applied to the result of another filter. This is called \"chaining\" and uses\nthe following syntax:\n\n        {{ expression | filter1 | filter2 | ... }}\n\nFilters may have arguments. The syntax for this is\n\n        {{ expression | filter:argument1:argument2:... }}\n\nE.g. the markup `{{ 1234 | number:2 }}` formats the number 1234 with 2 decimal points using the\n{@link ng.filter:number `number`} filter. The resulting value is `1,234.00`.\n\n\n## Using filters in controllers, services, and directives\n\nYou can also use filters in controllers, services, and directives. For this, inject a dependency\nwith the name `<filterName>Filter` to your controller/service/directive. E.g. using the dependency\n`numberFilter` will inject the number filter. The injected argument is a function that takes the\nvalue to format as first argument and filter parameters starting with the second argument.\n\nThe example below uses the filter called {@link ng.filter:filter `filter`}.\nThis filter reduces arrays into sub arrays based on\nconditions. The filter can be applied in the view template with markup like\n`{{ctrl.array | filter:'a'}}`, which would do a fulltext search for \"a\".\nHowever, using a filter in a view template will reevaluate the filter on\nevery digest, which can be costly if the array is big.\n\nThe example below therefore calls the filter directly in the controller.\nBy this, the controller is able to call the filter only when needed (e.g. when the data is loaded from the backend\nor the filter expression is changed).\n\n<example module=\"FilterInControllerModule\">\n  <file name=\"index.html\">\n    <div ng-controller=\"FilterController as ctrl\">\n      <div>\n        All entries:\n        <span ng-repeat=\"entry in ctrl.array\">{{entry.name}} </span>\n      </div>\n      <div>\n        Entries that contain an \"a\":\n        <span ng-repeat=\"entry in ctrl.filteredArray\">{{entry.name}} </span>\n      </div>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('FilterInControllerModule', []).\n      controller('FilterController', ['filterFilter', function(filterFilter) {\n        this.array = [\n          {name: 'Tobias'},\n          {name: 'Jeff'},\n          {name: 'Brian'},\n          {name: 'Igor'},\n          {name: 'James'},\n          {name: 'Brad'}\n        ];\n        this.filteredArray = filterFilter(this.array, 'a');\n      }]);\n  </file>\n</example>\n\n\n## Creating custom filters\n\nWriting your own filter is very easy: just register a new filter factory function with\nyour module. Internally, this uses the {@link ng.$filterProvider `filterProvider`}.\nThis factory function should return a new filter function which takes the input value\nas the first argument. Any filter arguments are passed in as additional arguments to the filter\nfunction.\n\nThe filter function should be a [pure function](http://en.wikipedia.org/wiki/Pure_function), which\nmeans that it should be stateless and idempotent. Angular relies on these properties and executes\nthe filter only when the inputs to the function change.\n\n<div class=\"alert alert-warning\">\n**Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.\nNames with special characters, such as hyphens and dots, are not allowed.  If you wish to namespace\nyour filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores\n(`myapp_subsection_filterx`).\n</div>\n\nThe following sample filter reverses a text string. In addition, it conditionally makes the\ntext upper-case.\n\n<example module=\"myReverseFilterApp\">\n  <file name=\"index.html\">\n    <div ng-controller=\"MyController\">\n      <input ng-model=\"greeting\" type=\"text\"><br>\n      No filter: {{greeting}}<br>\n      Reverse: {{greeting|reverse}}<br>\n      Reverse + uppercase: {{greeting|reverse:true}}<br>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('myReverseFilterApp', [])\n      .filter('reverse', function() {\n        return function(input, uppercase) {\n          input = input || '';\n          var out = \"\";\n          for (var i = 0; i < input.length; i++) {\n            out = input.charAt(i) + out;\n          }\n          // conditional based on optional argument\n          if (uppercase) {\n            out = out.toUpperCase();\n          }\n          return out;\n        };\n      })\n      .controller('MyController', ['$scope', function($scope) {\n        $scope.greeting = 'hello';\n      }]);\n  </file>\n</example>\n\n\n## Stateful filters\n\nIt is strongly discouraged to write filters that are stateful, because the execution of those can't\nbe optimized by Angular, which often leads to performance issues. Many stateful filters can be\nconverted into stateless filters just by exposing the hidden state as a model and turning it into an\nargument for the filter.\n\nIf you however do need to write a stateful filter, you have to mark the filter as `$stateful`, which\nmeans that it will be executed one or more times during the each `$digest` cycle.\n\n<example module=\"myStatefulFilterApp\">\n  <file name=\"index.html\">\n    <div ng-controller=\"MyController\">\n      Input: <input ng-model=\"greeting\" type=\"text\"><br>\n      Decoration: <input ng-model=\"decoration.symbol\" type=\"text\"><br>\n      No filter: {{greeting}}<br>\n      Decorated: {{greeting | decorate}}<br>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('myStatefulFilterApp', [])\n      .filter('decorate', ['decoration', function(decoration) {\n\n        function decorateFilter(input) {\n          return decoration.symbol + input + decoration.symbol;\n        }\n        decorateFilter.$stateful = true;\n\n        return decorateFilter;\n      }])\n      .controller('MyController', ['$scope', 'decoration', function($scope, decoration) {\n        $scope.greeting = 'hello';\n        $scope.decoration = decoration;\n      }])\n      .value('decoration', {symbol: '*'});\n  </file>\n</example>\n\n\n## Testing custom filters\n\nSee the [phonecat tutorial](http://docs.angularjs.org/tutorial/step_09#test) for an example.\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/filter.ngdoc",
        "id": "Filters",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Filters undefined.overview:Filters downloaded/angular/angular.js-master/docs/content/guide/filter.ngdoc",
        "sortOn": "Filters",
        "module": "Filters",
        "left": 26,
        "level": 1,
        "root": "Developer Guide",
        "right": 27
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Forms",
        "sortOrder": "290",
        "description": "\n\n# Forms\n\nControls (`input`, `select`, `textarea`) are ways for a user to enter data.\nA Form is a collection of controls for the purpose of grouping related controls together.\n\nForm and controls provide validation services, so that the user can be notified of invalid input\nbefore submitting a form. This provides a better user experience than server-side validation alone\nbecause the user gets instant feedback on how to correct the error. Keep in mind that while\nclient-side validation plays an important role in providing good user experience, it can easily\nbe circumvented and thus can not be trusted. Server-side validation is still necessary for a\nsecure application.\n\n\n## Simple form\nThe key directive in understanding two-way data-binding is {@link ng.directive:ngModel ngModel}.\nThe `ngModel` directive provides the two-way data-binding by synchronizing the model to the view,\nas well as view to the model. In addition it provides an {@link ngModel.NgModelController API}\nfor other directives to augment its behavior.\n\n<example module=\"formExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <form novalidate class=\"simple-form\">\n        Name: <input type=\"text\" ng-model=\"user.name\" /><br />\n        E-mail: <input type=\"email\" ng-model=\"user.email\" /><br />\n        Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n        <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n        <input type=\"button\" ng-click=\"reset()\" value=\"Reset\" />\n        <input type=\"submit\" ng-click=\"update(user)\" value=\"Save\" />\n      </form>\n      <pre>form = {{user | json}}</pre>\n      <pre>master = {{master | json}}</pre>\n    </div>\n\n    <script>\n      angular.module('formExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.master = {};\n\n          $scope.update = function(user) {\n            $scope.master = angular.copy(user);\n          };\n\n          $scope.reset = function() {\n            $scope.user = angular.copy($scope.master);\n          };\n\n          $scope.reset();\n        }]);\n    </script>\n  </file>\n</example>\n\n\nNote that `novalidate` is used to disable browser's native form validation.\n\nThe value of `ngModel` won't be set unless it passes validation for the input field.\nFor example: inputs of type `email` must have a value in the form of `user@domain`.\n\n\n\n## Using CSS classes\n\nTo allow styling of form as well as controls, `ngModel`  adds these CSS classes:\n\n- `ng-valid`: the model is valid\n- `ng-invalid`: the model is invalid\n- `ng-valid-[key]`: for each valid key added by `$setValidity`\n- `ng-invalid-[key]`: for each invalid key added by `$setValidity`\n- `ng-pristine`: the control hasn't been interacted with yet\n- `ng-dirty`: the control has been interacted with\n- `ng-touched`: the control has been blurred\n- `ng-untouched`: the control hasn't been blurred\n- `ng-pending`: any `$asyncValidators` are unfulfilled\n\nThe following example uses the CSS to display validity of each form control.\nIn the example both `user.name` and `user.email` are required, but are rendered\nwith red background only after the input is blurred (loses focus).\nThis ensures that the user is not distracted with an error until after interacting with the control,\nand failing to satisfy its validity.\n\n<example module=\"formExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <form novalidate class=\"css-form\">\n        Name: <input type=\"text\" ng-model=\"user.name\" required /><br />\n        E-mail: <input type=\"email\" ng-model=\"user.email\" required /><br />\n        Gender: <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n        <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female<br />\n        <input type=\"button\" ng-click=\"reset()\" value=\"Reset\" />\n        <input type=\"submit\" ng-click=\"update(user)\" value=\"Save\" />\n      </form>\n    </div>\n\n    <style type=\"text/css\">\n      .css-form input.ng-invalid.ng-touched {\n        background-color: #FA787E;\n      }\n\n      .css-form input.ng-valid.ng-touched {\n        background-color: #78FA89;\n      }\n    </style>\n\n    <script>\n      angular.module('formExample', [])\n        .controller('ExampleController', ['$scope', function($scope) {\n          $scope.master = {};\n\n          $scope.update = function(user) {\n            $scope.master = angular.copy(user);\n          };\n\n          $scope.reset = function() {\n            $scope.user = angular.copy($scope.master);\n          };\n\n          $scope.reset();\n        }]);\n    </script>\n  </file>\n</example>\n\n\n\n## Binding to form and control state\n\nA form is an instance of {@link form.FormController FormController}.\nThe form instance can optionally be published into the scope using the `name` attribute.\n\nSimilarly, an input control that has the {@link ng.directive:ngModel ngModel} directive holds an\ninstance of {@link ngModel.NgModelController NgModelController}. Such a control instance\ncan be published as a property of the form instance using the `name` attribute on the input control.\nThe name attribute specifies the name of the property on the form instance.\n\nThis implies that the internal state of both the form and the control is available for binding in\nthe view using the standard binding primitives.\n\nThis allows us to extend the above example with these features:\n\n- Custom error message displayed after the user interacted with a control (i.e. when `$touched` is set)\n- Custom error message displayed upon submitting the form (`$submitted` is set), even if the user\ndidn't interact with a control\n\n\n<example module=\"formExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <form name=\"form\" class=\"css-form\" novalidate>\n        Name:\n        <input type=\"text\" ng-model=\"user.name\" name=\"uName\" required=\"\" />\n        <br />\n        <div ng-show=\"form.$submitted || form.uName.$touched\">\n          <div ng-show=\"form.uName.$error.required\">Tell us your name.</div>\n        </div>\n\n        E-mail:\n        <input type=\"email\" ng-model=\"user.email\" name=\"uEmail\" required=\"\" />\n        <br />\n        <div ng-show=\"form.$submitted || form.uEmail.$touched\">\n          <span ng-show=\"form.uEmail.$error.required\">Tell us your email.</span>\n          <span ng-show=\"form.uEmail.$error.email\">This is not a valid email.</span>\n        </div>\n\n        Gender:\n        <input type=\"radio\" ng-model=\"user.gender\" value=\"male\" />male\n        <input type=\"radio\" ng-model=\"user.gender\" value=\"female\" />female\n        <br />\n        <input type=\"checkbox\" ng-model=\"user.agree\" name=\"userAgree\" required=\"\" />\n\n        I agree:\n        <input ng-show=\"user.agree\" type=\"text\" ng-model=\"user.agreeSign\" required=\"\" />\n        <br />\n        <div ng-show=\"form.$submitted || form.userAgree.$touched\">\n          <div ng-show=\"!user.agree || !user.agreeSign\">Please agree and sign.</div>\n        </div>\n\n        <input type=\"button\" ng-click=\"reset(form)\" value=\"Reset\" />\n        <input type=\"submit\" ng-click=\"update(user)\" value=\"Save\" />\n      </form>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('formExample', [])\n      .controller('ExampleController', ['$scope', function($scope) {\n        $scope.master = {};\n\n        $scope.update = function(user) {\n          $scope.master = angular.copy(user);\n        };\n\n        $scope.reset = function(form) {\n          if (form) {\n            form.$setPristine();\n            form.$setUntouched();\n          }\n          $scope.user = angular.copy($scope.master);\n        };\n\n        $scope.reset();\n      }]);\n  </file>\n</example>\n\n\n\n## Custom model update triggers\n\nBy default, any change to the content will trigger a model update and form validation. You can\noverride this behavior using the {@link ng.directive:ngModelOptions ngModelOptions} directive to\nbind only to specified list of events. I.e. `ng-model-options=\"{ updateOn: 'blur' }\"` will update\nand validate only after the control loses focus. You can set several events using a space delimited\nlist. I.e. `ng-model-options=\"{ updateOn: 'mousedown blur' }\"`\n\n<img alt=\"animation showing debounced input\" src=\"img/guide/forms-update-on-blur.gif\">\n\nIf you want to keep the default behavior and just add new events that may trigger the model update\nand validation, add \"default\" as one of the specified events.\n\nI.e. `ng-model-options=\"{ updateOn: 'default blur' }\"`\n\nThe following example shows how to override immediate updates. Changes on the inputs within the form\nwill update the model only when the control loses focus (blur event).\n\n<example module=\"customTriggerExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <form>\n        Name:\n        <input type=\"text\" ng-model=\"user.name\" ng-model-options=\"{ updateOn: 'blur' }\" /><br />\n        Other data:\n        <input type=\"text\" ng-model=\"user.data\" /><br />\n      </form>\n      <pre>username = \"{{user.name}}\"</pre>\n      <pre>userdata = \"{{user.data}}\"</pre>\n    </div>\n  </file>\n  <file name=\"script.js\">\n     angular.module('customTriggerExample', [])\n      .controller('ExampleController', ['$scope', function($scope) {\n        $scope.user = {};\n      }]);\n  </file>\n</example>\n\n\n\n## Non-immediate (debounced) model updates\n\nYou can delay the model update/validation by using the `debounce` key with the\n{@link ng.directive:ngModelOptions ngModelOptions} directive. This delay will also apply to\nparsers, validators and model flags like `$dirty` or `$pristine`.\n\n<img alt=\"animation showing debounced input\" src=\"img/guide/forms-debounce.gif\">\n\nI.e. `ng-model-options=\"{ debounce: 500 }\"` will wait for half a second since\nthe last content change before triggering the model update and form validation.\n\nIf custom triggers are used, custom debouncing timeouts can be set for each event using an object\nin `debounce`. This can be useful to force immediate updates on some specific circumstances\n(like blur events).\n\nI.e. `ng-model-options=\"{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }\"`\n\nIf those attributes are added to an element, they will be applied to all the child elements and\ncontrols that inherit from it unless they are overridden.\n\nThis example shows how to debounce model changes. Model will be updated only 250 milliseconds\nafter last change.\n\n<example module=\"debounceExample\">\n  <file name=\"index.html\">\n    <div ng-controller=\"ExampleController\">\n      <form>\n        Name:\n        <input type=\"text\" ng-model=\"user.name\" ng-model-options=\"{ debounce: 250 }\" /><br />\n      </form>\n      <pre>username = \"{{user.name}}\"</pre>\n    </div>\n  </file>\n  <file name=\"script.js\">\n    angular.module('debounceExample', [])\n      .controller('ExampleController', ['$scope', function($scope) {\n        $scope.user = {};\n      }]);\n  </file>\n</example>\n\n## Custom Validation\n\nAngular provides basic implementation for most common HTML5 {@link ng.directive:input input}\ntypes: ({@link input[text] text}, {@link input[number] number}, {@link input[url] url},\n{@link input[email] email}, {@link input[date] date}, {@link input[radio] radio}, {@link input[checkbox] checkbox}),\nas well as some directives for validation (`required`, `pattern`, `minlength`, `maxlength`,\n`min`, `max`).\n\nWith a custom directive, you can add your own validation functions to the `$validators` object on\nthe {@link ngModel.NgModelController `ngModelController`}. To get a hold of the controller,\nyou require it in the directive as shown in the example below.\n\nEach function in the `$validators` object receives the `modelValue` and the `viewValue`\nas parameters. Angular will then call `$setValidity` internally with the function's return value\n(`true`: valid, `false`: invalid). The validation functions are executed every time an input\nis changed (`$setViewValue` is called) or whenever the bound `model` changes.\nValidation happens after successfully running `$parsers` and `$formatters`, respectively.\nFailed validators are stored by key in\n{@link ngModel.NgModelController#$error `ngModelController.$error`}.\n\nAdditionally, there is the `$asyncValidators` object which handles asynchronous validation,\nsuch as making an `$http` request to the backend. Functions added to the object must return\na promise that must be `resolved` when valid or `rejected` when invalid.\nIn-progress async validations are stored by key in\n{@link ngModel.NgModelController#$pending `ngModelController.$pending`}.\n\nIn the following example we create two directives:\n * An `integer` directive that validates whether the input is a valid integer. For example,\n `1.23` is an invalid value, since it contains a fraction. Note that we validate the viewValue\n (the string value of the control), and not the modelValue. This is because input[number] converts\n the viewValue to a number when running the `$parsers`.\n\n * A `username` directive that asynchronously checks if a user-entered value is already taken.\n We mock the server request with a `$q` deferred.\n\n<example module=\"form-example1\">\n  <file name=\"index.html\">\n    <form name=\"form\" class=\"css-form\" novalidate>\n      <div>\n        Size (integer 0 - 10):\n        <input type=\"number\" ng-model=\"size\" name=\"size\"\n               min=\"0\" max=\"10\" integer />{{size}}<br />\n        <span ng-show=\"form.size.$error.integer\">The value is not a valid integer!</span>\n        <span ng-show=\"form.size.$error.min || form.size.$error.max\">\n          The value must be in range 0 to 10!</span>\n      </div>\n\n      <div>\n        Username:\n        <input type=\"text\" ng-model=\"name\" name=\"name\" username />{{name}}<br />\n        <span ng-show=\"form.name.$pending.username\">Checking if this name is available...</span>\n        <span ng-show=\"form.name.$error.username\">This username is already taken!</span>\n      </div>\n\n    </form>\n  </file>\n\n  <file name=\"script.js\">\n    var app = angular.module('form-example1', []);\n\n    var INTEGER_REGEXP = /^\\-?\\d+$/;\n    app.directive('integer', function() {\n      return {\n        require: 'ngModel',\n        link: function(scope, elm, attrs, ctrl) {\n          ctrl.$validators.integer = function(modelValue, viewValue) {\n            if (ctrl.$isEmpty(modelValue)) {\n              // consider empty models to be valid\n              return true;\n            }\n\n            if (INTEGER_REGEXP.test(viewValue)) {\n              // it is valid\n              return true;\n            }\n\n            // it is invalid\n            return false;\n          };\n        }\n      };\n    });\n\n    app.directive('username', function($q, $timeout) {\n      return {\n        require: 'ngModel',\n        link: function(scope, elm, attrs, ctrl) {\n        var usernames = ['Jim', 'John', 'Jill', 'Jackie'];\n\n          ctrl.$asyncValidators.username = function(modelValue, viewValue) {\n\n            if (ctrl.$isEmpty(modelValue)) {\n              // consider empty model valid\n              return $q.when();\n            }\n\n            var def = $q.defer();\n\n            $timeout(function() {\n              // Mock a delayed response\n              if (usernames.indexOf(modelValue) === -1) {\n                // The username is available\n                def.resolve();\n              } else {\n                def.reject();\n              }\n\n            }, 2000);\n\n            return def.promise;\n          };\n        }\n      };\n    });\n  </file>\n</example>\n\n## Modifying built-in validators\n\nSince Angular itself uses `$validators`, you can easily replace or remove built-in validators,\nshould you find it necessary. The following example shows you how to overwrite the email validator\nin `input[email]` from a custom directive so that it requires a specific top-level domain,\n`example.com` to be present.\nNote that you can alternatively use `ng-pattern` to further restrict the validation.\n\n<example module=\"form-example-modify-validators\">\n  <file name=\"index.html\">\n    <form name=\"form\" class=\"css-form\" novalidate>\n      <div>\n        Overwritten Email:\n        <input type=\"email\" ng-model=\"myEmail\" overwrite-email name=\"overwrittenEmail\" />\n        <span ng-show=\"form.overwrittenEmail.$error.email\">This email format is invalid!</span><br>\n        Model: {{myEmail}}\n        </div>\n    </form>\n  </file>\n\n  <file name=\"script.js\">\n    var app = angular.module('form-example-modify-validators', []);\n\n    app.directive('overwriteEmail', function() {\n      var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@example\\.com$/i;\n\n      return {\n        require: 'ngModel',\n        restrict: '',\n        link: function(scope, elm, attrs, ctrl) {\n          // only apply the validator if ngModel is present and Angular has added the email validator\n          if (ctrl && ctrl.$validators.email) {\n\n            // this will overwrite the default Angular email validator\n            ctrl.$validators.email = function(modelValue) {\n              return ctrl.$isEmpty(modelValue) || EMAIL_REGEXP.test(modelValue);\n            };\n          }\n        }\n      };\n    });\n  </file>\n</example>\n\n\n## Implementing custom form controls (using `ngModel`)\nAngular implements all of the basic HTML form controls ({@link ng.directive:input input},\n{@link ng.directive:select select}, {@link ng.directive:textarea textarea}),\nwhich should be sufficient for most cases. However, if you need more flexibility,\nyou can write your own form control as a directive.\n\nIn order for custom control to work with `ngModel` and to achieve two-way data-binding it needs to:\n\n  - implement `$render` method, which is responsible for rendering the data after it passed the\n  {@link ngModel.NgModelController#$formatters `NgModelController.$formatters`},\n  - call `$setViewValue` method, whenever the user interacts with the control and model\n  needs to be updated. This is usually done inside a DOM Event listener.\n\nSee {@link guide/directive `$compileProvider.directive`} for more info.\n\nThe following example shows how to add two-way data-binding to contentEditable elements.\n\n<example module=\"form-example2\">\n  <file name=\"index.html\">\n    <div contentEditable=\"true\" ng-model=\"content\" title=\"Click to edit\">Some</div>\n    <pre>model = {{content}}</pre>\n\n    <style type=\"text/css\">\n      div[contentEditable] {\n        cursor: pointer;\n        background-color: #D0D0D0;\n      }\n    </style>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('form-example2', []).directive('contenteditable', function() {\n      return {\n        require: 'ngModel',\n        link: function(scope, elm, attrs, ctrl) {\n          // view -> model\n          elm.on('blur', function() {\n            scope.$apply(function() {\n              ctrl.$setViewValue(elm.html());\n            });\n          });\n\n          // model -> view\n          ctrl.$render = function() {\n            elm.html(ctrl.$viewValue);\n          };\n\n          // load init value from DOM\n          ctrl.$setViewValue(elm.html());\n        }\n      };\n    });\n  </file>\n</example>\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/forms.ngdoc",
        "id": "Forms",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Forms undefined.overview:Forms downloaded/angular/angular.js-master/docs/content/guide/forms.ngdoc",
        "sortOn": "Forms",
        "module": "Forms",
        "left": 28,
        "level": 1,
        "root": "Developer Guide",
        "right": 29
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "i18n and l10n",
        "sortOrder": "520",
        "description": "\n\n# i18n and l10n\n\nInternationalization (i18n) is the process of developing products in such a way that they can be\nlocalized for languages and cultures easily. Localization (l10n), is the process of adapting\napplications and text to enable their usability in a particular cultural or linguistic market. For\napplication developers, internationalizing an application means abstracting all of the strings and\nother locale-specific bits (such as date or currency formats) out of the application. Localizing an\napplication means providing translations and localized formats for the abstracted bits.\n\n\n## How does Angular support i18n/l10n?\n\nAngular supports i18n/l10n for {@link ng.filter:date date}, {@link ng.filter:number number} and\n{@link ng.filter:currency currency} filters.\n\nAdditionally, Angular supports localizable pluralization support through the {@link\nng.directive:ngPluralize `ngPluralize` directive}.\n\nAll localizable Angular components depend on locale-specific rule sets managed by the {@link\nng.$locale `$locale` service}.\n\nThere a few examples that showcase how to use Angular filters with various locale rule sets in the\n[`i18n/e2e` directory](https://github.com/angular/angular.js/tree/master/i18n/e2e) of the Angular\nsource code.\n\n\n## What is a locale ID?\n\nA locale is a specific geographical, political, or cultural region. The most commonly used locale\nID consists of two parts: language code and country code. For example, `en-US`, `en-AU`, and\n`zh-CN` are all valid locale IDs that have both language codes and country codes. Because\nspecifying a country code in locale ID is optional, locale IDs such as `en`, `zh`, and `sk` are\nalso valid. See the [ICU](http://userguide.icu-project.org/locale) website for more information\nabout using locale IDs.\n\n\n## Supported locales in Angular\n\nAngular separates number and datetime format rule sets into different files, each file for a\nparticular locale. You can find a list of currently supported locales\n[here](https://github.com/angular/angular.js/tree/master/src/ngLocale)\n\n\n## Providing locale rules to Angular\n\nThere are two approaches to providing locale rules to Angular:\n\n### 1. Pre-bundled rule sets\n\nYou can pre-bundle the desired locale file with Angular by concatenating the content of the\nlocale-specific file to the end of `angular.js` or `angular.min.js` file.\n\nFor example on *nix, to create an angular.js file that contains localization rules for german\nlocale, you can do the following:\n\n`cat angular.js i18n/angular-locale_de-de.js > angular_de-de.js`\n\nWhen the application containing `angular_de-de.js` script instead of the generic angular.js script\nstarts, Angular is automatically pre-configured with localization rules for the german locale.\n\n### 2. Including a locale script in `index.html`\n\nYou can also include the locale specific js file in the index.html page. For example, if one client\nrequires German locale, you would serve index_de-de.html which will look something like this:\n\n```html\n<html ng-app>\n <head>\n….\n   <script src=\"angular.js\"></script>\n   <script src=\"i18n/angular-locale_de-de.js\"></script>\n….\n </head>\n</html>\n```\n\n### Comparison of the two approaches\n\nBoth approaches described above require you to prepare different `index.html` pages or JavaScript\nfiles for each locale that your app may use. You also need to configure your server to serve\nthe correct file that correspond to the desired locale.\n\nThe second approach (including the locale JavaScript file in `index.html`) may be slower because\nan extra script needs to be loaded.\n\n\n## Caveats\n\nAlthough Angular makes i18n convenient, there are several things you need to be conscious of as you\ndevelop your app.\n\n### Currency symbol\n\nAngular's {@link ng.filter:currency currency filter} allows you to use the default currency symbol\nfrom the {@link ng.$locale locale service}, or you can provide the filter with a custom currency\nsymbol.\n\n<div class=\"alert alert-success\">\n**Best Practice:** If your app will be used only in one locale, it is fine to rely on the default\ncurrency symbol. If you anticipate that viewers in other locales might use your app, you should\nexplicitly provide a currency symbol.\n</div>\n\nLet's say you are writing a banking app and you want to display an account balance of 1000 dollars.\nYou write the following binding using the currency filter:\n\n```html\n{{ 1000 | currency }}\n```\n\nIf your app is currently in the `en-US` locale, the browser will show `$1000.00`. If someone in the\nJapanese locale (`ja`) views your app, their browser will show a balance of `¥1000.00` instead.\nThis is problematic because $1000 is not the same as ¥1000.\n\nIn this case, you need to override the default currency symbol by providing the\n{@link ng.filter:currency} currency filter with a currency symbol as a parameter.\n\nIf we change the above to `{{ 1000 | currency:\"USD$\"}}`, Angular will always show a balance of\n`USD$1000` regardless of locale.\n\n### Translation length\n\nTranslated strings/datetime formats can vary greatly in length. For example, `June 3, 1977` will be\ntranslated to Spanish as `3 de junio de 1977`.\n\nWhen internationalizing your app, you need to do thorough testing to make sure UI components behave\nas expected even when their contents vary greatly in content size.\n\n### Timezones\n\nThe Angular datetime filter uses the time zone settings of the browser. The same\napplication will show different time information depending on the time zone settings of the\ncomputer that the application is running on. Neither JavaScript nor Angular currently supports\ndisplaying the date with a timezone specified by the developer.\n\n\n<a name=\"MessageFormat\"></a>\n## MessageFormat extensions \n\nAngularJS interpolations via `$interpolate` and in templates\nsupport an extended syntax based on a subset of the ICU\nMessageFormat that covers plurals and gender selections.\n\nPlease refer to our [design doc](https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit)\nfor a lot more details.  You may find it helpful to play with our [Plnkr Example](http://plnkr.co/edit/QBVRQ70dvKZDWmHW9RyR?p=preview).\n\nYou can read more about the ICU MessageFormat syntax at\n[Formatting Messages | ICU User Guide](http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat).\n\nThis extended syntax is provided by way of the\n`ngMessageFormat` module that your application can depend\nupon (shipped separately as `angular-messageFormat.min.js` and\n`angular-messageFormat.js`.)  A current limitation of the\n`ngMessageFormat` module, is that it does not support\nredefining the `$interpolate` start and end symbols. Only the\ndefault `{{` and `}}` are allowed.\n\nThis syntax extension, while based on MessageFormat, has\nbeen designed to be backwards compatible with existing\nAngularJS interpolation expressions.  The key rule is simply\nthis: **All interpolations are done inside double curlies.**\nThe top level comma operator after an expression inside the\ndouble curlies causes MessageFormat extensions to be\nrecognized.  Such a top level comma is otherwise illegal in\nan Angular expression and is used by MessageFormat to\nspecify the function (such as plural/select) and it's\nrelated syntax.\n\nTo understand the extension, take a look at the ICU\nMessageFormat syntax as specified by the ICU documentation.\nAnywhere in that MessageFormat that you have regular message\ntext and you want to substitute an expression, just put it\nin double curlies instead of single curlies that\nMessageFormat dictates.  This has a huge advantage.  **You\nare no longer limited to simple identifiers for\nsubstitutions**.  Because you are using double curlies, you\ncan stick in any arbitrary interpolation syntax there,\nincluding nesting more MessageFormat expressions!  Some\nexamples will make this clear.  In the following example, I\nwill only be showing you the AngularJS syntax.\n\n\n### Simple plural example\n\n```\n{{numMessages, plural,\n      =0 { You have no new messages }\n      =1 { You have one new message }\n   other { You have # new messages }\n}}\n```\n\nWhile I won't be teaching you MessageFormat here, you will\nnote that the `#` symbol works as expected.  You could have\nalso written it as:\n\n```\n{{numMessages, plural,\n      =0 { You have no new messages }\n      =1 { You have one new message }\n   other { You have {{numMessages}} new messages }\n}}\n```\n\nwhere you explicitly typed in `numMessages` for \"other\"\ninstead of using `#`.  They are nearly the same except if\nyou're using \"offset\".  Refer to the ICU MessageFormat\ndocumentation to learn about offset.\n\nPlease note that **other** is a **required** category (for\nboth the plural syntax and the select syntax that is shown\nlater.)\n\n\n### Simple select (for gender) example\n\n```\n{{friendGender, select,\n       male { Invite him }\n     female { Invite her }\n      other { Invite them }\n}}\n```\n\n### More complex example that combines some of these\n\nThis is taken from the [plunker example](http://plnkr.co/edit/QBVRQ70dvKZDWmHW9RyR?p=preview) linked to earlier.\n\n```\n{{recipients.length, plural, offset:1\n    =0 {You ({{sender.name}}) gave no gifts}\n    =1 { {{ recipients[0].gender, select,\n              male {You ({{sender.name}}) gave him ({{recipients[0].name}}) a gift.}\n              female {You ({{sender.name}}) gave her ({{recipients[0].name}}) a gift.}\n              other {You ({{sender.name}}) gave them ({{recipients[0].name}}) a gift.}\n          }}\n       }\n    one { {{ recipients[0].gender, select,\n              male {You ({{sender.name}}) gave him ({{recipients[0].name}}) and one other person a gift.}\n              female {You ({{sender.name}}) gave her ({{recipients[0].name}}) and one other person a gift.}\n              other {You ({{sender.name}}) gave them ({{recipients[0].name}}) and one other person a gift.}\n          }}\n       }\n    other {You ({{sender.name}}) gave {{recipients.length}} people gifts. }\n}}\n```\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/i18n.ngdoc",
        "id": "i18n and l10n",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "i18n and l10n undefined.overview:i18n and l10n downloaded/angular/angular.js-master/docs/content/guide/i18n.ngdoc",
        "sortOn": "i18n and l10n",
        "module": "i18n and l10n",
        "left": 30,
        "level": 1,
        "root": "Developer Guide",
        "right": 31
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Internet Explorer Compatibility",
        "sortOrder": "530",
        "description": "\n\n# Internet Explorer Compatibility\n\n<div class=\"alert alert-warning\">\n**Note:** AngularJS 1.3 has dropped support for IE8. Read more about it on\n[our blog](http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html).\nAngularJS 1.2 will continue to support IE8, but the core team does not plan to spend time\naddressing issues specific to IE8 or earlier.\n</div>\n\nThis document describes the Internet Explorer (IE) idiosyncrasies when dealing with custom HTML\nattributes and tags. Read this document if you are planning on deploying your Angular application\non IE.\n\nThe project currently supports and will attempt to fix bugs for IE9 and above. The continuous\nintegration server runs all the tests against IE9, IE10, and IE11. See\n[Travis CI](https://travis-ci.org/angular/angular.js) and\n[ci.angularjs.org](http://ci.angularjs.org).\n\nWe do not run tests on IE8 and below. A subset of the AngularJS functionality may work on these\nbrowsers, but it is up to you to test and decide whether it works for your particular app.\n\n\nTo ensure your Angular application works on IE please consider:\n\n1. Use `ng-style` tags instead of `style=\"{{ someCss }}\"`. The latter works in Chrome and Firefox\n   but does not work in Internet Explorer <= 11 (the most recent version at time of writing).",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/ie.ngdoc",
        "id": "Internet Explorer Compatibility",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Internet Explorer Compatibility undefined.overview:Internet Explorer Compatibility downloaded/angular/angular.js-master/docs/content/guide/ie.ngdoc",
        "sortOn": "Internet Explorer Compatibility",
        "module": "Internet Explorer Compatibility",
        "left": 32,
        "level": 1,
        "root": "Developer Guide",
        "right": 33
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Introduction",
        "sortOrder": "100",
        "description": "\n\n\n# What Is Angular?\n\nAngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template\nlanguage and lets you extend HTML's syntax to express your application's components clearly and\nsuccinctly. Angular's data binding and dependency injection eliminate much of the code you\nwould otherwise have to write. And it all happens within the browser, making it\nan ideal partner with any server technology.\n\nAngular is what HTML would have been, had it been designed for applications. HTML is a great\ndeclarative language for static documents. It does not contain much in the way of creating\napplications, and as a result building web applications is an exercise in *what do I have to do\nto trick the browser into doing what I want?*\n\nThe impedance mismatch between dynamic applications and static documents is often solved with:\n\n  * **a library** - a collection of functions which are useful when writing web apps. Your code is\n    in charge and it calls into the library when it sees fit. E.g., `jQuery`.\n  * **frameworks** - a particular implementation of a web application, where your code fills in\n    the details. The framework is in charge and it calls into your code when it needs something\n    app specific. E.g., `durandal`, `ember`, etc.\n\n\nAngular takes another approach. It attempts to minimize the impedance mismatch between document\ncentric HTML and what an application needs by creating new HTML constructs. Angular teaches the\nbrowser new syntax through a construct we call *directives*. Examples include:\n\n  * Data binding, as in `{{}}`.\n  * DOM control structures for repeating, showing and hiding DOM fragments.\n  * Support for forms and form validation.\n  * Attaching new behavior to DOM elements, such as DOM event handling.\n  * Grouping of HTML into reusable components.\n\n\n\n## A complete client-side solution\n\nAngular is not a single piece in the overall puzzle of building the client-side of a web\napplication. It handles all of the DOM and AJAX glue code you once wrote by hand and puts it in a\nwell-defined structure. This makes Angular opinionated about how a CRUD (Create, Read, Update, Delete)\napplication should be built. But while it is opinionated, it also tries to make sure that its opinion \nis just a starting point you can easily change. Angular comes with the following out-of-the-box:\n\n  * Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating\n    directives, form validation, routing, deep-linking, reusable components and dependency injection.\n  * Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.\n  * Seed application with directory layout and test scripts as a starting point.\n\n\n## Angular's sweet spot\n\nAngular simplifies application development by presenting a higher level of abstraction to the\ndeveloper. Like any abstraction, it comes at a cost of flexibility. In other words, not every app\nis a good fit for Angular. Angular was built with the CRUD application in mind. Luckily CRUD\napplications represent the majority of web applications. To understand what Angular is\ngood at, though, it helps to understand when an app is not a good fit for Angular.\n\nGames and GUI editors are examples of applications with intensive and tricky DOM manipulation.\nThese kinds of apps are different from CRUD apps, and as a result are probably not a good fit for Angular.\nIn these cases it may be better to use a library with a lower level of abstraction, such as `jQuery`.\n\n# The Zen of Angular\n\nAngular is built around the belief that declarative code is better than imperative when it comes\nto building UIs and wiring software components together, while imperative code is excellent for\nexpressing business logic.\n\n\n  * It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves\n    the testability of the code.\n  * It is a really, _really_ good idea to regard app testing as equal in importance to app\n    writing. Testing difficulty is dramatically affected by the way the code is structured.\n  * It is an excellent idea to decouple the client side of an app from the server side. This\n    allows development work to progress in parallel, and allows for reuse of both sides.\n  * It is very helpful indeed if the framework guides developers through the entire journey of\n    building an app: From designing the UI, through writing the business logic, to testing.\n  * It is always good to make common tasks trivial and difficult tasks possible.\n\n\n\nAngular frees you from the following pains:\n\n  * **Registering callbacks:** Registering callbacks clutters your code, making it hard to see the\n    forest for the trees. Removing common boilerplate code such as callbacks is a good thing. It\n    vastly reduces the amount of JavaScript coding _you_ have to do, and it makes it easier to see\n    what your application does.\n  * **Manipulating HTML DOM programmatically:** Manipulating HTML DOM is a cornerstone of AJAX\n    applications, but it's cumbersome and error-prone. By declaratively describing how the UI\n    should change as your application state changes, you are freed from low-level DOM manipulation\n    tasks. Most applications written with Angular never have to programmatically manipulate the\n    DOM, although you can if you want to.\n  * **Marshaling data to and from the UI:** CRUD operations make up the majority of AJAX\n    applications' tasks. The flow of marshaling data from the server to an internal object to an HTML\n    form, allowing users to modify the form, validating the form, displaying validation errors,\n    returning to an internal model, and then back to the server, creates a lot of boilerplate\n    code. Angular eliminates almost all of this boilerplate, leaving code that describes the\n    overall flow of the application rather than all of the implementation details.\n  * **Writing tons of initialization code just to get started:** Typically you need to write a lot\n    of plumbing just to get a basic \"Hello World\" AJAX app working. With Angular you can bootstrap\n    your app easily using services, which are auto-injected into your application in a\n    [Guice](https://github.com/google/guice)-like dependency-injection style. This allows you\n    to get started developing features quickly. As a bonus, you get full control over the\n    initialization process in automated tests.\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/introduction.ngdoc",
        "id": "Introduction",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Introduction undefined.overview:Introduction downloaded/angular/angular.js-master/docs/content/guide/introduction.ngdoc",
        "sortOn": "Introduction",
        "module": "Introduction",
        "left": 34,
        "level": 1,
        "root": "Developer Guide",
        "right": 35
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Migrating from Previous Versions",
        "sortOrder": "550",
        "description": "\n\nMinor version releases in AngularJS introduce several breaking changes that may require changes to your\napplication's source code; for instance from 1.0 to 1.2 and from 1.2 to 1.3.\n\nAlthough we try to avoid breaking changes, there are some cases where it is unavoidable.\n\n* AngularJS has undergone thorough security reviews to make applications safer by default,\nwhich drives many of these changes.\n* Several new features, especially animations, would not be possible without a few changes.\n* Finally, some outstanding bugs were best fixed by changing an existing API.\n\n# Migrating from 1.2 to 1.3\n\n## Controllers\n\nDue to [3f2232b5](https://github.com/angular/angular.js/commit/3f2232b5a181512fac23775b1df4a6ebda67d018),\n`$controller` will no longer look for controllers on `window`.\nThe old behavior of looking on `window` for controllers was originally intended\nfor use in examples, demos, and toy apps. We found that allowing global controller\nfunctions encouraged poor practices, so we resolved to disable this behavior by\ndefault.\n\nTo migrate, register your controllers with modules rather than exposing them\nas globals:\n\nBefore:\n\n```javascript\nfunction MyController() {\n  // ...\n}\n```\n\nAfter:\n\n```javascript\nangular.module('myApp', []).controller('MyController', [function() {\n  // ...\n}]);\n```\n\nAlthough it's not recommended, you can re-enable the old behavior like this:\n\n```javascript\nangular.module('myModule').config(['$controllerProvider', function($controllerProvider) {\n  // this option might be handy for migrating old apps, but please don't use it\n  // in new ones!\n  $controllerProvider.allowGlobals();\n}]);\n```\n\n## Angular Expression Parsing (`$parse` + `$interpolate`)\n\n- due to [77ada4c8](https://github.com/angular/angular.js/commit/77ada4c82d6b8fc6d977c26f3cdb48c2f5fbe5a5),\n\nYou can no longer invoke .bind, .call or .apply on a function in angular expressions.\nThis is to disallow changing the behaviour of existing functions\nin an unforeseen fashion.\n\n  - due to [6081f207](https://github.com/angular/angular.js/commit/6081f20769e64a800ee8075c168412b21f026d99),\n\nThe (deprecated) __proto__ property does not work inside angular expressions\nanymore.\n\n\n- due to [48fa3aad](https://github.com/angular/angular.js/commit/48fa3aadd546036c7e69f71046f659ab1de244c6),\n\nThis prevents the use of __{define,lookup}{Getter,Setter}__ inside angular\nexpressions. If you really need them for some reason, please wrap/bind them to make them\nless dangerous, then make them available through the scope object.\n\n\n- due to [528be29d](https://github.com/angular/angular.js/commit/528be29d1662122a34e204dd607e1c0bd9c16bbc),\n\nThis prevents the use of `Object` inside angular expressions.\nIf you need Object.keys, make it accessible in the scope.\n\n\n- due to [bdfc9c02](https://github.com/angular/angular.js/commit/bdfc9c02d021e08babfbc966a007c71b4946d69d),\n  values 'f', '0', 'false', 'no', 'n', '[]' are no longer\ntreated as falsy. Only JavaScript falsy values are now treated as falsy by the\nexpression parser; there are six of them: false, null, undefined, NaN, 0 and \"\".\n\n\n- due to [fa6e411d](https://github.com/angular/angular.js/commit/fa6e411da26824a5bae55f37ce7dbb859653276d),\n  promise unwrapping has been removed. It has been deprecated since 1.2.0-rc.3.\n  It can no longer be turned on.\n  Two methods have been removed:\n  * `$parseProvider.unwrapPromises`\n  * `$parseProvider.logPromiseWarnings`\n\n\n- **$interpolate:** due to [88c2193c](https://github.com/angular/angular.js/commit/88c2193c71954b9e7e7e4bdf636a2b168d36300d),\n  the function returned by `$interpolate`\n  no longer has a `.parts` array set on it.\n\n  Instead it has two arrays:\n  * `.expressions`, an array of the expressions in the\n    interpolated text. The expressions are parsed with\n    `$parse`, with an extra layer converting them to strings\n    when computed\n  * `.separators`, an array of strings representing the\n    separations between interpolations in the text.\n    This array is **always** 1 item longer than the\n    `.expressions` array for easy merging with it\n\n\n\n\n## Miscellaneous Angular helpers\n\n- **Angular.copy:** due to [b59b04f9](https://github.com/angular/angular.js/commit/b59b04f98a0b59eead53f6a53391ce1bbcbe9b57),\n\nThis changes `angular.copy` so that it applies the prototype of the original\nobject to the copied object.  Previously, `angular.copy` would copy properties\nof the original object's prototype chain directly onto the copied object.\n\nThis means that if you iterate over only the copied object's `hasOwnProperty`\nproperties, it will no longer contain the properties from the prototype.\nThis is actually much more reasonable behaviour and it is unlikely that\napplications are actually relying on this.\n\nIf this behaviour is relied upon, in an app, then one should simply iterate\nover all the properties on the object (and its inherited properties) and\nnot filter them with `hasOwnProperty`.\n\n**Be aware that this change also uses a feature that is not compatible with\nIE8.**  If you need this to work on IE8 then you would need to provide a polyfill\nfor `Object.create` and `Object.getPrototypeOf`.\n\n\n- **forEach:** due to [55991e33](https://github.com/angular/angular.js/commit/55991e33af6fece07ea347a059da061b76fc95f5),\n  forEach will iterate only over the initial number of items in\nthe array. So if items are added to the array during the iteration, these won't\nbe iterated over during the initial forEach call.\n\nThis change also makes our forEach behave more like Array#forEach.\n\n\n- **angular.toJson:** due to [c054288c](https://github.com/angular/angular.js/commit/c054288c9722875e3595e6e6162193e0fb67a251),\n\nIf you expected `toJson` to strip these types of properties before, you will have to\nmanually do this yourself now.\n\n\n\n\n\n## jqLite / JQuery\n\n- **jqLite:** due to [a196c8bc](https://github.com/angular/angular.js/commit/a196c8bca82a28c08896d31f1863cf4ecd11401c),\n  previously it was possible to set jqLite data on Text/Comment\nnodes, but now that is allowed only on Element and Document nodes just like in\njQuery. We don't expect that app code actually depends on this accidental feature.\n\n\n- **jqLite:** due to [d71dbb1a](https://github.com/angular/angular.js/commit/d71dbb1ae50f174680533492ce4c7db3ff74df00),\n  the jQuery `detach()` method does not trigger the `$destroy` event.\n  If you want to destroy Angular data attached to the element, use `remove()`.\n\n\n\n\n\n## Angular HTML Compiler (`$compile`)\n\n\n- due to [2ee29c5d](https://github.com/angular/angular.js/commit/2ee29c5da81ffacdc1cabb438f5d125d5e116cb9),\n\nThe isolated scope of a component directive no longer leaks into the template\nthat contains the instance of the directive.  This means that you can no longer\naccess the isolated scope from attributes on the element where the isolated\ndirective is defined.\n\nSee https://github.com/angular/angular.js/issues/10236 for an example.\n\n- due to [2cde927e](https://github.com/angular/angular.js/commit/2cde927e58c8d1588569d94a797e43cdfbcedaf9),\n\n\nRequesting isolate scope and any other scope on a single element is an error.\nBefore this change, the compiler let two directives request a child scope\nand an isolate scope if the compiler applied them in the order of non-isolate\nscope directive followed by isolate scope directive.\n\nNow the compiler will error regardless of the order.\n\nIf you find that your code is now throwing a `$compile:multidir` error,\ncheck that you do not have directives on the same element that are trying\nto request both an isolate and a non-isolate scope and fix your code.\n\n\n- due to [eec6394a](https://github.com/angular/angular.js/commit/eec6394a342fb92fba5270eee11c83f1d895e9fb), The `replace` flag for defining directives that\n  replace the element that they are on will be removed in the next major angular version.\n  This feature has difficult semantics (e.g. how attributes are merged) and leads to more\n  problems compared to what it solves. Also, with Web Components it is normal to have\n  custom elements in the DOM.\n\n\n- due to [299b220f](https://github.com/angular/angular.js/commit/299b220f5e05e1d4e26bfd58d0b2fd7329ca76b1),\n  calling `attr.$observe` no longer returns the observer function, but a\n    deregistration function instead. To migrate the code follow the example below:\n\nBefore:\n\n    directive('directiveName', function() {\n      return {\n        link: function(scope, elm, attr) {\n          var observer = attr.$observe('someAttr', function(value) {\n            console.log(value);\n          });\n        }\n      };\n    });\n\nAfter:\n\n    directive('directiveName', function() {\n      return {\n        link: function(scope, elm, attr) {\n          var observer = function(value) {\n            console.log(value);\n          };\n\n          attr.$observe('someAttr', observer);\n        }\n      };\n    });\n\n\n\n\n## Forms, Inputs and ngModel\n\n- due to [1be9bb9d](https://github.com/angular/angular.js/commit/1be9bb9d3527e0758350c4f7417a4228d8571440),\n\n\nIf an expression is used on ng-pattern (such as `ng-pattern=\"exp\"`) or on the\npattern attribute (something like on `pattern=\"{{ exp }}\"`) and the expression\nitself evaluates to a string then the validator will not parse the string as a\nliteral regular expression object (a value like `/abc/i`).  Instead, the entire\nstring will be created as the regular expression to test against. This means\nthat any expression flags will not be placed on the RegExp object. To get around\nthis limitation, use a regular expression object as the value for the expression.\n\n    //before\n    $scope.exp = '/abc/i';\n\n    //after\n    $scope.exp = /abc/i;\n\n\n- **ngModelOptions:** due to [adfc322b](https://github.com/angular/angular.js/commit/adfc322b04a58158fb9697e5b99aab9ca63c80bb),\n\n\nThis commit changes the API on `NgModelController`, both semantically and\nin terms of adding and renaming methods.\n\n* `$setViewValue(value)` -\nThis method still changes the `$viewValue` but does not immediately commit this\nchange through to the `$modelValue` as it did previously.\nNow the value is committed only when a trigger specified in an associated\n`ngModelOptions` directive occurs. If `ngModelOptions` also has a `debounce` delay\nspecified for the trigger then the change will also be debounced before being\ncommitted.\nIn most cases this should not have a significant impact on how `NgModelController`\nis used: If `updateOn` includes `default` then `$setViewValue` will trigger\na (potentially debounced) commit immediately.\n* `$cancelUpdate()` - is renamed to `$rollbackViewValue()` and has the same meaning,\nwhich is to revert the current `$viewValue` back to the `$lastCommittedViewValue`,\nto cancel any pending debounced updates and to re-render the input.\n\nTo migrate code that used `$cancelUpdate()` follow the example below:\n\nBefore:\n\n```js\n$scope.resetWithCancel = function (e) {\n  if (e.keyCode == 27) {\n    $scope.myForm.myInput1.$cancelUpdate();\n    $scope.myValue = '';\n  }\n};\n```\n\nAfter:\n\n```js\n$scope.resetWithCancel = function (e) {\n  if (e.keyCode == 27) {\n    $scope.myForm.myInput1.$rollbackViewValue();\n    $scope.myValue = '';\n  }\n}\n```\n\n- types date, time, datetime-local, month, week now always\n  require a `Date` object as model ([46bd6dc8](https://github.com/angular/angular.js/commit/46bd6dc88de252886d75426efc2ce8107a5134e9),\n   [#5864](https://github.com/angular/angular.js/issues/5864))\n\n\n\n\n\n\n## Scopes and Digests (`$scope`)\n\n- due to [8c6a8171](https://github.com/angular/angular.js/commit/8c6a8171f9bdaa5cdabc0cc3f7d3ce10af7b434d),\n  Scope#$id is now of type number rather than string. Since the\nid is primarily being used for debugging purposes this change should not affect\nanyone.\n\n\n- due to [82f45aee](https://github.com/angular/angular.js/commit/82f45aee5bd84d1cc53fb2e8f645d2263cdaacbc),\n  [#7445](https://github.com/angular/angular.js/issues/7445),\n  [#7523](https://github.com/angular/angular.js/issues/7523)\n  `$broadcast` and `$emit` will now reset the `currentScope` property of the event to\n  null once the event finished propagating. If any code depends on asynchronously accessing their\n  `currentScope` property, it should be migrated to use `targetScope` instead. All of these cases\n  should be considered programming bugs.\n\n\n\n\n\n## Server Requests (`$http`, `$resource`)\n- **$http:** due to [ad4336f9](https://github.com/angular/angular.js/commit/ad4336f9359a073e272930f8f9bcd36587a8648f),\n\n\nPreviously, it was possible to register a response interceptor like so:\n\n```js\n// register the interceptor as a service\n$provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n  return function(promise) {\n    return promise.then(function(response) {\n      // do something on success\n      return response;\n    }, function(response) {\n      // do something on error\n      if (canRecover(response)) {\n        return responseOrNewPromise\n      }\n      return $q.reject(response);\n    });\n  }\n});\n\n$httpProvider.responseInterceptors.push('myHttpInterceptor');\n```\n\nNow, one must use the newer API introduced in v1.1.4 (4ae46814), like so:\n\n```js\n$provide.factory('myHttpInterceptor', function($q) {\n  return {\n    response: function(response) {\n      // do something on success\n      return response;\n    },\n    responseError: function(response) {\n      // do something on error\n      if (canRecover(response)) {\n        return responseOrNewPromise\n      }\n      return $q.reject(response);\n    }\n  };\n});\n\n$httpProvider.interceptors.push('myHttpInterceptor');\n```\n\nMore details on the new interceptors API (which has been around as of v1.1.4) can be found at\n{@link $http#interceptors interceptors}\n\n\n\n- **$httpBackend:** due to [6680b7b9](https://github.com/angular/angular.js/commit/6680b7b97c0326a80bdccaf0a35031e4af641e0e), the JSONP behavior for erroneous and empty responses changed:\n    Previously, a JSONP response was regarded as erroneous if it was empty. Now Angular is listening to the\n    correct events to detect errors, i.e. even empty responses can be successful.\n\n\n- **$resource:** due to [d3c50c84](https://github.com/angular/angular.js/commit/d3c50c845671f0f8bcc3f7842df9e2fb1d1b1c40),\n\n  If you expected `$resource` to strip these types of properties before,\n  you will have to manually do this yourself now.\n\n\n\n\n\n## Modules and Injector (`$inject`)\n\n- due to [c0b4e2db](https://github.com/angular/angular.js/commit/c0b4e2db9cbc8bc3164cedc4646145d3ab72536e),\n\nPreviously, config blocks would be able to control behaviour of provider registration, due to being\ninvoked prior to provider registration. Now, provider registration always occurs prior to configuration\nfor a given module, and therefore config blocks are not able to have any control over a providers\nregistration.\n\n**Example**:\n\nPreviously, the following:\n\n```js\nangular.module('foo', [])\n  .provider('$rootProvider', function() {\n    this.$get = function() { ... }\n  })\n  .config(function($rootProvider) {\n    $rootProvider.dependentMode = \"B\";\n  })\n  .provider('$dependentProvider', function($rootProvider) {\n     if ($rootProvider.dependentMode === \"A\") {\n       this.$get = function() {\n        // Special mode!\n       }\n     } else {\n       this.$get = function() {\n         // something else\n       }\n    }\n  });\n```\n\nwould have \"worked\", meaning behaviour of the config block between the registration of \"$rootProvider\"\nand \"$dependentProvider\" would have actually accomplished something and changed the behaviour of the\napp. This is no longer possible within a single module.\n\n\n\n\n\n## Animation (`ngAnimate`)\n\n\n- due to [1cb8584e](https://github.com/angular/angular.js/commit/1cb8584e8490ecdb1b410a8846c4478c6c2c0e53),\n`$animate` will no longer default the after parameter to the last element of the parent\ncontainer. Instead, when after is not specified, the new element will be inserted as the\nfirst child of the parent container.\n\nTo update existing code, change all instances of `$animate.enter()` or `$animate.move()` from:\n\n`$animate.enter(element, parent);`\n\nto:\n\n`$animate.enter(element, parent, angular.element(parent[0].lastChild));`\n\n\n\n- due to [1bebe36a](https://github.com/angular/angular.js/commit/1bebe36aa938890d61188762ed618b1b5e193634),\n\n  Any class-based animation code that makes use of transitions\nand uses the setup CSS classes (such as class-add and class-remove) must now\nprovide a empty transition value to ensure that its styling is applied right\naway. In other words if your animation code is expecting any styling to be\napplied that is defined in the setup class then it will not be applied\n\"instantly\" unless a `transition:0s none` value is present in the styling\nfor that CSS class. This situation is only the case if a transition is already\npresent on the base CSS class once the animation kicks off.\n\nBefore:\n\n    .animated.my-class-add {\n      opacity:0;\n      transition:0.5s linear all;\n    }\n    .animated.my-class-add.my-class-add-active {\n      opacity:1;\n    }\n\nAfter:\n\n    .animated.my-class-add {\n      transition:0s linear all;\n      opacity:0;\n    }\n    .animated.my-class-add.my-class-add-active {\n      transition:0.5s linear all;\n      opacity:1;\n    }\n\nPlease view the documentation for ngAnimate for more info.\n\n\n## Testing\n\n- due to [85880a64](https://github.com/angular/angular.js/commit/85880a64900fa22a61feb926bf52de0965332ca5), some deprecated features of\nProtractor tests no longer work.\n\n`by.binding(descriptor)` no longer allows using the surrounding interpolation\nmarkers in the descriptor (the default interpolation markers are `{{}}`).\nPreviously, these were optional.\n\nBefore:\n\n    var el = element(by.binding('{{foo}}'));\n\nAfter:\n\n    var el = element(by.binding('foo'));\n\nPrefixes `ng_` and `x-ng-` are no longer allowed for models. Use `ng-model`.\n\n`by.repeater` cannot find elements by row and column which are not children of\nthe row. For example, if your template is\n\n    <div ng-repeat=\"foo in foos\">{{foo.name}}</div>\n\nBefore:\n\n    var el = element(by.repeater('foo in foos').row(2).column('foo.name'))\n\nAfter:\n\nYou may either enclose `{{foo.name}}` in a child element\n\n    <div ng-repeat=\"foo in foos\"><span>{{foo.name}}</span></div>\n\nor simply use:\n\n    var el = element(by.repeater('foo in foos').row(2))\n\n\n## Internet Explorer 8\n\n- due to [eaa1d00b](https://github.com/angular/angular.js/commit/eaa1d00b24008f590b95ad099241b4003688cdda),\n  As communicated before, IE8 is no longer supported.\n\n\n\n\n\n\n# Migrating from 1.0 to 1.2\n\n\n<div class=\"alert alert-warning\">\n<p>**Note:** AngularJS versions 1.1.x are considered \"experimental\" with breaking changes between minor releases.\nVersion 1.2 is the result of several versions on the 1.1 branch, and has a stable API.</p>\n\n<p>If you have an application on 1.1 and want to migrate it to 1.2, everything in the guide\nbelow should still apply, but you may want to consult the\n[changelog](https://github.com/angular/angular.js/blob/master/CHANGELOG.md) as well.</p>\n</div>\n\n<ul class=\"nav nav-list\">\n  <li class=\"nav-header\">Summary of Breaking Changes</li>\n  <li>{@link guide/migration#ngroute-has-been-moved-into-its-own-module ngRoute has been moved into its own module}</li>\n  <li>{@link guide/migration#templates-no-longer-automatically-unwrap-promises Templates no longer automatically unwrap promises}</li>\n  <li>{@link guide/migration#syntax-for-named-wildcard-parameters-changed-in-route- Syntax for named wildcard parameters changed in <code>$route</code>}</li>\n  <li>{@link guide/migration#you-can-only-bind-one-expression-to-src-ng-src-or-action- You can only bind one expression to <code>*[src]</code>, <code>*[ng-src]</code> or <code>action</code>}</li>\n  <li>{@link guide/migration#interpolations-inside-dom-event-handlers-are-now-disallowed Interpolations inside DOM event handlers are now disallowed}</li>\n  <li>{@link guide/migration#directives-cannot-end-with-start-or-end Directives cannot end with -start or -end}</li>\n  <li>{@link guide/migration#in-q-promise-always-has-been-renamed-promise-finally In $q, promise.always has been renamed promise.finally}</li>\n  <li>{@link guide/migration#ngmobile-is-now-ngtouch ngMobile is now ngTouch}</li>\n  <li>{@link guide/migration#resource-then-has-been-removed resource.$then has been removed}</li>\n  <li>{@link guide/migration#resource-methods-return-the-promise Resource methods return the promise}</li>\n  <li>{@link guide/migration#resource-promises-are-resolved-with-the-resource-instance Resource promises are resolved with the resource instance}</li>\n  <li>{@link guide/migration#-location-search-supports-multiple-keys $location.search supports multiple keys}</li>\n  <li>{@link guide/migration#ngbindhtmlunsafe-has-been-removed-and-replaced-by-ngbindhtml ngBindHtmlUnsafe has been removed and replaced by ngBindHtml}</li>\n  <li>{@link guide/migration#form-names-that-are-expressions-are-evaluated Form names that are expressions are evaluated}</li>\n  <li>{@link guide/migration#hasownproperty-disallowed-as-an-input-name hasOwnProperty disallowed as an input name}</li>\n  <li>{@link guide/migration#directives-order-of-postlink-functions-reversed Directives: Order of postLink functions reversed}</li>\n  <li>{@link guide/migration#directive-priority Directive priority}</li>\n  <li>{@link guide/migration#ngscenario ngScenario}</li>\n  <li>{@link guide/migration#nginclude-and-ngview-replace-its-entire-element-on-update ngInclude and ngView replace its entire element on update}</li>\n  <li>{@link guide/migration#urls-are-now-sanitized-against-a-whitelist URLs are now sanitized against a whitelist}</li>\n  <li>{@link guide/migration#isolate-scope-only-exposed-to-directives-with-scope-property Isolate scope only exposed to directives with <code>scope</code> property}</li>\n  <li>{@link guide/migration#change-to-interpolation-priority Change to interpolation priority}</li>\n  <li>{@link guide/migration#underscore-prefixed-suffixed-properties-are-non-bindable Underscore-prefixed/suffixed properties are non-bindable}</li>\n  <li>{@link guide/migration#you-cannot-bind-to-select-multiple- You cannot bind to select[multiple]}</li>\n  <li>{@link guide/migration#uncommon-region-specific-local-files-were-removed-from-i18n Uncommon region-specific local files were removed from i18n}</li>\n  <li>{@link guide/migration#services-can-now-return-functions Services can now return functions}</li>\n</ul>\n\n\n## ngRoute has been moved into its own module\n\nJust like `ngResource`, `ngRoute` is now its own module.\n\nApplications that use `$route`, `ngView`, and/or `$routeParams` will now need to load an\n`angular-route.js` file and have their application's module dependency on the `ngRoute` module.\n\nBefore:\n\n```html\n<script src=\"angular.js\"></script>\n```\n\n```javascript\nvar myApp = angular.module('myApp', ['someOtherModule']);\n```\n\nAfter:\n\n```html\n<script src=\"angular.js\"></script>\n<script src=\"angular-route.js\"></script>\n```\n\n```javascript\nvar myApp = angular.module('myApp', ['ngRoute', 'someOtherModule']);\n```\n\nSee [5599b55b](https://github.com/angular/angular.js/commit/5599b55b04788c2e327d7551a4a699d75516dd21).\n\n\n## Templates no longer automatically unwrap promises\n\n`$parse` and templates in general will no longer automatically unwrap promises.\n\nBefore:\n\n```javascript\n$scope.foo = $http({method: 'GET', url: '/someUrl'});\n```\n\n```html\n<p>{{foo}}</p>\n```\n\nAfter:\n\n```javascript\n$http({method: 'GET', url: '/someUrl'})\n  .success(function(data) {\n    $scope.foo = data;\n  });\n```\n\n```html\n<p>{{foo}}</p>\n```\n\nThis feature has been deprecated. If absolutely needed, it can be reenabled for now via the\n`$parseProvider.unwrapPromises(true)` API.\n\nSee [5dc35b52](https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577),\n[b6a37d11](https://github.com/angular/angular.js/commit/b6a37d112b3e1478f4d14a5f82faabf700443748).\n\n\n## Syntax for named wildcard parameters changed in `$route`\n\nTo migrate the code, follow the example below. Here, `*highlight` becomes `:highlight*`\n\nBefore:\n\n```javascript\n$routeProvider.when('/Book1/:book/Chapter/:chapter/*highlight/edit',\n          {controller: noop, templateUrl: 'Chapter.html'});\n```\n\nAfter:\n\n```javascript\n$routeProvider.when('/Book1/:book/Chapter/:chapter/:highlight*/edit',\n        {controller: noop, templateUrl: 'Chapter.html'});\n```\n\nSee [04cebcc1](https://github.com/angular/angular.js/commit/04cebcc133c8b433a3ac5f72ed19f3631778142b).\n\n\n## You can only bind one expression to `*[src]`, `*[ng-src]` or `action`\n\nWith the exception of `<a>` and `<img>` elements, you cannot bind more than one expression to the\n`src` or `action` attribute of elements.\n\nThis is one of several improvements to security introduces by Angular 1.2.\n\nConcatenating expressions makes it hard to understand whether some combination of concatenated\nvalues are unsafe to use and potentially subject to XSS vulnerabilities. To simplify the task of\nauditing for XSS issues, we now require that a single expression be used for `*[src/ng-src]`\nbindings such as bindings for `iframe[src]`, `object[src]`, etc. In addition, this requirement is\nenforced for `form` tags with `action` attributes.\n\n<table class=\"table table-bordered code-table\">\n<thead>\n<tr>\n  <th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>&lt;img src=\"{{a}}/{{b}}\"&gt;</code></td>\n  <td class=\"success\">ok</td>\n</tr>\n<tr>\n  <td><code>&lt;iframe src=\"{{a}}/{{b}}\"&gt;&lt;/iframe&gt;</code></td>\n  <td class=\"error\">bad</td>\n</tr>\n<tr>\n  <td><code>&lt;iframe src=\"{{a}}\"&gt;&lt;/iframe&gt;</code></td>\n  <td class=\"success\">ok</td>\n</tr>\n</tbody>\n</table>\n\n\nTo migrate your code, you can combine multiple expressions using a method attached to your scope.\n\nBefore:\n\n```javascript\nscope.baseUrl = 'page';\nscope.a = 1;\nscope.b = 2;\n```\n\n```html\n<!-- Are a and b properly escaped here? Is baseUrl controlled by user? -->\n<iframe src=\"{{baseUrl}}?a={{a}&b={{b}}\">\n```\n\nAfter:\n\n```javascript\nvar baseUrl = \"page\";\nscope.getIframeSrc = function() {\n\n  // One should think about their particular case and sanitize accordingly\n  var qs = [\"a\", \"b\"].map(function(value, name) {\n      return encodeURIComponent(name) + \"=\" +\n             encodeURIComponent(value);\n    }).join(\"&\");\n\n  // `baseUrl` isn't exposed to a user's control, so we don't have to worry about escaping it.\n  return baseUrl + \"?\" + qs;\n};\n```\n\n```html\n<iframe src=\"{{getIframeSrc()}}\">\n```\n\nSee [38deedd6](https://github.com/angular/angular.js/commit/38deedd6e3d806eb8262bb43f26d47245f6c2739).\n\n\n## Interpolations inside DOM event handlers are now disallowed\n\nDOM event handlers execute arbitrary Javascript code. Using an interpolation for such handlers\nmeans that the interpolated value is a JS string that is evaluated. Storing or generating such\nstrings is error prone and leads to XSS vulnerabilities. On the other hand, `ngClick` and other\nAngular specific event handlers evaluate Angular expressions in non-window (Scope) context which\nmakes them much safer.\n\nTo migrate the code follow the example below:\n\nBefore:\n\n```\nJS:   scope.foo = 'alert(1)';\nHTML: <div onclick=\"{{foo}}\">\n```\n\nAfter:\n\n```\nJS:   scope.foo = function() { alert(1); }\nHTML: <div ng-click=\"foo()\">\n```\n\nSee [39841f2e](https://github.com/angular/angular.js/commit/39841f2ec9b17b3b2920fd1eb548d444251f4f56).\n\n\n## Directives cannot end with -start or -end\n\nThis change was necessary to enable multi-element directives. The best fix is to rename existing\ndirectives so that they don't end with these suffixes.\n\nSee [e46100f7](https://github.com/angular/angular.js/commit/e46100f7097d9a8f174bdb9e15d4c6098395c3f2).\n\n\n## In $q, promise.always has been renamed promise.finally\n\nThe reason for this change is to align `$q` with the [Q promise\nlibrary](https://github.com/kriskowal/q), despite the fact that this makes it a bit more difficult\nto use with non-ES5 browsers, like IE8.\n\n`finally` also goes well together with the `catch` API that was added to `$q` recently and is part\nof the [DOM promises standard](http://dom.spec.whatwg.org/).\n\nTo migrate the code follow the example below.\n\nBefore:\n\n```javascript\n$http.get('/foo').always(doSomething);\n```\n\nAfter:\n\n```javascript\n$http.get('/foo').finally(doSomething);\n```\n\nOr for IE8-compatible code:\n\n```javascript\n$http.get('/foo')['finally'](doSomething);\n```\n\nSee [f078762d](https://github.com/angular/angular.js/commit/f078762d48d0d5d9796dcdf2cb0241198677582c).\n\n\n## ngMobile is now ngTouch\n\nMany touch-enabled devices are not mobile devices, so we decided to rename this module to better\nreflect its concerns.\n\nTo migrate, replace all references to `ngMobile` with `ngTouch` and `angular-mobile.js` with\n`angular-touch.js`.\n\nSee [94ec84e7](https://github.com/angular/angular.js/commit/94ec84e7b9c89358dc00e4039009af9e287bbd05).\n\n\n## resource.$then has been removed\n\nResource instances do not have a `$then` function anymore. Use the `$promise.then` instead.\n\nBefore:\n\n```javascript\nResource.query().$then(callback);\n```\n\nAfter:\n\n```javascript\nResource.query().$promise.then(callback);\n```\n\nSee [05772e15](https://github.com/angular/angular.js/commit/05772e15fbecfdc63d4977e2e8839d8b95d6a92d).\n\n\n## Resource methods return the promise\n\nMethods of a resource instance return the promise rather than the instance itself.\n\nBefore:\n\n```javascript\nresource.$save().chaining = true;\n```\n\nAfter:\n\n```javascript\nresource.$save();\nresource.chaining = true;\n```\n\nSee [05772e15](https://github.com/angular/angular.js/commit/05772e15fbecfdc63d4977e2e8839d8b95d6a92d).\n\n\n## Resource promises are resolved with the resource instance\n\nOn success, the resource promise is resolved with the resource instance rather than HTTP response object.\n\nUse interceptor API to access the HTTP response object.\n\nBefore:\n\n```javascript\nResource.query().$then(function(response) {...});\n```\n\nAfter:\n\n```javascript\nvar Resource = $resource('/url', {}, {\n  get: {\n    method: 'get',\n    interceptor: {\n      response: function(response) {\n        // expose response\n        return response;\n      }\n    }\n  }\n});\n```\n\nSee [05772e15](https://github.com/angular/angular.js/commit/05772e15fbecfdc63d4977e2e8839d8b95d6a92d).\n\n\n## $location.search supports multiple keys\n\n{@link ng.$location#search `$location.search`} now supports multiple keys with the\nsame value provided that the values are stored in an array.\n\nBefore this change:\n\n* `parseKeyValue` only took the last key overwriting all the previous keys.\n* `toKeyValue` joined the keys together in a comma delimited string.\n\nThis was deemed buggy behavior. If your server relied on this behavior then either the server\nshould be fixed, or a simple serialization of the array should be done on the client before\npassing it to `$location`.\n\nSee [80739409](https://github.com/angular/angular.js/commit/807394095b991357225a03d5fed81fea5c9a1abe).\n\n\n## ngBindHtmlUnsafe has been removed and replaced by ngBindHtml\n\n`ngBindHtml` provides `ngBindHtmlUnsafe` like\nbehavior (evaluate an expression and innerHTML the result into the DOM) when bound to the result\nof `$sce.trustAsHtml(string)`. When bound to a plain string, the string is sanitized via\n`$sanitize` before being innerHTML'd. If the `$sanitize` service isn't available (`ngSanitize`\nmodule is not loaded) and the bound expression evaluates to a value that is not trusted an\nexception is thrown.\n\nWhen using this directive you can either include `ngSanitize` in your module's dependencies (See the\nexample at the {@link ngBindHtml} reference) or use the {@link $sce} service to set the value as\ntrusted.\n\nSee [dae69473](https://github.com/angular/angular.js/commit/dae694739b9581bea5dbc53522ec00d87b26ae55).\n\n\n## Form names that are expressions are evaluated\n\nIf you have form names that will evaluate as an expression:\n\n```\n<form name=\"ctrl.form\">\n```\n\nAnd if you are accessing the form from your controller:\n\nBefore:\n\n```javascript\nfunction($scope) {\n  $scope['ctrl.form'] // form controller instance\n}\n```\n\nAfter:\n\n```javascript\nfunction($scope) {\n  $scope.ctrl.form // form controller instance\n}\n```\n\nThis makes it possible to access a form from a controller using the new \"controller as\" syntax.\nSupporting the previous behavior offers no benefit.\n\nSee [8ea802a1](https://github.com/angular/angular.js/commit/8ea802a1d23ad8ecacab892a3a451a308d9c39d7).\n\n\n## hasOwnProperty disallowed as an input name\n\nInputs with name equal to `hasOwnProperty` are not allowed inside form or ngForm directives.\n\nBefore, inputs whose name was \"hasOwnProperty\" were quietly ignored and not added to the scope.\nNow a badname exception is thrown. Using \"hasOwnProperty\" for an input name would be very unusual\nand bad practice. To migrate, change your input name.\n\nSee [7a586e5c](https://github.com/angular/angular.js/commit/7a586e5c19f3d1ecc3fefef084ce992072ee7f60).\n\n\n## Directives: Order of postLink functions reversed\n\nThe order of postLink fn is now mirror opposite of the order in which corresponding preLinking and compile functions execute.\n\nPreviously the compile/link fns executed in order, sorted by priority:\n\n<table class=\"table table-bordered table-striped code-table\">\n<thead>\n<tr>\n  <th>#</th>\n  <th>Step</th>\n  <th align=\"center\">Old Sort Order</th>\n  <th align=\"center\">New Sort Order</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>1</td>\n  <td>Compile Fns</td>\n  <td align=\"center\" colspan=\"2\">High → Low</td>\n</tr>\n<tr>\n  <td>2</td>\n  <td colspan=\"3\">Compile child nodes</td>\n</tr>\n<tr>\n  <td>3</td>\n  <td>PreLink Fns</td>\n  <td align=\"center\" colspan=\"2\">High → Low</td>\n</tr>\n<tr>\n  <td>4</td>\n  <td colspan=\"3\">Link child nodes</td>\n</tr>\n<tr>\n  <td>5</td>\n  <td>PostLink Fns</td>\n  <td align=\"center\">High → Low</td>\n  <td align=\"center\">**Low → High**</td>\n</tr>\n</tbody>\n</table>\n\n<small>\"High → Low\" here refers to the `priority` option of a directive.</small>\n\nVery few directives in practice rely on the order of postLinking functions (unlike on the order\nof compile functions), so in the rare case of this change affecting an existing directive, it might\nbe necessary to convert it to a preLinking function or give it negative priority.\n\nYou can look at [the diff of this\ncommit](https://github.com/angular/angular.js/commit/31f190d4d53921d32253ba80d9ebe57d6c1de82b) to see how an internal\nattribute interpolation directive was adjusted.\n\nSee [31f190d4](https://github.com/angular/angular.js/commit/31f190d4d53921d32253ba80d9ebe57d6c1de82b).\n\n\n## Directive priority\n\nthe priority of ngRepeat, ngSwitchWhen, ngIf, ngInclude and ngView has changed. This could affect directives that explicitly specify their priority.\n\nIn order to make ngRepeat, ngSwitchWhen, ngIf, ngInclude and ngView work together in all common scenarios their directives are being adjusted to achieve the following precedence:\n\n\nDirective        | Old Priority | New Priority\n-----------------|--------------|-------------\nngRepeat         | 1000         | 1000\nngSwitchWhen     | 500          | 800\nngIf             | 1000         | 600\nngInclude        | 1000         | 400\nngView           | 1000         | 400\n\nSee [b7af76b4](https://github.com/angular/angular.js/commit/b7af76b4c5aa77648cc1bfd49935b48583419023).\n\n\n## ngScenario\n\nbrowserTrigger now uses an eventData object instead of direct parameters for mouse events.\nTo migrate, place the `keys`,`x` and `y` parameters inside of an object and place that as the\nthird parameter for the browserTrigger function.\n\nSee [28f56a38](https://github.com/angular/angular.js/commit/28f56a383e9d1ff378e3568a3039e941c7ffb1d8).\n\n\n## ngInclude and ngView replace its entire element on update\n\nPreviously `ngInclude` and `ngView` only updated its element's content. Now these directives will\nrecreate the element every time a new content is included.\n\nThis ensures that a single rootElement for all the included contents always exists, which makes\ndefinition of css styles for animations much easier.\n\nSee [7d69d52a](https://github.com/angular/angular.js/commit/7d69d52acff8578e0f7d6fe57a6c45561a05b182),\n[aa2133ad](https://github.com/angular/angular.js/commit/aa2133ad818d2e5c27cbd3933061797096356c8a).\n\n\n## URLs are now sanitized against a whitelist\n\nA whitelist configured via `$compileProvider` can be used to configure what URLs are considered safe.\nBy default all common protocol prefixes are whitelisted including `data:` URIs with mime types `image/*`.\nThis change shouldn't impact apps that don't contain malicious image links.\n\nSee [1adf29af](https://github.com/angular/angular.js/commit/1adf29af13890d61286840177607edd552a9df97),\n[3e39ac7e](https://github.com/angular/angular.js/commit/3e39ac7e1b10d4812a44dad2f959a93361cd823b).\n\n\n## Isolate scope only exposed to directives with `scope` property\n\nIf you declare a scope option on a directive, that directive will have an\n[isolate scope](https://github.com/angular/angular.js/wiki/Understanding-Scopes). In Angular 1.0, if a\ndirective with an isolate scope is used on an element, all directives on that same element have access\nto the same isolate scope. For example, say we have the following directives:\n\n```\n// This directive declares an isolate scope.\n.directive('isolateScope', function() {\n  return {\n    scope: {},\n    link: function($scope) {\n      console.log('one = ' + $scope.$id);\n    }\n  };\n})\n\n// This directive does not.\n.directive('nonIsolateScope', function() {\n  return {\n    link: function($scope) {\n      console.log('two = ' + $scope.$id);\n    }\n  };\n});\n```\n\nNow what happens if we use both directives on the same element?\n\n```\n<div isolate-scope non-isolate-scope></div>\n```\n\nIn Angular 1.0, the nonIsolateScope directive will have access to the isolateScope directive’s scope. The\nlog statements will print the same id, because the scope is the same. But in Angular 1.2, the nonIsolateScope\nwill not use the same scope as isolateScope. Instead, it will inherit the parent scope. The log statements\nwill print different id’s.\n\nIf your code depends on the Angular 1.0 behavior (non-isolate directive needs to access state\nfrom within the isolate scope), change the isolate directive to use scope locals to pass these explicitly:\n\n**Before**\n\n```\n<input ng-model=\"$parent.value\" ng-isolate>\n\n.directive('ngIsolate', function() {\n  return {\n    scope: {},\n    template: '{{value}}'\n  };\n});\n```\n\n**After**\n\n```\n<input ng-model=\"value\" ng-isolate>\n\n.directive('ngIsolate', function() {\n  return {\n    scope: {value: '=ngModel'},\n    template: '{{value}}\n  };\n});\n```\n\nSee [909cabd3](https://github.com/angular/angular.js/commit/909cabd36d779598763cc358979ecd85bb40d4d7),\n[#1924](https://github.com/angular/angular.js/issues/1924) and\n[#2500](https://github.com/angular/angular.js/issues/2500).\n\n\n## Change to interpolation priority\n\nPreviously, the interpolation priority was `-100` in 1.2.0-rc.2, and `100` before 1.2.0-rc.2.\nBefore this change the binding was setup in the post-linking phase.\n\nNow the attribute interpolation (binding) executes as a directive with priority 100 and the\nbinding is set up in the pre-linking phase.\n\nSee [79223eae](https://github.com/angular/angular.js/commit/79223eae5022838893342c42dacad5eca83fabe8),\n[#4525](https://github.com/angular/angular.js/issues/4525),\n[#4528](https://github.com/angular/angular.js/issues/4528), and\n[#4649](https://github.com/angular/angular.js/issues/4649)\n\n## Underscore-prefixed/suffixed properties are non-bindable\n\n<div class=\"alert alert-info\">\n<p>**Reverted**: This breaking change has been reverted in 1.2.1, and so can be ignored if you're using **version 1.2.1 or higher**</p>\n</div>\n\nThis change introduces the notion of \"private\" properties (properties\nwhose names begin and/or end with an underscore) on the scope chain.\nThese properties will not be available to Angular expressions (i.e. {{\n}} interpolation in templates and strings passed to `$parse`)  They are\nfreely available to JavaScript code (as before).\n\n**Motivation**\n\nAngular expressions execute in a limited context. They do not have\ndirect access to the global scope, `window`, `document` or the Function\nconstructor. However, they have direct access to names/properties on\nthe scope chain. It has been a long standing best practice to keep\nsensitive APIs outside of the scope chain (in a closure or your\ncontroller.) That's easier said than done for two reasons:\n\n1. JavaScript does not have a notion of private properties so if you need\nsomeone on the scope chain for JavaScript use, you also expose it to\nAngular expressions\n2. The new `controller as` syntax that's now in increased usage exposes the\nentire controller on the scope chain greatly increasing the exposed surface.\n\nThough Angular expressions are written and controlled by the developer, they:\n\n1. Typically deal with user input\n2. Don't get the kind of test coverage that JavaScript code would\n\nThis commit provides a way, via a naming convention, to allow restricting properties from\ncontrollers/scopes. This means Angular expressions can access only those properties that\nare actually needed by the expressions.\n\nSee [3d6a89e8](https://github.com/angular/angular.js/commit/3d6a89e8888b14ae5cb5640464e12b7811853c7e).\n\n\n## You cannot bind to select[multiple]\n\nSwitching between `select[single]` and `select[multiple]` has always been odd due to browser quirks.\nThis feature never worked with two-way data-binding so it's not expected that anyone is using it.\n\nIf you are interested in properly adding this feature, please submit a pull request on Github.\n\nSee [d87fa004](https://github.com/angular/angular.js/commit/d87fa0042375b025b98c40bff05e5f42c00af114).\n\n\n## Uncommon region-specific local files were removed from i18n\n\nAngularJS uses the Google Closure library's locale files. The following locales were removed from\nClosure, so Angular is not able to continue to support them:\n\n`chr`, `cy`, `el-polyton`, `en-zz`, `fr-rw`, `fr-sn`, `fr-td`, `fr-tg`, `haw`, `it-ch`, `ln-cg`,\n`mo`, `ms-bn`, `nl-aw`, `nl-be`, `pt-ao`, `pt-gw`, `pt-mz`, `pt-st`, `ro-md`, `ru-md`, `ru-ua`,\n`sr-cyrl-ba`, `sr-cyrl-me`, `sr-cyrl`, `sr-latn-ba`, `sr-latn-me`, `sr-latn`, `sr-rs`, `sv-fi`,\n`sw-ke`, `ta-lk`, `tl-ph`, `ur-in`, `zh-hans-hk`, `zh-hans-mo`, `zh-hans-sg`, `zh-hans`,\n`zh-hant-hk`, `zh-hant-mo`, `zh-hant-tw`, `zh-hant`\n\nAlthough these locales were removed from the official AngularJS repository, you can continue to\nload and use your copy of the locale file provided that you maintain it yourself.\n\nSee [6382e21f](https://github.com/angular/angular.js/commit/6382e21fb28541a2484ac1a241d41cf9fbbe9d2c).\n\n## Services can now return functions\n\nPreviously, the service constructor only returned objects regardless of whether a function was returned.\n\nNow, `$injector.instantiate` (and thus `$provide.service`) behaves the same as the native\n`new` operator and allows functions to be returned as a service.\n\nIf using a JavaScript preprocessor it's quite possible when upgrading that services could start behaving incorrectly.\nMake sure your services return the correct type wanted.\n\n**Coffeescript example**\n\n```\nmyApp.service 'applicationSrvc', ->\n  @something = \"value\"\n  @someFunct = ->\n    \"something else\"\n```\n\npre 1.2 this service would return the whole object as the service.\n\npost 1.2 this service returns `someFunct` as the value of the service\n\nyou would need to change this services to\n\n```\nmyApp.service 'applicationSrvc', ->\n  @something = \"value\"\n  @someFunct = ->\n    \"something else\"\n  return\n```\n\nto continue to return the complete instance.\n\nSee [c22adbf1](https://github.com/angular/angular.js/commit/c22adbf160f32c1839fbb35382b7a8c6bcec2927).\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/migration.ngdoc",
        "id": "Migrating from Previous Versions",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Migrating from Previous Versions undefined.overview:Migrating from Previous Versions downloaded/angular/angular.js-master/docs/content/guide/migration.ngdoc",
        "sortOn": "Migrating from Previous Versions",
        "module": "Migrating from Previous Versions",
        "left": 36,
        "level": 1,
        "root": "Developer Guide",
        "right": 37
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Modules",
        "sortOrder": "320",
        "description": "\n\n# What is a Module?\n\nYou can think of a module as a container for the different parts of your app – controllers,\nservices, filters, directives, etc.\n\n# Why?\n\nMost applications have a main method that instantiates and wires together the different parts of\nthe application.\n\nAngular apps don't have a main method. Instead modules declaratively specify how an application\nshould be bootstrapped. There are several advantages to this approach:\n\n  * The declarative process is easier to understand.\n  * You can package code as reusable modules.\n  * The modules can be loaded in any order (or even in parallel) because modules delay execution.\n  * Unit tests only have to load relevant modules, which keeps them fast.\n  * End-to-end tests can use modules to override configuration.\n\n\n# The Basics\n\nI'm in a hurry. How do I get a Hello World module working?\n\n<example ng-app-included=\"true\">\n  <file name=\"index.html\">\n    <div ng-app=\"myApp\">\n      <div>\n        {{ 'World' | greet }}\n      </div>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    // declare a module\n    var myAppModule = angular.module('myApp', []);\n\n    // configure the module.\n    // in this example we will create a greeting filter\n    myAppModule.filter('greet', function() {\n     return function(name) {\n        return 'Hello, ' + name + '!';\n      };\n    });\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should add Hello to the name', function() {\n      expect(element(by.binding(\"'World' | greet\")).getText()).toEqual('Hello, World!');\n    });\n  </file>\n</example>\n\nImportant things to notice:\n\n  * The {@link angular.Module Module} API\n  * The reference to `myApp` module in `<div ng-app=\"myApp\">`.\n    This is what bootstraps the app using your module.\n  * The empty array in `angular.module('myApp', [])`.\n    This array is the list of modules `myApp` depends on.\n\n\n# Recommended Setup\n\nWhile the example above is simple, it will not scale to large applications. Instead we recommend\nthat you break your application to multiple modules like this:\n\n  * A module for each feature\n  * A module for each reusable component (especially directives and filters)\n  * And an application level module which depends on the above modules and contains any\n    initialization code.\n\nWe've also\n[written a document](http://blog.angularjs.org/2014/02/an-angularjs-style-guide-and-best.html)\non how we organize large apps at Google.\n\nThe above is a suggestion. Tailor it to your needs.\n\n<example module='xmpl'>\n  <file name=\"index.html\">\n    <div ng-controller=\"XmplController\">\n      {{ greeting }}\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.module('xmpl.service', [])\n\n      .value('greeter', {\n        salutation: 'Hello',\n        localize: function(localization) {\n          this.salutation = localization.salutation;\n        },\n        greet: function(name) {\n          return this.salutation + ' ' + name + '!';\n        }\n      })\n\n      .value('user', {\n        load: function(name) {\n          this.name = name;\n        }\n      });\n\n    angular.module('xmpl.directive', []);\n\n    angular.module('xmpl.filter', []);\n\n    angular.module('xmpl', ['xmpl.service', 'xmpl.directive', 'xmpl.filter'])\n\n      .run(function(greeter, user) {\n        // This is effectively part of the main method initialization code\n        greeter.localize({\n          salutation: 'Bonjour'\n        });\n        user.load('World');\n      })\n\n      .controller('XmplController', function($scope, greeter, user){\n        $scope.greeting = greeter.greet(user.name);\n      });\n\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should add Hello to the name', function() {\n      expect(element(by.binding(\"greeting\")).getText()).toEqual('Bonjour World!');\n    });\n  </file>\n\n</example>\n\n\n\n# Module Loading & Dependencies\n\nA module is a collection of configuration and run blocks which get applied to the application\nduring the bootstrap process. In its simplest form the module consist of a collection of two kinds\nof blocks:\n\n  1. **Configuration blocks** - get executed during the provider registrations and configuration\n    phase. Only providers and constants can be injected into configuration blocks. This is to\n    prevent accidental instantiation of services before they have been fully configured.\n  2. **Run blocks** - get executed after the injector is created and are used to kickstart the\n    application. Only instances and constants can be injected into run blocks. This is to prevent\n    further system configuration during application run time.\n\n```js\nangular.module('myModule', []).\n  config(function(injectables) { // provider-injector\n    // This is an example of config block.\n    // You can have as many of these as you want.\n    // You can only inject Providers (not instances)\n    // into config blocks.\n  }).\n  run(function(injectables) { // instance-injector\n    // This is an example of a run block.\n    // You can have as many of these as you want.\n    // You can only inject instances (not Providers)\n    // into run blocks\n  });\n```\n\n## Configuration Blocks\n\nThere are some convenience methods on the module which are equivalent to the `config` block. For\nexample:\n\n```js\nangular.module('myModule', []).\n  value('a', 123).\n  factory('a', function() { return 123; }).\n  directive('directiveName', ...).\n  filter('filterName', ...);\n\n// is same as\n\nangular.module('myModule', []).\n  config(function($provide, $compileProvider, $filterProvider) {\n    $provide.value('a', 123);\n    $provide.factory('a', function() { return 123; });\n    $compileProvider.directive('directiveName', ...);\n    $filterProvider.register('filterName', ...);\n  });\n```\n\n<div class=\"alert alert-info\">\nWhen bootstrapping, first Angular applies all constant definitions.\nThen Angular applies configuration blocks in the same order they were registered.\n</div>\n\n## Run Blocks\n\nRun blocks are the closest thing in Angular to the main method. A run block is the code which\nneeds to run to kickstart the application. It is executed after all of the services have been\nconfigured and the injector has been created. Run blocks typically contain code which is hard\nto unit-test, and for this reason should be declared in isolated modules, so that they can be\nignored in the unit-tests.\n\n## Dependencies\n\nModules can list other modules as their dependencies. Depending on a module implies that the required\nmodule needs to be loaded before the requiring module is loaded. In other words the configuration\nblocks of the required modules execute before the configuration blocks of the requiring module.\nThe same is true for the run blocks. Each module can only be loaded once, even if multiple other\nmodules require it.\n\n## Asynchronous Loading\n\nModules are a way of managing $injector configuration, and have nothing to do with loading of\nscripts into a VM. There are existing projects which deal with script loading, which may be used\nwith Angular. Because modules do nothing at load time they can be loaded into the VM in any order\nand thus script loaders can take advantage of this property and parallelize the loading process.\n\n## Creation versus Retrieval\n\nBeware that using `angular.module('myModule', [])` will create the module `myModule` and overwrite any\nexisting module named `myModule`. Use `angular.module('myModule')` to retrieve an existing module.\n\n```js\nvar myModule = angular.module('myModule', []);\n\n// add some directives and services\nmyModule.service('myService', ...);\nmyModule.directive('myDirective', ...);\n\n// overwrites both myService and myDirective by creating a new module\nvar myModule = angular.module('myModule', []);\n\n// throws an error because myOtherModule has yet to be defined\nvar myModule = angular.module('myOtherModule');\n```\n\n# Unit Testing\n\nA unit test is a way of instantiating a subset of an application to apply stimulus to it.\nSmall, structured modules help keep unit tests concise and focused.\n\n<div class=\"did you know...\">\nEach module can only be loaded once per injector.\nUsually an Angular app has only one injector and modules are only loaded once.\nEach test has its own injector and modules are loaded multiple times.\n</div>\n\nIn all of these examples we are going to assume this module definition:\n\n```js\nangular.module('greetMod', []).\n\n  factory('alert', function($window) {\n    return function(text) {\n      $window.alert(text);\n    }\n  }).\n\n  value('salutation', 'Hello').\n\n  factory('greet', function(alert, salutation) {\n    return function(name) {\n      alert(salutation + ' ' + name + '!');\n    }\n  });\n```\n\nLet's write some tests to show how to override configuration in tests.\n\n```js\ndescribe('myApp', function() {\n  // load application module (`greetMod`) then load a special\n  // test module which overrides `$window` with a mock version,\n  // so that calling `window.alert()` will not block the test\n  // runner with a real alert box.\n  beforeEach(module('greetMod', function($provide) {\n    $provide.value('$window', {\n      alert: jasmine.createSpy('alert')\n    });\n  }));\n\n  // inject() will create the injector and inject the `greet` and\n  // `$window` into the tests.\n  it('should alert on $window', inject(function(greet, $window) {\n    greet('World');\n    expect($window.alert).toHaveBeenCalledWith('Hello World!');\n  }));\n\n  // this is another way of overriding configuration in the\n  // tests using inline `module` and `inject` methods.\n  it('should alert using the alert service', function() {\n    var alertSpy = jasmine.createSpy('alert');\n    module(function($provide) {\n      $provide.value('alert', alertSpy);\n    });\n    inject(function(greet) {\n      greet('World');\n      expect(alertSpy).toHaveBeenCalledWith('Hello World!');\n    });\n  });\n});\n```\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/module.ngdoc",
        "id": "Modules",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Modules undefined.overview:Modules downloaded/angular/angular.js-master/docs/content/guide/module.ngdoc",
        "sortOn": "Modules",
        "module": "Modules",
        "left": 38,
        "level": 1,
        "root": "Developer Guide",
        "right": 39
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Running in Production",
        "sortOrder": "540",
        "description": "\n\n# Running an AngularJS App in Production\n\nThere are a few things you might consider when running your AngularJS application in production.\n\n\n## Disabling Debug Data\n\nBy default AngularJS attaches information about binding and scopes to DOM nodes,\nand adds CSS classes to data-bound elements:\n\n- As a result of `ngBind`, `ngBindHtml` or `{{...}}` interpolations, binding data and CSS class\n`ng-binding` are attached to the corresponding element.\n\n- Where the compiler has created a new scope, the scope and either `ng-scope` or `ng-isolated-scope`\nCSS class are attached to the corresponding element. These scope references can then be accessed via\n`element.scope()` and `element.isolateScope()`.\n\nTools like [Protractor](https://github.com/angular/protractor) and\n[Batarang](https://github.com/angular/angularjs-batarang) need this information to run,\nbut you can disable this in production for a significant performance boost with:\n\n```js\nmyApp.config(['$compileProvider', function ($compileProvider) {\n  $compileProvider.debugInfoEnabled(false);\n}]);\n```\n\nIf you wish to debug an application with this information then you should open up a debug\nconsole in the browser then call this method directly in this console:\n\n```js\nangular.reloadWithDebugInfo();\n```\n\nThe page should reload and the debug information should now be available.\n\nFor more see the docs pages on {@link ng.$compileProvider#debugInfoEnabled `$compileProvider`}\nand {@link angular.reloadWithDebugInfo `angular.reloadWithDebugInfo`}.\n\n## Strict DI Mode\n\nUsing strict di mode in your production application will throw errors when a injectable\nfunction is not\n{@link di#dependency-annotation annotated explicitly}. Strict di mode is intended to help\nyou make sure that your code will work when minified. However, it also will force you to\nmake sure that your injectable functions are explicitly annotated which will improve\nangular's performance when injecting dependencies in your injectable functions because it\ndoesn't have to dynamically discover a function's dependencies. It is recommended to\nautomate the explicit annotation via a tool like\n[ng-annotate](https://github.com/olov/ng-annotate) when you deploy to production (and enable\nstrict di mode)\n\nTo enable strict di mode, you have two options:\n\n```html\n<div ng-app=\"myApp\" ng-strict-di>\n  <!-- your app here -->\n</div>\n```\n\nor\n\n```js\nangular.bootstrap(document, ['myApp'], {\n  strictDi: true\n});\n```\n\nFor more information, see the\n{@link di#using-strict-dependency-injection DI Guide}.\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/production.ngdoc",
        "id": "Running in Production",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Running in Production undefined.overview:Running in Production downloaded/angular/angular.js-master/docs/content/guide/production.ngdoc",
        "sortOn": "Running in Production",
        "module": "Running in Production",
        "left": 40,
        "level": 1,
        "root": "Developer Guide",
        "right": 41
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Providers",
        "sortOrder": "340",
        "description": "\n\n# Providers\n\nEach web application you build is composed of objects that collaborate to get stuff done. These\nobjects need to be instantiated and wired together for the app to work. In Angular apps most of\nthese objects are instantiated and wired together automatically by the {@link auto.$injector\ninjector service}.\n\nThe injector creates two types of objects, **services** and **specialized objects**.\n\nServices are objects whose API is defined by the developer writing the service.\n\nSpecialized objects conform to a specific Angular framework API. These objects are one of\ncontrollers, directives, filters or animations.\n\nThe injector needs to know how to create these objects. You tell it by registering a \"recipe\" for\ncreating your object with the injector. There are five recipe types.\n\nThe most verbose, but also the most comprehensive one is a Provider recipe. The remaining four\nrecipe types — Value, Factory, Service and Constant — are just syntactic sugar on top of a provider\nrecipe.\n\nLet's take a look at the different scenarios for creating and using services via various recipe\ntypes. We'll start with the simplest case possible where various places in your code need a shared\nstring and we'll accomplish this via Value recipe.\n\n\n## Note:  A Word on Modules\n\nIn order for the injector to know how to create and wire together all of these objects, it needs\na registry of \"recipes\". Each recipe has an identifier of the object and the description of how to\ncreate this object.\n\nEach recipe belongs to an {@link angular.Module Angular module}. An Angular module is a bag\nthat holds one or more recipes. And since manually keeping track of module dependencies is no fun,\na module can contain information about dependencies on other modules as well.\n\nWhen an Angular application starts with a given application module, Angular creates a new instance\nof injector, which in turn creates a registry of recipes as a union of all recipes defined in the\ncore \"ng\" module, application module and its dependencies. The injector then consults the recipe\nregistry when it needs to create an object for your application.\n\n\n## Value Recipe\n\nLet's say that we want to have a very simple service called \"clientId\" that provides a string\nrepresenting an authentication id used for some remote API. You would define it like this:\n\n```javascript\nvar myApp = angular.module('myApp', []);\nmyApp.value('clientId', 'a12345654321x');\n```\n\nNotice how we created an Angular module called `myApp`, and specified that this module definition\ncontains a \"recipe\" for constructing the `clientId` service, which is a simple string in this case.\n\nAnd this is how you would display it via Angular's data-binding:\n\n\n```javascript\nmyApp.controller('DemoController', ['clientId', function DemoController(clientId) {\n  this.clientId = clientId;\n}]);\n```\n\n```html\n<html ng-app=\"myApp\">\n  <body ng-controller=\"DemoController as demo\">\n    Client ID: {{demo.clientId}}\n  </body>\n</html>\n```\n\nIn this example, we've used the Value recipe to define the value to provide when `DemoController`\nasks for the service with id \"clientId\".\n\nOn to more complex examples!\n\n\n## Factory Recipe\n\nThe Value recipe is very simple to write, but lacks some important features we often need when\ncreating services.  Let's now look at the Value recipe's more powerful sibling, the Factory. The\nFactory recipe adds the following abilities:\n\n* ability to use other services (have dependencies)\n* service initialization\n* delayed/lazy initialization\n\nThe Factory recipe constructs a new service using a function with zero or more arguments (these\nare dependencies on other services). The return value of this function is the service instance\ncreated by this recipe.\n\nNote: All services in Angular are singletons. That means that the injector uses each recipe at most\nonce to create the object. The injector then caches the reference for all future needs.\n\nSince a Factory is a more powerful version of the Value recipe, the same service can be constructed with it.\nUsing our previous `clientId` Value recipe example, we can rewrite it as a Factory recipe like this:\n\n```javascript\nmyApp.factory('clientId', function clientIdFactory() {\n  return 'a12345654321x';\n});\n```\n\nBut given that the token is just a string literal, sticking with the Value recipe is still more\nappropriate as it makes the code easier to follow.\n\nLet's say, however, that we would also like to create a service that computes a token used for\nauthentication against a remote API. This token will be called `apiToken` and will be computed\nbased on the `clientId` value and a secret stored in the browser's local storage:\n\n```javascript\nmyApp.factory('apiToken', ['clientId', function apiTokenFactory(clientId) {\n  var encrypt = function(data1, data2) {\n    // NSA-proof encryption algorithm:\n    return (data1 + ':' + data2).toUpperCase();\n  };\n\n  var secret = window.localStorage.getItem('myApp.secret');\n  var apiToken = encrypt(clientId, secret);\n\n  return apiToken;\n}]);\n```\n\nIn the code above, we see how the `apiToken` service is defined via the Factory recipe that depends\non the `clientId` service. The factory service then uses NSA-proof encryption to produce an authentication\ntoken.\n\n<div class=\"alert alert-success\">\n**Best Practice:** name the factory functions as `<serviceId>Factory`\n(e.g., apiTokenFactory). While this naming convention is not required, it helps when navigating the codebase\nor looking at stack traces in the debugger.\n</div>\n\nJust like with the Value recipe, the Factory recipe can create a service of any type, whether it be a\nprimitive, object literal, function, or even an instance of a custom type.\n\n\n## Service Recipe\n\nJavaScript developers often use custom types to write object-oriented code. Let's explore how we\ncould launch a unicorn into space via our `unicornLauncher` service which is an instance of a\ncustom type:\n\n```javascript\nfunction UnicornLauncher(apiToken) {\n\n  this.launchedCount = 0;\n  this.launch = function() {\n    // Make a request to the remote API and include the apiToken\n    ...\n    this.launchedCount++;\n  }\n}\n```\n\nWe are now ready to launch unicorns, but notice that UnicornLauncher depends on our `apiToken`.\nWe can satisfy this dependency on `apiToken` using the Factory recipe:\n\n```javascript\nmyApp.factory('unicornLauncher', [\"apiToken\", function(apiToken) {\n  return new UnicornLauncher(apiToken);\n}]);\n```\n\n\nThis is, however, exactly the use-case that the Service recipe is the most suitable for.\n\nThe Service recipe produces a service just like the Value or Factory recipes, but it does so by\n*invoking a constructor with the `new` operator*. The constructor can take zero or more arguments,\nwhich represent dependencies needed by the instance of this type.\n\nNote: Service recipes follow a design pattern called [constructor\ninjection](http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer).\n\nSince we already have a constructor for our UnicornLauncher type, we can replace the Factory recipe\nabove with a Service recipe like this:\n\n```javascript\nmyApp.service('unicornLauncher', [\"apiToken\", UnicornLauncher]);\n```\n\nMuch simpler!\n\nNote: Yes, we have called one of our service recipes 'Service'. We regret this and know that we'll\nbe somehow punished for our misdeed. It's like we named one of our offspring 'Child'. Boy,\nthat would mess with the teachers.\n\n\n## Provider Recipe\n\nAs already mentioned in the intro, the Provider recipe is the core recipe type and\nall the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe\nwith the most abilities, but for most services it's overkill.\n\nThe Provider recipe is syntactically defined as a custom type that implements a `$get` method. This\nmethod is a factory function just like the one we use in the Factory recipe. In fact, if you define\na Factory recipe, an empty Provider type with the `$get` method set to your factory function is\nautomatically created under the hood.\n\nYou should use the Provider recipe only when you want to expose an API for application-wide\nconfiguration that must be made before the application starts. This is usually interesting only\nfor reusable services whose behavior might need to vary slightly between applications.\n\nLet's say that our `unicornLauncher` service is so awesome that many apps use it. By default the\nlauncher shoots unicorns into space without any protective shielding. But on some planets the\natmosphere is so thick that we must wrap every unicorn in tinfoil before sending it on its\nintergalactic trip, otherwise they would burn while passing through the atmosphere. It would then\nbe great if we could configure the launcher to use the tinfoil shielding for each launch in apps\nthat need it. We can make it configurable like so:\n\n\n```javascript\nmyApp.provider('unicornLauncher', function UnicornLauncherProvider() {\n  var useTinfoilShielding = false;\n\n  this.useTinfoilShielding = function(value) {\n    useTinfoilShielding = !!value;\n  };\n\n  this.$get = [\"apiToken\", function unicornLauncherFactory(apiToken) {\n\n    // let's assume that the UnicornLauncher constructor was also changed to\n    // accept and use the useTinfoilShielding argument\n    return new UnicornLauncher(apiToken, useTinfoilShielding);\n  }];\n});\n```\n\nTo turn the tinfoil shielding on in our app, we need to create a config function via the module\nAPI and have the UnicornLauncherProvider injected into it:\n\n```javascript\nmyApp.config([\"unicornLauncherProvider\", function(unicornLauncherProvider) {\n  unicornLauncherProvider.useTinfoilShielding(true);\n}]);\n```\n\nNotice that the unicorn provider is injected into the config function. This injection is done by a\nprovider injector which is different from the regular instance injector, in that it instantiates\nand wires (injects) all provider instances only.\n\nDuring application bootstrap, before Angular goes off creating all services, it configures and\ninstantiates all providers. We call this the configuration phase of the application life-cycle.\nDuring this phase, services aren't accessible because they haven't been created yet.\n\nOnce the configuration phase is over, interaction with providers is disallowed and the process of\ncreating services starts. We call this part of the application life-cycle the run phase.\n\n\n## Constant Recipe\n\nWe've just learned how Angular splits the life-cycle into configuration phase and run phase and how\nyou can provide configuration to your application via the config function. Since the config\nfunction runs in the configuration phase when no services are available, it doesn't have access\neven to simple value objects created via the Value recipe.\n\nSince simple values, like URL prefixes, don't have dependencies or configuration, it's often handy\nto make them available in both the configuration and run phases. This is what the Constant recipe\nis for.\n\nLet's say that our `unicornLauncher` service can stamp a unicorn with the planet name it's being\nlaunched from if this name was provided during the configuration phase. The planet name is\napplication specific and is used also by various controllers during the runtime of the application.\nWe can then define the planet name as a constant like this:\n\n```javascript\nmyApp.constant('planetName', 'Greasy Giant');\n```\n\nWe could then configure the unicornLauncherProvider like this:\n\n```javascript\nmyApp.config(['unicornLauncherProvider', 'planetName', function(unicornLauncherProvider, planetName) {\n  unicornLauncherProvider.useTinfoilShielding(true);\n  unicornLauncherProvider.stampText(planetName);\n}]);\n```\n\nAnd since Constant recipe makes the value also available at runtime just like the Value recipe, we\ncan also use it in our controller and template:\n\n```javascript\nmyApp.controller('DemoController', [\"clientId\", \"planetName\", function DemoController(clientId, planetName) {\n  this.clientId = clientId;\n  this.planetName = planetName;\n}]);\n```\n\n```html\n<html ng-app=\"myApp\">\n  <body ng-controller=\"DemoController as demo\">\n   Client ID: {{demo.clientId}}\n   <br>\n   Planet Name: {{demo.planetName}}\n  </body>\n</html>\n```\n\n\n## Special Purpose Objects\n\nEarlier we mentioned that we also have special purpose objects that are different from services.\nThese objects extend the framework as plugins and therefore must implement interfaces specified by\nAngular. These interfaces are Controller, Directive, Filter and Animation.\n\nThe instructions for the injector to create these special objects (with the exception of the\nController objects) use the Factory recipe behind the scenes.\n\nLet's take a look at how we would create a very simple component via the directive api that depends\non the `planetName` constant we've just defined and displays the planet name, in our case:\n\"Planet Name: Greasy Giant\".\n\nSince the directives are registered via the Factory recipe, we can use the same syntax as with factories.\n\n```javascript\nmyApp.directive('myPlanet', ['planetName', function myPlanetDirectiveFactory(planetName) {\n  // directive definition object\n  return {\n    restrict: 'E',\n    scope: {},\n    link: function($scope, $element) { $element.text('Planet: ' + planetName); }\n  }\n}]);\n```\n\nWe can then use the component like this:\n\n```html\n<html ng-app=\"myApp\">\n  <body>\n   <my-planet></my-planet>\n  </body>\n</html>\n```\n\nUsing Factory recipes, you can also define Angular's filters and animations, but the controllers\nare a bit special. You create a controller as a custom type that declares its dependencies as\narguments for its constructor function. This constructor is then registered with a module. Let's\ntake a look at the `DemoController`, created in one of the early examples:\n\n```javascript\nmyApp.controller('DemoController', ['clientId', function DemoController(clientId) {\n  this.clientId = clientId;\n}]);\n```\n\nThe DemoController is instantiated via its constructor, every time the app needs an instance of\nDemoController (in our simple app it's just once). So unlike services, controllers are not\nsingletons. The constructor is called with all the requested services, in our case the `clientId`\nservice.\n\n\n## Conclusion\n\nTo wrap it up, let's summarize the most important points:\n\n- The injector uses recipes to create two types of objects: services and special purpose objects\n- There are five recipe types that define how to create objects: Value, Factory, Service, Provider\n  and Constant.\n- Factory and Service are the most commonly used recipes. The only difference between them is that\n  the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript\n  primitives and functions.\n- The Provider recipe is the core recipe type and all the other ones are just syntactic sugar on it.\n- Provider is the most complex recipe type. You don't need it unless you are building a reusable\n  piece of code that needs global configuration.\n- All special purpose objects except for the Controller are defined via Factory recipes.\n\n<table class=\"table table-bordered code-table\">\n<thead>\n<tr>\n  <th>Features / Recipe type</th>\n  <th>Factory</th>\n  <th>Service</th>\n  <th>Value</th>\n  <th>Constant</th>\n  <th>Provider</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>can have dependencies</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n  <td class=\"error\">no</td>\n  <td class=\"error\">no</td>\n  <td class=\"success\">yes</td>\n</tr>\n<tr>\n  <td>uses type friendly injection</td>\n  <td class=\"error\">no</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes\\*</td>\n  <td class=\"success\">yes\\*</td>\n  <td class=\"error\">no</td>\n</tr>\n<tr>\n  <td>object available in config phase</td>\n  <td class=\"error\">no</td>\n  <td class=\"error\">no</td>\n  <td class=\"error\">no</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes\\*\\*</td>\n</tr>\n<tr>\n  <td>can create functions</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n</tr>\n<tr>\n  <td>can create primitives</td>\n  <td class=\"success\">yes</td>\n  <td class=\"error\">no</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n  <td class=\"success\">yes</td>\n</tr>\n</tbody>\n</table>\n\n\\* at the cost of eager initialization by using `new` operator directly\n\n\\*\\* the service object is not available during the config phase, but the provider instance is\n(see the `unicornLauncherProvider` example above).\n\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/providers.ngdoc",
        "id": "Providers",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Providers undefined.overview:Providers downloaded/angular/angular.js-master/docs/content/guide/providers.ngdoc",
        "sortOn": "Providers",
        "module": "Providers",
        "left": 42,
        "level": 1,
        "root": "Developer Guide",
        "right": 43
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Scopes",
        "sortOrder": "240",
        "description": "\n\n# What are Scopes?\n\n{@link ng.$rootScope.Scope scope} is an object that refers to the application\nmodel. It is an execution context for {@link expression expressions}. Scopes are\narranged in hierarchical structure which mimic the DOM structure of the application. Scopes can\nwatch {@link guide/expression expressions} and propagate events.\n\n## Scope characteristics\n\n  - Scopes provide APIs ({@link ng.$rootScope.Scope#$watch $watch}) to observe\n    model mutations.\n\n  - Scopes provide APIs ({@link ng.$rootScope.Scope#$apply $apply}) to\n    propagate any model changes through the system into the view from outside of the \"Angular\n    realm\" (controllers, services, Angular event handlers).\n\n  - Scopes can be nested to limit access to the properties of application components while providing\n    access to shared model properties. Nested scopes are either \"child scopes\" or \"isolate scopes\".\n    A \"child scope\" (prototypically) inherits properties from its parent scope. An \"isolate scope\"\n    does not. See {@link\n    guide/directive#isolating-the-scope-of-a-directive isolated\n    scopes} for more information.\n\n  - Scopes provide context against which {@link guide/expression expressions} are evaluated. For\n    example `{{username}}` expression is meaningless, unless it is evaluated against a specific\n    scope which defines the `username` property.\n\n## Scope as Data-Model\n\nScope is the glue between application controller and the view. During the template {@link compiler\nlinking} phase the {@link ng.$compileProvider#directive directives} set up\n{@link ng.$rootScope.Scope#$watch `$watch`} expressions on the scope. The\n`$watch` allows the directives to be notified of property changes, which allows the directive to\nrender the updated value to the DOM.\n\nBoth controllers and directives have reference to the scope, but not to each other. This\narrangement isolates the controller from the directive as well as from the DOM. This is an important\npoint since it makes the controllers view agnostic, which greatly improves the testing story of\nthe applications.\n\n<example module=\"scopeExample\">\n  <file name=\"script.js\">\n    angular.module('scopeExample', [])\n      .controller('MyController', ['$scope', function($scope) {\n        $scope.username = 'World';\n\n        $scope.sayHello = function() {\n          $scope.greeting = 'Hello ' + $scope.username + '!';\n        };\n      }]);\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"MyController\">\n      Your name:\n        <input type=\"text\" ng-model=\"username\">\n        <button ng-click='sayHello()'>greet</button>\n      <hr>\n      {{greeting}}\n    </div>\n  </file>\n</example>\n\nIn the above example notice that the `MyController` assigns `World` to the `username` property of\nthe scope. The scope then notifies the `input` of the assignment, which then renders the input\nwith username pre-filled. This demonstrates how a controller can write data into the scope.\n\nSimilarly the controller can assign behavior to scope as seen by the `sayHello` method, which is\ninvoked when the user clicks on the 'greet' button. The `sayHello` method can read the `username`\nproperty and create a `greeting` property. This demonstrates that the properties on scope update\nautomatically when they are bound to HTML input widgets.\n\nLogically the rendering of `{{greeting}}` involves:\n\n  * retrieval of the scope associated with DOM node where `{{greeting}}` is defined in template.\n    In this example this is the same scope as the scope which was passed into `MyController`. (We\n    will discuss scope hierarchies later.)\n\n  * Evaluate the `greeting` {@link guide/expression expression} against the scope retrieved above,\n    and assign the result to the text of the enclosing DOM element.\n\n\nYou can think of the scope and its properties as the data which is used to render the view. The\nscope is the single source-of-truth for all things view related.\n\nFrom a testability point of view, the separation of the controller and the view is desirable, because it allows us\nto test the behavior without being distracted by the rendering details.\n\n```js\n  it('should say hello', function() {\n    var scopeMock = {};\n    var cntl = new MyController(scopeMock);\n\n    // Assert that username is pre-filled\n    expect(scopeMock.username).toEqual('World');\n\n    // Assert that we read new username and greet\n    scopeMock.username = 'angular';\n    scopeMock.sayHello();\n    expect(scopeMock.greeting).toEqual('Hello angular!');\n  });\n```\n\n\n## Scope Hierarchies\n\nEach Angular application has exactly one {@link ng.$rootScope root scope}, but\nmay have several child scopes.\n\nThe application can have multiple scopes, because some {@link guide/directive directives} create\nnew child scopes (refer to directive documentation to see which directives create new scopes).\nWhen new scopes are created, they are added as children of their parent scope. This creates a tree\nstructure which parallels the DOM where they're attached.\n\nWhen Angular evaluates `{{name}}`, it first looks at the scope associated with the given\nelement for the `name` property. If no such property is found, it searches the parent scope\nand so on until the root scope is reached. In JavaScript this behavior is known as prototypical\ninheritance, and child scopes prototypically inherit from their parents.\n\nThis example illustrates scopes in application, and prototypical inheritance of properties. The example is followed by\na diagram depicting the scope boundaries.\n\n<example module=\"scopeExample\">\n  <file name=\"index.html\">\n  <div class=\"show-scope-demo\">\n    <div ng-controller=\"GreetController\">\n      Hello {{name}}!\n    </div>\n    <div ng-controller=\"ListController\">\n      <ol>\n        <li ng-repeat=\"name in names\">{{name}} from {{department}}</li>\n      </ol>\n    </div>\n  </div>\n  </file>\n  <file name=\"script.js\">\n    angular.module('scopeExample', [])\n      .controller('GreetController', ['$scope', '$rootScope', function($scope, $rootScope) {\n        $scope.name = 'World';\n        $rootScope.department = 'Angular';\n      }])\n      .controller('ListController', ['$scope', function($scope) {\n        $scope.names = ['Igor', 'Misko', 'Vojta'];\n      }]);\n  </file>\n  <file name=\"style.css\">\n    .show-scope-demo.ng-scope,\n    .show-scope-demo .ng-scope  {\n      border: 1px solid red;\n      margin: 3px;\n    }\n  </file>\n</example>\n\n<img class=\"center\" src=\"img/guide/concepts-scope.png\">\n\nNotice that Angular automatically places `ng-scope` class on elements where scopes are\nattached. The `<style>` definition in this example highlights in red the new scope locations. The\nchild scopes are necessary because the repeater evaluates `{{name}}` expression, but\ndepending on which scope the expression is evaluated it produces different result. Similarly the\nevaluation of `{{department}}` prototypically inherits from root scope, as it is the only place\nwhere the `department` property is defined.\n\n\n## Retrieving Scopes from the DOM.\n\nScopes are attached to the DOM as `$scope` data property, and can be retrieved for debugging\npurposes. (It is unlikely that one would need to retrieve scopes in this way inside the\napplication.) The location where the root scope is attached to the DOM is defined by the location\nof {@link ng.directive:ngApp `ng-app`} directive. Typically\n`ng-app` is placed on the `<html>` element, but it can be placed on other elements as well, if,\nfor example, only a portion of the view needs to be controlled by Angular.\n\nTo examine the scope in the debugger:\n\n  1. Right click on the element of interest in your browser and select 'inspect element'. You\n  should see the browser debugger with the element you clicked on highlighted.\n\n  2. The debugger allows you to access the currently selected element in the console as `$0`\n    variable.\n\n  3. To retrieve the associated scope in console execute: `angular.element($0).scope()` or just type $scope\n\n\n## Scope Events Propagation\n\nScopes can propagate events in similar fashion to DOM events. The event can be {@link\nng.$rootScope.Scope#$broadcast broadcasted} to the scope children or {@link\nng.$rootScope.Scope#$emit emitted} to scope parents.\n\n<example module=\"eventExample\">\n  <file name=\"script.js\">\n    angular.module('eventExample', [])\n      .controller('EventController', ['$scope', function($scope) {\n        $scope.count = 0;\n        $scope.$on('MyEvent', function() {\n          $scope.count++;\n        });\n      }]);\n  </file>\n  <file name=\"index.html\">\n    <div ng-controller=\"EventController\">\n      Root scope <tt>MyEvent</tt> count: {{count}}\n      <ul>\n        <li ng-repeat=\"i in [1]\" ng-controller=\"EventController\">\n          <button ng-click=\"$emit('MyEvent')\">$emit('MyEvent')</button>\n          <button ng-click=\"$broadcast('MyEvent')\">$broadcast('MyEvent')</button>\n          <br>\n          Middle scope <tt>MyEvent</tt> count: {{count}}\n          <ul>\n            <li ng-repeat=\"item in [1, 2]\" ng-controller=\"EventController\">\n              Leaf scope <tt>MyEvent</tt> count: {{count}}\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  </file>\n</example>\n\n\n\n## Scope Life Cycle\n\nThe normal flow of a browser receiving an event is that it executes a corresponding JavaScript\ncallback. Once the callback completes the browser re-renders the DOM and returns to waiting for\nmore events.\n\nWhen the browser calls into JavaScript the code executes outside the Angular execution context,\nwhich means that Angular is unaware of model modifications. To properly process model\nmodifications the execution has to enter the Angular execution context using the {@link\nng.$rootScope.Scope#$apply `$apply`} method. Only model modifications which\nexecute inside the `$apply` method will be properly accounted for by Angular. For example if a\ndirective listens on DOM events, such as {@link\nng.directive:ngClick `ng-click`} it must evaluate the\nexpression inside the `$apply` method.\n\nAfter evaluating the expression, the `$apply` method performs a {@link\nng.$rootScope.Scope#$digest `$digest`}. In the $digest phase the scope examines all\nof the `$watch` expressions and compares them with the previous value. This dirty checking is done\nasynchronously. This means that assignment such as `$scope.username=\"angular\"` will not\nimmediately cause a `$watch` to be notified, instead the `$watch` notification is delayed until\nthe `$digest` phase. This delay is desirable, since it coalesces multiple model updates into one\n`$watch` notification as well as guarantees that during the `$watch` notification no other\n`$watch`es are running. If a `$watch` changes the value of the model, it will force additional\n`$digest` cycle.\n\n  1. **Creation**\n\n     The {@link ng.$rootScope root scope} is created during the application\n     bootstrap by the {@link auto.$injector $injector}. During template\n     linking, some directives create new child scopes.\n\n  2. **Watcher registration**\n\n     During template linking directives register {@link\n     ng.$rootScope.Scope#$watch watches} on the scope. These watches will be\n     used to propagate model values to the DOM.\n\n  3. **Model mutation**\n\n     For mutations to be properly observed, you should make them only within the {@link\n     ng.$rootScope.Scope#$apply scope.$apply()}. (Angular APIs do this\n     implicitly, so no extra `$apply` call is needed when doing synchronous work in controllers,\n     or asynchronous work with {@link ng.$http $http}, {@link ng.$timeout $timeout}\n     or {@link ng.$interval $interval} services.\n\n  4. **Mutation observation**\n\n     At the end of `$apply`, Angular performs a {@link ng.$rootScope.Scope#$digest\n     $digest} cycle on the root scope, which then propagates throughout all child scopes. During\n     the `$digest` cycle, all `$watch`ed expressions or functions are checked for model mutation\n     and if a mutation is detected, the `$watch` listener is called.\n\n  5. **Scope destruction**\n\n     When child scopes are no longer needed, it is the responsibility of the child scope creator\n     to destroy them via {@link ng.$rootScope.Scope#$destroy scope.$destroy()}\n     API. This will stop propagation of `$digest` calls into the child scope and allow for memory\n     used by the child scope models to be reclaimed by the garbage collector.\n\n\n### Scopes and Directives\n\nDuring the compilation phase, the {@link compiler compiler} matches {@link\nng.$compileProvider#directive directives} against the DOM template. The directives\nusually fall into one of two categories:\n\n  - Observing {@link ng.$compileProvider#directive directives}, such as\n    double-curly expressions `{{expression}}`, register listeners using the {@link\n    ng.$rootScope.Scope#$watch $watch()} method. This type of directive needs\n    to be notified whenever the expression changes so that it can update the view.\n\n  - Listener directives, such as {@link ng.directive:ngClick\n    ng-click}, register a listener with the DOM. When the DOM listener fires, the directive\n    executes the associated expression and updates the view using the {@link\n    ng.$rootScope.Scope#$apply $apply()} method.\n\nWhen an external event (such as a user action, timer or XHR) is received, the associated {@link\nexpression expression} must be applied to the scope through the {@link\nng.$rootScope.Scope#$apply $apply()} method so that all listeners are updated\ncorrectly.\n\n### Directives that Create Scopes\n\nIn most cases, {@link ng.$compileProvider#directive directives} and scopes interact\nbut do not create new instances of scope. However, some directives, such as {@link\nng.directive:ngController ng-controller} and {@link\nng.directive:ngRepeat ng-repeat}, create new child scopes\nand attach the child scope to the corresponding DOM element. You can retrieve a scope for any DOM\nelement by using an `angular.element(aDomElement).scope()` method call.\nSee the {@link guide/directive#isolating-the-scope-of-a-directive\ndirectives guide} for more information about isolate scopes.\n\n### Controllers and Scopes\n\nScopes and controllers interact with each other in the following situations:\n\n   - Controllers use scopes to expose controller methods to templates (see {@link\n     ng.directive:ngController ng-controller}).\n\n   - Controllers define methods (behavior) that can mutate the model (properties on the scope).\n\n   - Controllers may register {@link ng.$rootScope.Scope#$watch watches} on\n     the model. These watches execute immediately after the controller behavior executes.\n\nSee the {@link ng.directive:ngController ng-controller} for more\ninformation.\n\n\n### Scope `$watch` Performance Considerations\n\nDirty checking the scope for property changes is a common operation in Angular and for this reason\nthe dirty checking function must be efficient. Care should be taken that the dirty checking\nfunction does not do any DOM access, as DOM access is orders of magnitude slower than property\naccess on JavaScript object.\n\n### Scope `$watch` Depths\n<img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-scope-watch-strategies.png\">\n\nDirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.\n\n   - Watching *by reference* ({@link\n      ng.$rootScope.Scope#$watch scope.$watch} `(watchExpression, listener)`) detects a change when the whole value returned by the watch expression switches to a new value. If the value is an array or an object, changes inside it are not detected. This is the most efficient strategy.\n   - Watching *collection contents* ({@link\n      ng.$rootScope.Scope#$watchCollection scope.$watchCollection} `(watchExpression, listener)`) detects changes that occur inside an array or an object: When items are added, removed, or reordered. The detection is shallow - it does not reach into nested collections. Watching collection contents is more expensive than watching by reference, because copies of the collection contents need to be maintained. However, the strategy attempts to minimize the amount of copying required.\n   - Watching *by value* ({@link\n      ng.$rootScope.Scope#$watch scope.$watch} `(watchExpression, listener, true)`) detects any change in an arbitrarily nested data structure. It is the most powerful change detection strategy, but also the most expensive. A full traversal of the nested data structure is needed on each digest, and a full copy of it needs to be held in memory.\n\n## Integration with the browser event loop\n<img class=\"pull-right\" style=\"padding-left: 3em; padding-bottom: 1em;\" src=\"img/guide/concepts-runtime.png\">\n\nThe diagram and the example below describe how Angular interacts with the browser's event loop.\n\n  1. The browser's event-loop waits for an event to arrive. An event is a user interaction, timer event,\n     or network event (response from a server).\n  2. The event's callback gets executed. This enters the JavaScript context. The callback can\n      modify the DOM structure.\n  3. Once the callback executes, the browser leaves the JavaScript context and\n     re-renders the view based on DOM changes.\n\nAngular modifies the normal JavaScript flow by providing its own event processing loop. This\nsplits the JavaScript into classical and Angular execution context. Only operations which are\napplied in the Angular execution context will benefit from Angular data-binding, exception handling,\nproperty watching, etc... You can also use $apply() to enter the Angular execution context from JavaScript. Keep in\nmind that in most places (controllers, services) $apply has already been called for you by the\ndirective which is handling the event. An explicit call to $apply is needed only when\nimplementing custom event callbacks, or when working with third-party library callbacks.\n\n  1. Enter the Angular execution context by calling {@link guide/scope scope}`.`{@link\n     ng.$rootScope.Scope#$apply $apply}`(stimulusFn)`, where `stimulusFn` is\n     the work you wish to do in the Angular execution context.\n  2. Angular executes the `stimulusFn()`, which typically modifies application state.\n  3. Angular enters the {@link ng.$rootScope.Scope#$digest $digest} loop. The\n     loop is made up of two smaller loops which process {@link\n     ng.$rootScope.Scope#$evalAsync $evalAsync} queue and the {@link\n     ng.$rootScope.Scope#$watch $watch} list. The {@link\n     ng.$rootScope.Scope#$digest $digest} loop keeps iterating until the model\n     stabilizes, which means that the {@link ng.$rootScope.Scope#$evalAsync\n     $evalAsync} queue is empty and the {@link ng.$rootScope.Scope#$watch\n     $watch} list does not detect any changes.\n  4. The {@link ng.$rootScope.Scope#$evalAsync $evalAsync} queue is used to\n     schedule work which needs to occur outside of current stack frame, but before the browser's\n     view render. This is usually done with `setTimeout(0)`, but the `setTimeout(0)` approach\n     suffers from slowness and may cause view flickering since the browser renders the view after\n     each event.\n  5. The {@link ng.$rootScope.Scope#$watch $watch} list is a set of expressions\n     which may have changed since last iteration. If a change is detected then the `$watch`\n     function is called which typically updates the DOM with the new value.\n  6. Once the Angular {@link ng.$rootScope.Scope#$digest $digest} loop finishes\n     the execution leaves the Angular and JavaScript context. This is followed by the browser\n     re-rendering the DOM to reflect any changes.\n\n\nHere is the explanation of how the `Hello world` example achieves the data-binding effect when the\nuser enters text into the text field.\n\n  1. During the compilation phase:\n     1. the {@link ng.directive:ngModel ng-model} and {@link\n        ng.directive:input input} {@link guide/directive\n        directive} set up a `keydown` listener on the `<input>` control.\n     2. the {@link ng.$interpolate interpolation}\n        sets up a {@link ng.$rootScope.Scope#$watch $watch} to be notified of\n        `name` changes.\n  2. During the runtime phase:\n     1. Pressing an '`X`' key causes the browser to emit a `keydown` event on the input control.\n     2. The {@link ng.directive:input input} directive\n        captures the change to the input's value and calls {@link\n        ng.$rootScope.Scope#$apply $apply}`(\"name = 'X';\")` to update the\n        application model inside the Angular execution context.\n     3. Angular applies the `name = 'X';` to the model.\n     4. The {@link ng.$rootScope.Scope#$digest $digest} loop begins\n     5. The {@link ng.$rootScope.Scope#$watch $watch} list detects a change\n        on the `name` property and notifies the {@link ng.$interpolate interpolation},\n        which in turn updates the DOM.\n     6. Angular exits the execution context, which in turn exits the `keydown` event and with it\n        the JavaScript execution context.\n     7. The browser re-renders the view with update text.\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/scope.ngdoc",
        "id": "Scopes",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Scopes undefined.overview:Scopes downloaded/angular/angular.js-master/docs/content/guide/scope.ngdoc",
        "sortOn": "Scopes",
        "module": "Scopes",
        "left": 44,
        "level": 1,
        "root": "Developer Guide",
        "right": 45
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Security",
        "sortOrder": "525",
        "description": "\n\n# Security\n\nThis document explains some of AngularJS's security features and best practices that you should\nkeep in mind as you build your application.\n\n\n## Expression Sandboxing\n\nAngularJS's expressions are sandboxed not for security reasons, but instead to maintain a proper\nseparation of application responsibilities. For example, access to `window` is disallowed\nbecause it makes it easy to introduce brittle global state into your application.\n\nHowever, this sandbox is not intended to stop attackers who can edit the template before it's\nprocessed by Angular. It may be possible to run arbitrary JavaScript inside double-curly bindings\nif an attacker can modify them.\n\nBut if an attacker can change arbitrary HTML templates, there's nothing stopping them from doing:\n\n```html\n<script>somethingEvil();</script>\n```\n\nIt's better to design your application in such a way that users cannot change client-side templates.\nFor instance:\n\n* Do not mix client and server templates\n* Do not use user input to generate templates dynamically\n* Do not run user input through `$scope.$eval`\n* Consider using {@link ng.directive:ngCsp CSP} (but don't rely only on CSP)\n\n## Mixing client-side and server-side templates\n\nIn general, we recommend against this because it can create unintended XSS vectors.\n\nHowever, it's ok to mix server-side templating in the bootstrap template (`index.html`) as long\nas user input cannot be used on the server to output html that would then be processed by Angular\nin a way that would cause allow for arbitrary code execution.\n\nFor instance, you can use server-side templating to dynamically generate CSS, URLs, etc, but not\nfor generating templates that are bootstrapped/compiled by Angular.\n\n\n## Reporting a security issue\n\nEmail us at [security@angularjs.org](mailto:security@angularjs.org) to report any potential\nsecurity issues in AngularJS.\n\nPlease keep in mind the above points about Angular's expression language.\n\n\n## See also\n\n* {@link ng.directive:ngCsp Content Security Policy}\n* {@link ng.$sce Strict Contextual Escaping}\n* {@link ngSanitize.$sanitize $sanitize}\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/security.ngdoc",
        "id": "Security",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Security undefined.overview:Security downloaded/angular/angular.js-master/docs/content/guide/security.ngdoc",
        "sortOn": "Security",
        "module": "Security",
        "left": 46,
        "level": 1,
        "root": "Developer Guide",
        "right": 47
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Services",
        "sortOrder": "230",
        "description": "\n\n# Services\n\nAngular services are substitutable objects that are wired together using {@link di dependency\ninjection (DI)}. You can use services to organize and share code across your app.\n\nAngular services are:\n\n* Lazily instantiated – Angular only instantiates a service when an application component depends\n  on it.\n* Singletons – Each component dependent on a service gets a reference to the single instance\n  generated by the service factory.\n\nAngular offers several useful services (like {@link ng.$http `$http`}), but for most applications\nyou'll also want to {@link services#creating-services create your own}.\n\n<div class=\"alert alert-info\">\n**Note:** Like other core Angular identifiers, built-in services always start with `$`\n(e.g. `$http`).\n</div>\n\n\n## Using a Service\n\nTo use an Angular service, you add it as a dependency for the component (controller, service,\nfilter or directive) that depends on the service. Angular's {@link di dependency injection}\nsubsystem takes care of the rest.\n\n<example module=\"myServiceModule\">\n  <file name=\"index.html\">\n    <div id=\"simple\" ng-controller=\"MyController\">\n      <p>Let's try this simple notify service, injected into the controller...</p>\n      <input ng-init=\"message='test'\" ng-model=\"message\" >\n      <button ng-click=\"callNotify(message);\">NOTIFY</button>\n      <p>(you have to click 3 times to see an alert)</p>\n    </div>\n  </file>\n\n  <file name=\"script.js\">\n    angular.\n     module('myServiceModule', []).\n      controller('MyController', ['$scope','notify', function ($scope, notify) {\n        $scope.callNotify = function(msg) {\n          notify(msg);\n        };\n      }]).\n     factory('notify', ['$window', function(win) {\n        var msgs = [];\n        return function(msg) {\n          msgs.push(msg);\n          if (msgs.length == 3) {\n            win.alert(msgs.join(\"\\n\"));\n            msgs = [];\n          }\n        };\n      }]);\n  </file>\n\n  <file name=\"protractor.js\" type=\"protractor\">\n    it('should test service', function() {\n      expect(element(by.id('simple')).element(by.model('message')).getAttribute('value'))\n          .toEqual('test');\n    });\n  </file>\n</example>\n\n\n## Creating Services\n\nApplication developers are free to define their own services by registering the service's name and\n**service factory function**, with an Angular module.\n\nThe **service factory function** generates the single object or function that represents the\nservice to the rest of the application. The object or function returned by the service is\ninjected into any component (controller, service, filter or directive) that specifies a dependency\non the service.\n\n### Registering Services\n\nServices are registered to modules via the {@link angular.Module Module API}.\nTypically you use the {@link angular.Module#factory Module factory} API to register a service:\n\n```js\nvar myModule = angular.module('myModule', []);\nmyModule.factory('serviceId', function() {\n  var shinyNewServiceInstance;\n  // factory function body that constructs shinyNewServiceInstance\n  return shinyNewServiceInstance;\n});\n```\n\nNote that you are not registering a **service instance**, but rather a **factory function** that\nwill create this instance when called.\n\n### Dependencies\n\nServices can have their own dependencies. Just like declaring dependencies in a controller, you\ndeclare dependencies by specifying them in the service's factory function signature.\n\nFor more on dependencies, see the {@link guide/di dependency injection} docs.\n\nThe example module below has two services, each with various dependencies:\n\n```js\nvar batchModule = angular.module('batchModule', []);\n\n/**\n * The `batchLog` service allows for messages to be queued in memory and flushed\n * to the console.log every 50 seconds.\n *\n * @param {*} message Message to be logged.\n */\nbatchModule.factory('batchLog', ['$interval', '$log', function($interval, $log) {\n  var messageQueue = [];\n\n  function log() {\n    if (messageQueue.length) {\n      $log.log('batchLog messages: ', messageQueue);\n      messageQueue = [];\n    }\n  }\n\n  // start periodic checking\n  $interval(log, 50000);\n\n  return function(message) {\n    messageQueue.push(message);\n  }\n}]);\n\n/**\n * `routeTemplateMonitor` monitors each `$route` change and logs the current\n * template via the `batchLog` service.\n */\nbatchModule.factory('routeTemplateMonitor', ['$route', 'batchLog', '$rootScope',\n  function($route, batchLog, $rootScope) {\n    $rootScope.$on('$routeChangeSuccess', function() {\n      batchLog($route.current ? $route.current.template : null);\n    });\n  }]);\n\n```\n\nIn the example, note that:\n\n* The `batchLog` service depends on the built-in {@link ng.$interval `$interval`} and\n  {@link ng.$log `$log`} services.\n* The `routeTemplateMonitor` service depends on the built-in {@link ngRoute.$route `$route`}\n  service and our custom `batchLog` service.\n* Both services use the array notation to declare their dependencies.\n* The order of identifiers in the array is the same as the order of argument\n  names in the factory function.\n\n### Registering a Service with `$provide`\n\nYou can also register services via the {@link auto.$provide `$provide`} service inside of a\nmodule's `config` function:\n\n```js\nangular.module('myModule', []).config(['$provide', function($provide) {\n  $provide.factory('serviceId', function() {\n    var shinyNewServiceInstance;\n    // factory function body that constructs shinyNewServiceInstance\n    return shinyNewServiceInstance;\n  });\n}]);\n```\n\nThis technique is often used in unit tests to mock out a service's dependencies.\n\n\n## Unit Testing\n\nThe following is a unit test for the `notify` service from the {@link services#creating-services\nCreating Angular Services} example above. The unit test example uses a Jasmine spy (mock) instead\nof a real browser alert.\n\n```js\nvar mock, notify;\nbeforeEach(module('myServiceModule'));\nbeforeEach(function() {\n  mock = {alert: jasmine.createSpy()};\n\n  module(function($provide) {\n    $provide.value('$window', mock);\n  });\n\n  inject(function($injector) {\n    notify = $injector.get('notify');\n  });\n});\n\nit('should not alert first two notifications', function() {\n  notify('one');\n  notify('two');\n\n  expect(mock.alert).not.toHaveBeenCalled();\n});\n\nit('should alert all after third notification', function() {\n  notify('one');\n  notify('two');\n  notify('three');\n\n  expect(mock.alert).toHaveBeenCalledWith(\"one\\ntwo\\nthree\");\n});\n\nit('should clear messages after alert', function() {\n  notify('one');\n  notify('two');\n  notify('third');\n  notify('more');\n  notify('two');\n  notify('third');\n\n  expect(mock.alert.callCount).toEqual(2);\n  expect(mock.alert.mostRecentCall.args).toEqual([\"more\\ntwo\\nthird\"]);\n});\n```\n\n\n## Related Topics\n\n* {@link guide/di Dependency Injection in AngularJS}\n\n## Related API\n\n* {@link ./api/ng/service Angular Service API}\n* {@link angular.injector Injector API}\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/services.ngdoc",
        "id": "Services",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Services undefined.overview:Services downloaded/angular/angular.js-master/docs/content/guide/services.ngdoc",
        "sortOn": "Services",
        "module": "Services",
        "left": 48,
        "level": 1,
        "root": "Developer Guide",
        "right": 49
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Templates",
        "sortOrder": "260",
        "description": "\n\nIn Angular, templates are written with HTML that contains Angular-specific elements and attributes.\nAngular combines the template with information from the model and controller to render the dynamic\nview that a user sees in the browser.\n\nThese are the types of Angular elements and attributes you can use:\n\n* {@link guide/directive Directive} — An attribute or element that\n  augments an existing DOM element or represents a reusable DOM component.\n* {@link ng.$interpolate Markup} — The double curly brace notation `{{ }}` to bind expressions\n  to elements is built-in Angular markup.\n* {@link guide/filter Filter} — Formats data for display.\n* {@link forms Form controls} — Validates user input.\n\nThe following code snippet shows a template with {@link guide/directive directives} and\ncurly-brace {@link expression expression} bindings:\n\n```html\n<html ng-app>\n <!-- Body tag augmented with ngController directive  -->\n <body ng-controller=\"MyController\">\n   <input ng-model=\"foo\" value=\"bar\">\n   <!-- Button tag with ng-click directive, and\n          string expression 'buttonText'\n          wrapped in \"{{ }}\" markup -->\n   <button ng-click=\"changeFoo()\">{{buttonText}}</button>\n   <script src=\"angular.js\">\n </body>\n</html>\n```\n\nIn a simple app, the template consists of HTML, CSS, and Angular directives contained\nin just one HTML file (usually `index.html`).\n\nIn a more complex app, you can display multiple views within one main page using \"partials\" –\nsegments of template located in separate HTML files. You can use the\n{@link ngRoute.directive:ngView ngView} directive to load partials based on configuration passed\nto the {@link ngRoute.$route $route} service. The {@link tutorial/ angular tutorial} shows this\ntechnique in steps seven and eight.\n\n\n## Related Topics\n\n* {@link guide/filter Filters}\n* {@link forms Forms}\n\n## Related API\n\n* {@link ./api API Reference}\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/templates.ngdoc",
        "id": "Templates",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Templates undefined.overview:Templates downloaded/angular/angular.js-master/docs/content/guide/templates.ngdoc",
        "sortOn": "Templates",
        "module": "Templates",
        "left": 50,
        "level": 1,
        "root": "Developer Guide",
        "right": 51
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Unit Testing",
        "sortOrder": "410",
        "description": "\n\nJavaScript is a dynamically typed language which comes with great power of expression, but it also\ncomes with almost no help from the compiler. For this reason we feel very strongly that any code\nwritten in JavaScript needs to come with a strong set of tests. We have built many features into\nAngular which makes testing your Angular applications easy. So there is no excuse for not testing.\n\n## Separation of Concerns\n\nUnit testing, as the name implies, is about testing individual units of code. Unit tests try to\nanswer questions such as \"Did I think about the logic correctly?\" or \"Does the sort function order\nthe list in the right order?\"\n\nIn order to answer such a question it is very important that we can isolate the unit of code under test.\nThat is because when we are testing the sort function we don't want to be forced into creating\nrelated pieces such as the DOM elements, or making any XHR calls to fetch the data to sort.\n\nWhile this may seem obvious it can be very difficult to call an individual function on a\ntypical project. The reason is that the developers often mix concerns resulting in a\npiece of code which does everything. It makes an XHR request, it sorts the response data and then it\nmanipulates the DOM.\n\nWith Angular we try to make it easy for you to do the right thing, and so we\nprovide dependency injection for your XHR requests, which can be mocked, and we provide abstractions which\nallow you to test your model without having to resort to manipulating the DOM. The test can then\nassert that the data has been sorted without having to create or look at the state of the DOM or\nwait for any XHR requests to return data. The individual sort function can be tested in isolation.\n\n## With great power comes great responsibility\n\nAngular is written with testability in mind, but it still requires that you do the right thing.\nWe tried to make the right thing easy, but if you ignore these guidelines you may end up with an\nuntestable application.\n\n## Dependency Injection\n\nAngular comes with {@link di dependency injection} built-in, which makes testing components much\neasier, because you can pass in a component's dependencies and stub or mock them as you wish.\n\nComponents that have their dependencies injected allow them to be easily mocked on a test by\ntest basis, without having to mess with any global variables that could inadvertently affect\nanother test.\n\n## Additional tools for testing Angular applications\n\nFor testing Angular applications there are certain tools that you should use that will make testing much\neasier to set up and run.\n\n### Karma\n\n[Karma](http://karma-runner.github.io/) is a JavaScript command line tool that can be used to spawn\na web server which loads your application's source code and executes your tests. You can configure\nKarma to run against a number of browsers, which is useful for being confident that your application\nworks on all browsers you need to support. Karma is executed on the command line and will display\nthe results of your tests on the command line once they have run in the browser.\n\nKarma is a NodeJS application, and should be installed through npm. Full installation instructions\nare available on [the Karma website](http://karma-runner.github.io/0.12/intro/installation.html).\n\n### Jasmine\n\n[Jasmine](http://jasmine.github.io/1.3/introduction.html) is a behavior driven development framework for\nJavaScript that has become the most popular choice for testing Angular applications. Jasmine\nprovides functions to help with structuring your tests and also making assertions. As your tests\ngrow, keeping them well structured and documented is vital, and Jasmine helps achieve this.\n\nIn Jasmine we use the `describe` function to group our tests together:\n\n```js\ndescribe(\"sorting the list of users\", function() {\n  // individual tests go here\n});\n```\n\nAnd then each individual test is defined within a call to the `it` function:\n\n```js\ndescribe('sorting the list of users', function() {\n  it('sorts in descending order by default', function() {\n    // your test assertion goes here\n  });\n});\n```\n\nGrouping related tests within `describe` blocks and describing each individual test within an\n`it` call keeps your tests self documenting.\n\nFinally, Jasmine provides matchers which let you make assertions:\n\n```js\ndescribe('sorting the list of users', function() {\n  it('sorts in descending order by default', function() {\n    var users = ['jack', 'igor', 'jeff'];\n    var sorted = sortUsers(users);\n    expect(sorted).toEqual(['jeff', 'jack', 'igor']);\n  });\n});\n```\n\nJasmine comes with a number of matchers that help you make a variety of assertions. You should [read\nthe Jasmine documentation](http://jasmine.github.io/1.3/introduction.html#section-Matchers) to see\nwhat they are. To use Jasmine with Karma, we use the\n[karma-jasmine](https://github.com/karma-runner/karma-jasmine) test runner.\n\n### angular-mocks\n\nAngular also provides the {@link ngMock} module, which provides mocking for your tests. This is used\nto inject and mock Angular services within unit tests. In addition, it is able to extend other\nmodules so they are synchronous. Having tests synchronous keeps them much cleaner and easier to work\nwith. One of the most useful parts of ngMock is {@link ngMock.$httpBackend}, which lets us mock XHR\nrequests in tests, and return sample data instead.\n\n## Testing a Controller\n\nBecause Angular separates logic from the view layer, it keeps controllers easy to test. Let's take a\nlook at how we might test the controller below, which provides `$scope.grade`, which sets a property\non the scope based on the length of the password.\n\n```js\nangular.module('app', [])\n  .controller('PasswordController', function PasswordController($scope) {\n    $scope.password = '';\n    $scope.grade = function() {\n      var size = $scope.password.length;\n      if (size > 8) {\n        $scope.strength = 'strong';\n      } else if (size > 3) {\n        $scope.strength = 'medium';\n      } else {\n        $scope.strength = 'weak';\n      }\n    };\n  });\n```\n\nBecause controllers are not available on the global scope, we need to use {@link\nangular.mock.inject} to inject our controller first. The first step is to use the `module` function,\nwhich is provided by angular-mocks. This loads in the module it's given, so it is available in your\ntests. We pass this into `beforeEach`, which is a function Jasmine provides that lets us run code\nbefore each test. Then we can use `inject` to access `$controller`, the service that is responsible\nfor instantiating controllers.\n\n```js\ndescribe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    it('sets the strength to \"strong\" if the password length is >8 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n  });\n});\n```\n\nNotice how by nesting the `describe` calls and being descriptive when calling them with strings, the\ntest is very clear. It documents exactly what it is testing, and at a glance you can quickly see\nwhat is happening. Now let's add the test for when the password is less than three characters, which\nshould see `$scope.strength` set to \"weak\":\n\n```js\ndescribe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    it('sets the strength to \"strong\" if the password length is >8 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n\n    it('sets the strength to \"weak\" if the password length <3 chars', function() {\n      var $scope = {};\n      var controller = $controller('PasswordController', { $scope: $scope });\n      $scope.password = 'a';\n      $scope.grade();\n      expect($scope.strength).toEqual('weak');\n    });\n  });\n});\n```\n\nNow we have two tests, but notice the duplication between the tests. Both have to\ncreate the `$scope` variable and create the controller. As we add new tests, this duplication is\nonly going to get worse. Thankfully, Jasmine provides `beforeEach`, which lets us run a function\nbefore each individual test. Let's see how that would tidy up our tests:\n\n```js\ndescribe('PasswordController', function() {\n  beforeEach(module('app'));\n\n  var $controller;\n\n  beforeEach(inject(function(_$controller_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $controller = _$controller_;\n  }));\n\n  describe('$scope.grade', function() {\n    var $scope, controller;\n\n    beforeEach(function() {\n      $scope = {};\n      controller = $controller('PasswordController', { $scope: $scope });\n    });\n\n    it('sets the strength to \"strong\" if the password length is >8 chars', function() {\n      $scope.password = 'longerthaneightchars';\n      $scope.grade();\n      expect($scope.strength).toEqual('strong');\n    });\n\n    it('sets the strength to \"weak\" if the password length <3 chars', function() {\n      $scope.password = 'a';\n      $scope.grade();\n      expect($scope.strength).toEqual('weak');\n    });\n  });\n});\n```\n\nWe've moved the duplication out and into the `beforeEach` block. Each individual test now\nonly contains the code specific to that test, and not code that is general across all tests. As you\nexpand your tests, keep an eye out for locations where you can use `beforeEach` to tidy up tests.\n`beforeEach` isn't the only function of this sort that Jasmine provides, and the [documentation\nlists the others](http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown).\n\n## Testing Filters\n{@link ng.$filterProvider Filters} are functions which transform the data into a user readable\nformat. They are important because they remove the formatting responsibility from the application\nlogic, further simplifying the application logic.\n\n```js\nmyModule.filter('length', function() {\n  return function(text) {\n    return ('' + (text || '')).length;\n  }\n});\n\ndescribe('length filter', function() {\n  it('returns 0 when given null', function() {\n    var length = $filter('length');\n    expect(length(null)).toEqual(0);\n  });\n\n  it('returns the correct value when given a string of chars', function() {\n    var length = $filter('length');\n    expect(length('abc')).toEqual(3);\n  });\n});\n```\n\n## Testing Directives\nDirectives in angular are responsible for encapsulating complex functionality within custom HTML tags,\nattributes, classes or comments. Unit tests are very important for directives because the components\nyou create with directives may be used throughout your application and in many different contexts.\n\n### Simple HTML Element Directive\n\nLet's start with an angular app with no dependencies.\n\n```js\nvar app = angular.module('myApp', []);\n```\n\nNow we can add a directive to our app.\n\n```js\napp.directive('aGreatEye', function () {\n    return {\n        restrict: 'E',\n        replace: true,\n        template: '<h1>lidless, wreathed in flame, {{1 + 1}} times</h1>'\n    };\n});\n```\n\nThis directive is used as a tag `<a-great-eye></a-great-eye>`. It replaces the entire tag with the\ntemplate `<h1>lidless, wreathed in flame, {{1 + 1}} times</h1>`. Now we are going to write a jasmine unit test to\nverify this functionality. Note that the expression `{{1 + 1}}` times will also be evaluated in the rendered content.\n\n```js\ndescribe('Unit testing great quotes', function() {\n  var $compile,\n      $rootScope;\n\n  // Load the myApp module, which contains the directive\n  beforeEach(module('myApp'));\n\n  // Store references to $rootScope and $compile\n  // so they are available to all tests in this describe block\n  beforeEach(inject(function(_$compile_, _$rootScope_){\n    // The injector unwraps the underscores (_) from around the parameter names when matching\n    $compile = _$compile_;\n    $rootScope = _$rootScope_;\n  }));\n\n  it('Replaces the element with the appropriate content', function() {\n    // Compile a piece of HTML containing the directive\n    var element = $compile(\"<a-great-eye></a-great-eye>\")($rootScope);\n    // fire all the watches, so the scope expression {{1 + 1}} will be evaluated\n    $rootScope.$digest();\n    // Check that the compiled element contains the templated content\n    expect(element.html()).toContain(\"lidless, wreathed in flame, 2 times\");\n  });\n});\n```\n\nWe inject the $compile service and $rootScope before each jasmine test. The $compile service is used\nto render the aGreatEye directive. After rendering the directive we ensure that the directive has\nreplaced the content and \"lidless, wreathed in flame, 2 times\" is present.\n\n<div class=\"alert alert-info\">\n**Underscore notation**:\n\nThe use of the underscore notation (e.g.: `_$rootScope_`) is a convention wide spread in AngularJS\ncommunity to keep the variable names clean in your tests. That's why the\n{@link $injector} strips out the leading and the trailing underscores when\nmatching the parameters. The underscore rule applies ***only*** if the name starts **and** ends with\nexactly one underscore, otherwise no replacing happens.\n</div>\n\n### Testing Transclusion Directives\n\nDirectives that use transclusion are treated specially by the compiler.  Before their compile\nfunction is called, the contents of the directive's element are removed from the element and\nprovided via a transclusion function.  The directive's template is then appended to the directive's\nelement, to which it can then insert the transcluded content into its template.\n\n\nBefore compilation:\n```html\n<div translude-directive>\n  Some transcluded content\n</div>\n```\n\nAfter transclusion extraction:\n```html\n<div transclude-directive></div>\n```\n\nAfter compilation:\n```html\n<div transclude-directive>\n  Some Template\n  <span ng-transclude>Some transcluded content</span>\n</div>\n```\n\nIf the directive is using 'element' transclusion, the compiler will actually remove the\ndirective's entire element from the DOM and replace it with a comment node. The compiler then\ninserts the directive's template \"after\" this comment node, as a sibling.\n\nBefore compilation\n```html\n<div element-transclude>\n  Some Content\n</div>\n```\n\nAfter transclusion extraction\n```html\n<!-- elementTransclude -->\n```\n\nAfter compilation:\n```html\n<!-- elementTransclude -->\n<div element-transclude>\n  Some Template\n  <span ng-transclude>Some transcluded content</span>\n</div>\n```\n\nIt is important to be aware of this when writing tests for directives that use 'element'\ntransclusion.  If you place the directive on the root element of the DOM fragment that you\npass to {@link $compile}, then the DOM node returned from the linking function will be the\ncomment node and you will lose the ability to access the template and transcluded content.\n\n```javascript\nvar node = $compile('<div element-transclude></div>')($rootScope);\nexpect(node[0].nodeType).toEqual(node.COMMENT_NODE);\nexpect(node[1]).toBeUndefined();\n```\n\nTo cope with this you simply ensure that your 'element' transclude directive is wrapped in an\nelement, such as a `<div>`.\n\n```javascript\nvar node = $compile('<div><div element-transclude></div></div>')($rootScope);\nvar contents = node.contents();\nexpect(contents[0].nodeType).toEqual(node.COMMENT_NODE);\nexpect(contents[1].nodeType).toEqual(node.ELEMENT_NODE);\n```\n\n### Testing Directives With External Templates\n\nIf your directive uses `templateUrl`, consider using\n[karma-ng-html2js-preprocessor](https://github.com/karma-runner/karma-ng-html2js-preprocessor)\nto pre-compile HTML templates and thus avoid having to load them over HTTP during test execution.\nOtherwise you may run into issues if the test directory hierarchy differs from the application's.\n\n## Sample project\nSee the [angular-seed](https://github.com/angular/angular-seed) project for an example.\n",
        "parentDoc": {
            "name": "Developer Guide"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/guide/unit-testing.ngdoc",
        "id": "Unit Testing",
        "path": "angular/guide",
        "groupId": 6,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Unit Testing undefined.overview:Unit Testing downloaded/angular/angular.js-master/docs/content/guide/unit-testing.ngdoc",
        "sortOn": "Unit Testing",
        "module": "Unit Testing",
        "left": 52,
        "level": 1,
        "root": "Developer Guide",
        "right": 53
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Miscellaneous",
        "description": "\n\n# Miscellaneous Links\n\n- {@link misc/started Getting Started}\n- {@link misc/downloading Downloading AngularJS}\n- {@link misc/faq Frequently Asked Questions}\n- {@link misc/contribute Building AngularJS}\n",
        "parentDoc": {
            "name": "Miscellaneous"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/misc/index.ngdoc",
        "id": "Miscellaneous",
        "path": "angular/misc",
        "groupId": 7,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Miscellaneous undefined.overview:Miscellaneous downloaded/angular/angular.js-master/docs/content/misc/index.ngdoc",
        "sortOn": "Miscellaneous",
        "module": "Miscellaneous",
        "left": 1,
        "level": 0,
        "root": "Miscellaneous",
        "right": 10
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Develop",
        "description": "\n\n# Building and Testing AngularJS\n\nThis document describes how to set up your development environment to build and test AngularJS, and\nexplains the basic mechanics of using `git`, `node`, `npm`, `grunt`, and `bower`.\n\nSee the [contributing guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md)\nfor how to contribute your own code to AngularJS.\n\n\n1. {@link misc/contribute#installing-dependencies Installing Dependencies}\n2. {@link misc/contribute#forking-angular-on-github Forking Angular on Github}\n3. {@link misc/contribute#building-angularjs Building AngularJS}\n4. {@link misc/contribute#running-a-local-development-web-server Running a Local Development Web Server}\n5. {@link misc/contribute#running-the-unit-test-suite Running the Unit Test Suite}\n6. {@link misc/contribute#running-the-end-to-end-test-suite Running the End-to-end Test Suite}\n\n## Installing Dependencies\n\nBefore you can build AngularJS, you must install and configure the following dependencies on your\nmachine:\n\n* [Git](http://git-scm.com/): The [Github Guide to\nInstalling Git](https://help.github.com/articles/set-up-git) is a good source of information.\n\n* [Node.js](http://nodejs.org): We use Node to generate the documentation, run a\ndevelopment web server, run tests, and generate distributable files. Depending on your system, you can install Node either from source or as a\npre-packaged bundle.\n\n* [Java](http://www.java.com): We minify JavaScript using our\n[Closure Tools](https://developers.google.com/closure/) jar. Make sure you have Java (version 7 or higher) installed\nand included in your [PATH](http://docs.oracle.com/javase/tutorial/essential/environment/paths.html) variable.\n\n* [Grunt](http://gruntjs.com): We use Grunt as our build system. Install the grunt command-line tool globally with:\n\n  ```shell\n  npm install -g grunt-cli\n  ```\n\n* [Bower](http://bower.io/): We use Bower to manage client-side packages for the docs. Install the `bower` command-line tool globally with:\n\n  ```shell\n  npm install -g bower\n  ```\n\n**Note:** You may need to use sudo (for OSX, *nix, BSD etc) or run your command shell as Administrator (for Windows) to install Grunt &amp;\nBower globally.\n\n## Forking Angular on Github\n\nTo create a Github account, follow the instructions [here](https://github.com/signup/free).\nAfterwards, go ahead and [fork](http://help.github.com/forking) the [main AngularJS repository](https://github.com/angular/angular.js).\n\n\n## Building AngularJS\n\nTo build AngularJS, you clone the source code repository and use Grunt to generate the non-minified and\nminified AngularJS files:\n\n```shell\n# Clone your Github repository:\ngit clone \"git@github.com:<github username>/angular.js.git\"\n\n# Go to the AngularJS directory:\ncd angular.js\n\n# Add the main AngularJS repository as an upstream remote to your repository:\ngit remote add upstream \"https://github.com/angular/angular.js.git\"\n\n# Install node.js dependencies:\nnpm install\n\n# Install bower components:\nbower install\n\n# Build AngularJS:\ngrunt package\n```\n\n\n<div class=\"alert alert-warning\">\n**Note:** If you're using Windows, you must use an elevated command prompt (right click, run as\nAdministrator). This is because `grunt package` creates some symbolic links.\n</div>\n\n<div class=\"alert alert-warning\">\n**Note:** If you're using Linux, and npm install fails with the message\n'Please try running this command again as root/Administrator.', you may need to globally install grunt and bower:\n<ul>\n<li>sudo npm install -g grunt-cli</li>\n<li>sudo npm install -g bower</li>\n</ul>\n\n</div>\n\nThe build output can be located under the `build` directory. It consists of the following files and\ndirectories:\n\n* `angular-<version>.zip` — The complete zip file, containing all of the release build\nartifacts.\n\n* `angular.js` — The non-minified `angular` script.\n\n* `angular.min.js` —  The minified `angular` script.\n\n* `angular-scenario.js` — The `angular` End2End test runner.\n\n* `docs/` — A directory that contains all of the files needed to run `docs.angularjs.org`.\n\n* `docs/index.html` — The main page for the documentation.\n\n* `docs/docs-scenario.html` — The End2End test runner for the documentation application.\n\n\n## Running a Local Development Web Server\n\nTo debug code and run end-to-end tests, it is often useful to have a local HTTP server. For this purpose, we have\nmade available a local web server based on Node.js.\n\n1. To start the web server, run:\n   ```shell\n   grunt webserver\n   ```\n\n2. To access the local server, enter the following URL into your web browser:\n   ```text\n   http://localhost:8000/\n   ```\n   By default, it serves the contents of the AngularJS project directory.\n\n3. To access the locally served docs, visit this URL:\n   ```text\n   http://localhost:8000/build/docs/\n   ```\n\n## Running the Unit Test Suite\n\nWe write unit and integration tests with Jasmine and execute them with Karma. To run all of the\ntests once on Chrome run:\n\n```shell\ngrunt test:unit\n```\n\nTo run the tests on other browsers (Chrome, ChromeCanary, Firefox, Opera and Safari are pre-configured) use:\n\n```shell\ngrunt test:unit --browsers Opera,Firefox\n```\n\nNote there should be _no spaces between browsers_. `Opera, Firefox` is INVALID.\n\nDuring development it's however more productive to continuously run unit tests every time the source or test files\nchange. To execute tests in this mode run:\n\n1. To start the Karma server, capture Chrome browser and run unit tests, run:\n\n   ```shell\n   grunt autotest\n   ```\n\n2. To capture more browsers, open this URL in the desired browser (URL might be different if you have multiple instance\n   of Karma running, read Karma's console output for the correct URL):\n\n   ```text\n   http://localhost:9876/\n   ```\n\n3. To re-run tests just change any source or test file.\n\n\nTo learn more about all of the preconfigured Grunt tasks run:\n\n```shell\ngrunt --help\n```\n\n\n## Running the End-to-end Test Suite\n\nAngular's end to end tests are run with Protractor. Simply run:\n\n```shell\ngrunt test:e2e\n```\n\nThis will start the webserver and run the tests on Chrome.\n\n",
        "parentDoc": {
            "name": "Miscellaneous"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/misc/contribute.ngdoc",
        "id": "Develop",
        "path": "angular/misc",
        "groupId": 7,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Develop undefined.overview:Develop downloaded/angular/angular.js-master/docs/content/misc/contribute.ngdoc",
        "sortOn": "Develop",
        "module": "Develop",
        "left": 2,
        "level": 1,
        "root": "Miscellaneous",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Downloading",
        "description": "\n\n# Including angular scripts from the Google CDN\nThe quickest way to get started is to point your html `<script>` tag to a Google CDN URL.\nThis way, you don't have to download anything or maintain a local copy.\n\nThere are two types of angular script URLs you can point to, one for development and one for\nproduction:\n\n* __angular.js__ — This is the human-readable, non-minified version, suitable for web\ndevelopment.\n* __angular.min.js__ — This is the minified version, which we strongly suggest you use in\nproduction.\n\nTo point your code to an angular script on the Google CDN server, use the following template.  This\nexample points to the minified version 1.3.14:\n\n```\n  <!doctype html>\n  <html ng-app>\n    <head>\n      <title>My Angular App</title>\n      <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n    </head>\n    <body>\n    </body>\n  </html>\n```\n\nNote that only versions 1.0.1 and above are available on the CDN, if you need an earlier version\nyou can use the <http://code.angularjs.org/> URL which was the previous recommended location for\nhosted code source. If you're still using the angular server you should switch to the CDN version\nfor even faster loading times.\n\n# Downloading and hosting angular files locally\nThis option is for those who want to work with angular offline, or those who want to host the\nangular files on their own servers.\n\nIf you navigate to <http://code.angularjs.org/>, you'll see a directory listing with all of the\nangular versions since we started releasing versioned build artifacts (quite late in the project\nlifetime).  Each directory contains all artifacts that we released for a particular version.\nDownload the version you want and have fun.\n\nEach directory under <http://code.angularjs.org/> includes the following set of files:\n\n* __`angular.js`__ — This file is non-obfuscated, non-minified, and human-readable by\nopening it it any editor or browser. In order to get better error messages during development, you\nshould always use this non-minified angular script.\n\n* __`angular.min.js`__ — This is a minified and obfuscated version of\n`angular.js` created with the Closure compiler. Use this version for production in order\nto minimize the size of the application that is downloaded by your user's browser.\n\n* __`angular.zip`__ — This is a zip archive that contains all of the files released\nfor this angular version. Use this file to get everything in a single download.\n\n* __`angular-mocks.js`__ — This file contains an implementation of mocks that makes\ntesting angular apps even easier. Your unit/integration test harness should load this file after\n`angular.js` is loaded.\n\n* __`angular-scenario.js`__ — This file is a very nifty JavaScript file that allows you\nto write and execute end-to-end tests for angular applications.\n\n* __`angular-loader.min.js`__ — Module loader for Angular modules. If you are loading multiple script files containing\n Angular modules, you can load them asynchronously and in any order as long as you load this file first. Often the\n contents of this file are copy&pasted into the `index.html` to avoid even the initial request to `angular-loader.min.js`.\n See [angular-seed](https://github.com/angular/angular-seed/blob/master/app/index-async.html) for an example of usage.\n\n* __Additional Angular modules:__  optional modules with additional functionality. These files should be loaded\nafter the core `angular.js` file:\n  * __`angular-animate.js`__ - Enable animation support\n  * __`angular-cookies.js`__ - A convenient wrapper for reading and writing browser cookies\n  * __`angular-resource.js`__ - Interaction support with RESTful services via the $resource service\n  * __`angular-route.js`__ - Routing and deeplinking services and directives for angular apps\n  * __`angular-sanitize.js`__ - Functionality to sanitize HTML\n  * __`angular-touch.js`__ - Touch events and other helpers for touch-enabled devices\n\n\n* __`docs`__ — this directory contains all the files that compose the\n<http://docs.angularjs.org/> documentation app. These files are handy to see the older version of\nour docs, or even more importantly, view the docs offline.\n\n* __`i18n`__ - this directory contains locale specific `ngLocale` angular modules to override the defaults\ndefined in the `ng` module.\n",
        "parentDoc": {
            "name": "Miscellaneous"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/misc/downloading.ngdoc",
        "id": "Downloading",
        "path": "angular/misc",
        "groupId": 7,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Downloading undefined.overview:Downloading downloaded/angular/angular.js-master/docs/content/misc/downloading.ngdoc",
        "sortOn": "Downloading",
        "module": "Downloading",
        "left": 4,
        "level": 1,
        "root": "Miscellaneous",
        "right": 5
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "FAQ",
        "description": "\n\n#FAQ\n\n## Questions\n\n### Why is this project called \"AngularJS\"? Why is the namespace called \"ng\"?\n\nBecause HTML has Angular brackets and \"ng\" sounds like \"Angular\".\n\n\n### Is AngularJS a library, framework, plugin or a browser extension?\n\nAngularJS fits the definition of a framework the best, even though it's much more lightweight than\na typical framework and that's why many confuse it with a library.\n\nAngularJS is 100% JavaScript, 100% client-side and compatible with both desktop and mobile browsers.\nSo it's definitely not a plugin or some other native browser extension.\n\n\n### What is the AngularJS versioning strategy?\n\nIn Angular 1 we do not allow intentional breaking changes to appear in versions where only the \"patch\"\nnumber changes. For example between 1.3.12 and 1.3.13 there can be no breaking changes. We do allow\nbreaking changes happen between \"minor\" number changes. For example between 1.3.15 and 1.4.0 there\nwill be a number of breaking changes. We also allow breaking changes between beta releases of Angular.\nFor example between 1.4.0-beta.4 and 1.4.0-beta.5 there may be breaking changes. We try hard to minimize\nthese kinds of change only to those where there is a strong use case such as a strongly requested feature\nimprovement, a considerable simplification of the code or a measurable performance improvement.\n\nWhen adding new code to branches of Angular, have a very stringent commit policy:\n\n- Every commit must contain tests and documentation updates alongside the code changes and that all the\ntests must pass;\n- Commit messages must be written in a specific manner that allows us to parse them and extract the changes\nfor release notes.\n\nThe Angular code base has a very large set of unit tests (over 4000) and end to end tests, which are pretty\ncomprehensive. This means that a breaking change will require one or more tests to be changed to allow the\ntests to pass. So when a commit includes tests that are being removed or modified, this is a flag that the\ncode might include a breaking change. When reviewing the commit we can then decide whether there really is\na breaking change and if it is appropriate for the branch to which it is being merged. If so, then we\nrequire that the commit message contains an appropriate breaking change message.\n\nAdditionally, when a commit lands in our master repository it is synced to Google where we test it against\nover 2000 applications using the test suites of these applications. This allows us to catch regressions\nquickly before a release. We've had a pretty good experience with this setup. Only bugs that affect features\nnot used at Google or without sufficient test coverage, have a chance of making it through.\n\nLastly, when we are making a release we generate updates to the changelog directly from the commits. This\ngenerated update contains a highlighted section that contains all the breaking changes that have been\nextracted from the commits. We can quickly see in the new changelog exactly what commits contain breaking\nchanges and so can application developers when they are deciding whether to update to a new version of\nAngular.\n\n\n### Is AngularJS a templating system?\n\nAt the highest level, Angular does look like just another templating system. But there is one\nimportant reason why the Angular templating system is different, that makes it very good fit for\napplication development: bidirectional data binding. The template is compiled in the browser and\nthe compilation step produces a live view. This means you, the developers, don't need to write\ncode to constantly sync the view with the model and the model with the view as in other\ntemplating systems.\n\n\n### Do I need to worry about security holes in AngularJS?\n\nLike any other technology, AngularJS is not impervious to attack. Angular does, however, provide\nbuilt-in protection from basic security holes, including cross-site scripting and HTML injection\nattacks. AngularJS does round-trip escaping on all strings for you and even offers XSRF protection\nfor server-side communication.\n\nAngularJS was designed to be compatible with other security measures like Content Security Policy\n(CSP), HTTPS (SSL/TLS) and server-side authentication and authorization that greatly reduce the\npossible attack vectors and we highly recommend their use.\n\n\n### Can I download the source, build, and host the AngularJS environment locally?\n\nYes. See instructions in {@link downloading}.\n\n\n\n### What browsers does Angular work with?\n\nWe run our extensive test suite against the following browsers: Safari, Chrome, Firefox, Opera 15,\nIE9 and mobile browsers (Android, Chrome Mobile, iOS Safari). See {@link guide/ie Internet\nExplorer Compatibility} for more details on supporting legacy IE browsers.\n\n\n### What's Angular's performance like?\n\nThe startup time heavily depends on your network connection, state of the cache, browser used and\navailable hardware, but typically we measure bootstrap time in tens or hundreds of milliseconds.\n\nThe runtime performance will vary depending on the number and complexity of bindings on the page\nas well as the speed of your backend (for apps that fetch data from the backend). For an\nillustration, we typically build snappy apps with hundreds or thousands of active bindings.\n\n\n### How big is the angular.js file that I need to include?\n\nThe size of the file is ~50KB compressed and minified.\n\n\n### Can I use the open-source Closure Library with Angular?\n\nYes, you can use widgets from the [Closure Library](https://developers.google.com/closure/library/)\nin Angular.\n\n\n### Does Angular use the jQuery library?\n\nYes, Angular can use [jQuery](http://jquery.com/) if it's present in your app when the\napplication is being bootstrapped. If jQuery is not present in your script path, Angular falls back\nto its own implementation of the subset of jQuery that we call {@link angular.element  jQLite}.\n\nAngular 1.3 only supports jQuery 2.1 or above. jQuery 1.7 and newer might work correctly with Angular\nbut we don't guarantee that.\n\n\n### What is testability like in Angular?\n\nVery testable and designed this way from the ground up. It has an integrated dependency injection\nframework, provides mocks for many heavy dependencies (server-side communication). See\n{@link ngMock} for details.\n\n\n### How can I learn more about Angular?\n\nWatch the July 17, 2012 talk\n\"[AngularJS Intro + Dependency Injection](http://www.youtube.com/watch?v=1CpiB3Wk25U)\".\n\n\n### How is Angular licensed?\n\nThe [MIT License](https://github.com/angular/angular.js/blob/master/LICENSE).\n\n### Can I download and use the Angular logo artwork?\n\nYes! You can find design files in our github repository, under \"[angular.js/images/logo](https://github.com/angular/angular.js/tree/master/images/logo)\"\nThe logo design is licensed under a \"[Creative Commons Attribution-ShareAlike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/)\". If you have some other use in mind, contact us.\n\n### How can I get some AngularJS schwag?\n\nWe often bring a few t-shirts and stickers to events where we're presenting. If you want to order your own, the folks who\nmake our schwag will be happy to do a custom run for you, based on our existing template. By using the design they have on file,\nthey'll waive the setup costs, and you can order any quantity you need.\n\n**Stickers**\nFor orders of 250 stickers or more within Canada or the United States, contact Tom Witting (or anyone in sales) via email at <tom@stickergiant.com>, and tell him you want to order some AngularJS\nstickers just like the ones in job #42711. You'll have to give them your own info for billing and shipping.\n\nAs long as the design stays exactly the same, [StickerGiant](http://www.stickergiant.com) will give you a reorder discount.\n\nFor a smaller order, or for other countries, we suggest downloading the logo artwork and making your own.\n\n## Common Pitfalls\n\nThe Angular support channel (#angularjs on Freenode) sees a number of recurring pitfalls that new users of Angular fall into.\nThis document aims to point them out before you discover them the hard way.\n\n### DOM Manipulation\n\nStop trying to use jQuery to modify the DOM in controllers. Really.\nThat includes adding elements, removing elements, retrieving their contents, showing and hiding them.\nUse built-in directives, or write your own where necessary, to do your DOM manipulation.\nSee below about duplicating functionality.\n\nIf you're struggling to break the habit, consider removing jQuery from your app.\nReally. Angular has the $http service and powerful directives that make it almost always unnecessary.\nAngular's bundled jQLite has a handful of the features most commonly used in writing Angular directives, especially binding to events.\n\n### Trying to duplicate functionality that already exists\n\nThere's a good chance that your app isn't the first to require certain functionality.\nThere are a few pieces of Angular that are particularly likely to be reimplemented out of old habits.\n\n**ng-repeat**\n\n`ng-repeat` gets this a lot.\nPeople try to use jQuery (see above) to add more elements to some container as they're fetched from the server.\nNo, bad dog.\nThis is what `ng-repeat` is for, and it does its job very well.\nStore the data from the server in an array on your `$scope`, and bind it to the DOM with `ng-repeat`.\n\n**ng-show**\n\n`ng-show` gets this frequently too.\nConditionally showing and hiding things using jQuery is a common pattern in other apps, but Angular has a better way.\n`ng-show` (and `ng-hide`) conditionally show and hide elements based on boolean expressions.\nDescribe the conditions for showing and hiding an element in terms of `$scope` variables:\n\n    <div ng-show=\"!loggedIn\">Click <a href=\"#/login\">here</a> to log in</div>\n\nNote also the counterpart `ng-hide` and similar `ng-disabled`.\nNote especially the powerful `ng-switch` that should be used instead of several mutually exclusive `ng-show`s.\n\n**ng-class**\n\n`ng-class` is the last of the big three.\nConditionally applying classes to elements is another thing commonly done manually using jQuery.\nAngular, of course, has a better way.\nYou can give `ng-class` a whitespace-separated set of class names, and then it's identical to ordinary `class`.\nThat's not very exciting, so there's a second syntax:\n\n    <div ng-class=\"{ errorClass: isError, warningClass: isWarning, okClass: !isError && !isWarning }\">...</div>\n\nWhere you give `ng-class` an object, whose keys are CSS class names and whose values are conditional expressions using `$scope` variables.\nThe element will then have all the classes whose conditions are truthy, and none of those whose conditions are falsy.\n\nNote also the handy `ng-class-even` and `ng-class-odd`, and the related though somewhat different `ng-style`.\n\n\n### `$watch` and `$apply`\n\nAngular's two-way data binding is the root of all awesome in Angular.\nHowever, it's not magic, and there are some situations where you need to give it a nudge in the right direction.\n\nWhen you bind a value to an element in Angular using `ng-model`, `ng-repeat`, etc., Angular creates a `$watch` on that value.\nThen whenever a value on a scope changes, all `$watch`es observing that element are executed, and everything updates.\n\nSometimes, usually when you're writing a custom directive, you will have to define your own `$watch` on a scope value to make the directive react to changes.\n\nOn the flip side, sometimes you change a scope value in some code, but the app doesn't react to it.\nAngular checks for scope variable changes after pieces of your code have finished running; for example, when `ng-click` calls a function on your scope, Angular will check for changes and react.\nHowever, some code is outside of Angular and you'll have to call `scope.$apply()` yourself to trigger the update.\nThis is most commonly seen in event handlers in custom directives.\n\n### Combining `ng-repeat` with other directives\n\n`ng-repeat` is extremely useful, one of the most powerful directives in Angular.\nHowever the transformation it applies to the DOM is substantial.\nTherefore applying other directives (such as `ng-show`, `ng-controller` and others) to the same element as `ng-repeat` generally leads to problems.\n\nIf you want to apply a directive to the whole repeat, wrap the repeat in a parent element and put it there.\nIf you want to apply a directive to each inner piece of the repeat, put it on a child of the element with `ng-repeat`.\n\n### `$rootScope` exists, but it can be used for evil\n\nScopes in Angular form a hierarchy, prototypally inheriting from a root scope at the top of the tree.\nUsually this can be ignored, since most views have a controller, and therefore a scope, of their own.\n\nOccasionally there are pieces of data that you want to make global to the whole app.\nFor these, you can inject `$rootScope` and set values on it like any other scope.\nSince the scopes inherit from the root scope, these values will be available to the expressions attached to directives like `ng-show` just like values on your local `$scope`.\n\nOf course, global state sucks and you should use `$rootScope` sparingly, like you would (hopefully) use with global variables in any language.\nIn particular, don't use it for code, only data.\nIf you're tempted to put a function on `$rootScope`, it's almost always better to put it in a service that can be injected where it's needed, and more easily tested.\n\nConversely, don't create a service whose only purpose in life is to store and return bits of data.\n",
        "parentDoc": {
            "name": "Miscellaneous"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/misc/faq.ngdoc",
        "id": "FAQ",
        "path": "angular/misc",
        "groupId": 7,
        "type": "overview",
        "handler": "ngdoc",
        "search": "FAQ undefined.overview:FAQ downloaded/angular/angular.js-master/docs/content/misc/faq.ngdoc",
        "sortOn": "FAQ",
        "module": "FAQ",
        "left": 6,
        "level": 1,
        "root": "Miscellaneous",
        "right": 7
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "overview",
        "name": "Getting Started",
        "description": "\n\n# Getting Started\n\nWe want you to have an easy time while starting to use Angular.  We've put together the following steps on your path to\nbecoming an Angular expert.\n\n1. Read the {@link guide/concepts conceptual overview}.<br/>Understand Angular's vocabulary and how all the Angular\n   components work together.\n1. Do the {@link tutorial/ AngularJS Tutorial}.<br/>Walk end-to-end through building an application complete with tests\n   on top of a node.js web server.  Covers every major AngularJS feature and shows you how to set up your development\n   environment.\n1. Download or clone the [Seed App project template](https://github.com/angular/angular-seed).<br/>Gives you a\n   starter app with a directory layout, test harness, and scripts to begin building your application.\n\n\n#Further Steps\n\n##Watch Videos\n\nIf you haven’t had a chance to watch the videos from the homepage, please check out:\n\n* [Introduction to AngularJS](http://www.youtube.com/watch?v=WuiHuZq_cg4&list=PL173F1A311439C05D&context=C48ac877ADvjVQa1PpcFONnl4Q5x8hqvT6tRBTE-m0-Ym47jO3PEE%3D)\n* [Creating Directives](http://www.youtube.com/watch?v=Yg-R1gchccg&list=PL173F1A311439C05D&context=C48ac877ADvjVQa1PpcFONnl4Q5x8hqvT6tRBTE-m0-Ym47jO3PEE%3D)\n* [Communicating with Servers](http://www.youtube.com/watch?v=IRelx4-ISbs&list=PL173F1A311439C05D&context=C48ac877ADvjVQa1PpcFONnl4Q5x8hqvT6tRBTE-m0-Ym47jO3PEE%3D)\n\nAnd visit our [YouTube channel](http://www.youtube.com/user/angularjs) for more AngularJS video presentations and\ntutorials.\n\n##Subscribe\n\n* Subscribe to the [mailing list](http://groups.google.com/forum/?fromgroups#!forum/angular).  Ask questions here!\n* Follow us on [Twitter](https://twitter.com/intent/follow?original_referer=http%3A%2F%2Fangularjs.org%2F&region=follow_link&screen_name=angularjs&source=followbutton&variant=2.0)\n* Add us to your circles on [Google+](https://plus.google.com/110323587230527980117/posts)\n\n##Read more\n\nThe AngularJS documentation includes the {@link guide/index Developer Guide} covering concepts and the\n{@link ./api API Reference} for syntax and usage.\n",
        "parentDoc": {
            "name": "Miscellaneous"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/misc/started.ngdoc",
        "id": "Getting Started",
        "path": "angular/misc",
        "groupId": 7,
        "type": "overview",
        "handler": "ngdoc",
        "search": "Getting Started undefined.overview:Getting Started downloaded/angular/angular.js-master/docs/content/misc/started.ngdoc",
        "sortOn": "Getting Started",
        "module": "Getting Started",
        "left": 8,
        "level": 1,
        "root": "Miscellaneous",
        "right": 9
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "Tutorial",
        "step": "-1",
        "description": "\n\n# PhoneCat Tutorial App\n\nA great way to get introduced to AngularJS is to work through this tutorial, which walks you through\nthe construction of an AngularJS web app. The app you will build is a catalog that displays a list\nof Android devices, lets you filter the list to see only devices that interest you, and then view\ndetails for any device.\n\n<img class=\"diagram\" src=\"img/tutorial/catalog_screen.png\" width=\"488\" height=\"413\" alt=\"demo\napplication running in the browser\">\n\nFollow the tutorial to see how Angular makes browsers smarter — without the use of native\nextensions or plug-ins:\n\n* See examples of how to use client-side data binding to build dynamic views of data that change\n  immediately in response to user actions.\n* See how Angular keeps your views in sync with your data without the need for DOM manipulation.\n* Learn a better, easier way to test your web apps, with Karma and Protractor.\n* Learn how to use dependency injection and services to make common web tasks, such as getting data\n  into your app, easier.\n\nWhen you finish the tutorial you will be able to:\n\n* Create a dynamic application that works in all modern browsers.\n* Use data binding to wire up your data model to your views.\n* Create and run unit tests, with Karma.\n* Create and run end to end tests, with Protractor.\n* Move application logic out of the template and into Controllers.\n* Get data from a server using Angular services.\n* Apply animations to your application, using ngAnimate.\n* Identify resources for learning more about AngularJS.\n\nThe tutorial guides you through the entire process of building a simple application, including\nwriting and running unit and end-to-end tests. Experiments at the end of each step provide\nsuggestions for you to learn more about AngularJS and the application you are building.\n\nYou can go through the whole tutorial in a couple of hours or you may want to spend a pleasant day\nreally digging into it. If you're looking for a shorter introduction to AngularJS, check out the\n{@link misc/started Getting Started} document.\n\n# Get Started\n\nThe rest of this page explains how you can set up your local machine for development.\nIf you just want to read the tutorial then you can just go straight to the first step:\n[Step 0 - Bootstrapping](tutorial/step_00).\n\n# Working with the code\n\nYou can follow along with this tutorial and hack on the code in the comfort of your own computer.\nIn this way you can get hands-on practice of really writing AngularJS code and also on using the\nrecommended testing tools.\n\nThe tutorial relies on the use of the [Git][git] versioning system for source code management.\nYou don't need to know anything about Git to follow the tutorial other than how to install and run\na few git commands.\n\n\n### Install Git\n\nYou can download and install Git from http://git-scm.com/download. Once installed you should have\naccess to the `git` command line tool.  The main commands that you will need to use are:\n\n- `git clone ...` : clone a remote repository onto your local machine\n- `git checkout ...` : check out a particular branch or a tagged version of the code to hack on\n\n### Download angular-phonecat\n\nClone the [angular-phonecat repository][angular-phonecat] located at GitHub by running the following\ncommand:\n\n```\ngit clone --depth=14 https://github.com/angular/angular-phonecat.git\n```\n\nThis command creates the `angular-phonecat` directory in your current directory.\n\n<div class=\"alert alert-info\">The `--depth=14` option just tells Git to pull down only the last 14 commits.  This makes the\ndownload much smaller and faster.\n</div>\n\nChange your current directory to `angular-phonecat`.\n\n```\ncd angular-phonecat\n```\n\nThe tutorial instructions, from now on, assume you are running all commands from the\n`angular-phonecat` directory.\n\n\n### Install Node.js\n\nIf you want to run the preconfigured local web-server and the test tools then you will also need\n[Node.js v0.10.27+][node].\n\nYou can download a Node.js installer for your operating system from http://nodejs.org/download/.\n\nCheck the version of Node.js that you have installed by running the following command:\n\n```\nnode --version\n```\n\nIn Debian based distributions, there is a name clash with another utility called `node`. The\nsuggested solution is to also install the `nodejs-legacy` apt package, which renames `node` to\n`nodejs`.\n\n```\napt-get install nodejs-legacy npm\nnodejs --version\nnpm --version\n```\n\n\n<div class=\"alert alert-info\">If you need to run different versions of node.js\n  in your local environment, consider installing\n  <a href=\"https://github.com/creationix/nvm\" title=\"Node Version Manager Github Repo link\">\n    Node Version Manager (nvm)\n  </a>.\n</div>\n\nOnce you have Node.js installed on your machine you can download the tool dependencies by running:\n\n```\nnpm install\n```\n\nThis command will download the following tools, into the `node_modules` directory:\n\n- [Bower][bower] - client-side code package manager\n- [Http-Server][http-server] - simple local static web server\n- [Karma][karma] - unit test runner\n- [Protractor][protractor] - end to end (E2E) test runner\n\nRunning `npm install` will also automatically use bower to download the Angular framework into the\n`app/bower_components` directory.\n\n<div class=\"alert alert-info\">\n  Note the angular-phonecat project is setup to install and run these utilities via npm scripts.\n  This means that you do not have to have any of these utilities installed globally on your system\n  to follow the tutorial.  See **Installing Helper Tools** below for more information.\n</div>\n\nThe project is preconfigured with a number of npm helper scripts to make it easy to run the common\ntasks that you will need while developing:\n\n- `npm start` : start a local development web-server\n- `npm test` : start the Karma unit test runner\n- `npm run protractor` : run the Protractor end to end (E2E) tests\n- `npm run update-webdriver` : install the drivers needed by Protractor\n\n### Install Helper Tools (optional)\n\nThe Bower, Http-Server, Karma and Protractor modules are also executables, which can be installed\nglobally and run directly from a terminal/command prompt. You don't need to do this to follow the\ntutorial, but if you decide you do want to run them directly, you can install these modules globally\nusing, `sudo npm install -g ...`.\n\nFor instance, to install the Bower command line executable you would do:\n\n```\nsudo npm install -g bower\n```\n\n*(Omit the sudo if running on Windows)*\n\nThen you can run the bower tool directly, such as:\n\n```\nbower install\n```\n\n\n### Running Development Web Server\n\nWhile Angular applications are purely client-side code, and it is possible to open them in a web\nbrowser directly from the file system, it is better to serve them from a HTTP web server.  In\nparticular, for security reasons, most modern browsers will not allow JavaScript to make server\nrequests if the page is loaded directly from the file system.\n\nThe angular-phonecat project is configured with a simple static web server for hosting the\napplication during development. Start the web server by running:\n\n```\nnpm start\n```\n\nThis will create a local webserver that is listening to port 8000 on your local machine.\nYou can now browse to the application at:\n\n```\nhttp://localhost:8000/app/index.html\n```\n\n<div class=\"alert alert-info\">\nTo serve the web app on a different ip address or port, edit the \"start\" script within package.json.\nYou can `-a` to set the address and `-p` to set the port.\n</div>\n\n### Running Unit Tests\n\nWe use unit tests to ensure that the JavaScript code in our application is operating correctly.\nUnit tests focus on testing small isolated parts of the application. The unit tests are kept in the\n`test/unit` directory.\n\nThe angular-phonecat project is configured to use [Karma][karma] to run the unit tests for the\napplication.  Start Karma by running:\n\n```\nnpm test\n```\n\nThis will start the Karma unit test runner. Karma will read the configuration file at\n`test/karma.conf.js`.  This configuration file tells Karma to:\n\n- open up a Chrome browser and connect it to Karma\n- execute all the unit tests in this browser\n- report the results of these tests in the terminal/command line window\n- watch all the project's JavaScript files and re-run the tests whenever any of these change\n\nIt is good to leave this running all the time, in the background, as it will give you immediate\nfeedback about whether your changes pass the unit tests while you are working on the code.\n\n\n### Running End to End Tests\n\nWe use End to End tests to ensure that the application as a whole operates as expected.\nEnd to End tests are designed to test the whole client side application, in particular that the\nviews are displaying and behaving correctly. It does this by simulating real user interaction with\nthe real application running in the browser.\n\nThe End to End tests are kept in the `test/e2e` directory.\n\nThe angular-phonecat project is configured to use [Protractor][protractor] to run the End to End\ntests for the application.  Protractor relies upon a set of drivers to allow it to interact with\nthe browser. You can install these drivers by running:\n\n```\nnpm run update-webdriver\n```\n\n*(You should only need to do this once.)*\n\nSince Protractor works by interacting with a running application, we need to start our web server:\n\n```\nnpm start\n```\n\nThen in a separate terminal/command line window, we can run the Protractor test scripts against the\napplication by running:\n\n```\nnpm run protractor\n```\n\nProtractor will read the configuration file at `test/protractor-conf.js`.  This configuration tells\nProtractor to:\n\n- open up a Chrome browser and connect it to the application\n- execute all the End to End tests in this browser\n- report the results of these tests in the terminal/command line window\n- close down the browser and exit\n\nIt is good to run the end to end tests whenever you make changes to the HTML views or want to check\nthat the application as a whole is executing correctly.  It is very common to run End to End tests\nbefore pushing a new commit of changes to a remote repository.\n\n\n[git]: http://git-scm.com/\n[node]: http://nodejs.org/\n[angular-phonecat]: https://github.com/angular/angular-phonecat\n[protractor]: https://github.com/angular/protractor\n[bower]: http://bower.io/\n[http-server]: https://github.com/nodeapps/http-server\n[karma]: https://github.com/karma-runner/karma\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/index.ngdoc",
        "module": "Tutorial",
        "id": "Tutorial",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "Tutorial Tutorial.tutorial:Tutorial downloaded/angular/angular.js-master/docs/content/tutorial/index.ngdoc",
        "sortOn": "-1",
        "left": 1,
        "level": 0,
        "root": "Tutorial",
        "right": 28
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "0 - Bootstrapping",
        "step": "0",
        "description": "\n\n<ul doc-tutorial-nav=\"0\"></ul>\n\n\nYou are now ready to build the AngularJS phonecat app. In this step, you will become familiar\nwith the most important source code files, learn how to start the development servers bundled with\nangular-seed, and run the application in the browser.\n\n\nIn `angular-phonecat` directory, run this command:\n\n```\ngit checkout -f step-0\n```\n\n\nThis resets your workspace to step 0 of the tutorial app.\n\nYou must repeat this for every future step in the tutorial and change the number to the number of\nthe step you are on. This will cause any changes you made within your working directory to be lost.\n\nIf you haven't already done so you need to install the dependencies by running:\n\n```\nnpm install\n```\n\nTo see the app running in a browser, open a *separate* terminal/command line tab or window, then\nrun `npm start` to start the web server. Now, open a browser window for the app and navigate to\n<a href=\"http://localhost:8000/app/\" target=\"_blank\">`http://localhost:8000/app/`</a>\n\nNote that if you already ran the master branch app prior to checking out step-0, you may see the cached\nmaster version of the app in your browser window at this point. Just hit refresh to re-load the page.\n\nYou can now see the page in your browser. It's not very exciting, but that's OK.\n\nThe HTML page that displays \"Nothing here yet!\" was constructed with the HTML code shown below.\nThe code contains some key Angular elements that we will need as we progress.\n\n__`app/index.html`:__\n\n```html\n<!doctype html>\n<html lang=\"en\" ng-app>\n<head>\n  <meta charset=\"utf-8\">\n  <title>My HTML File</title>\n  <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.css\">\n  <link rel=\"stylesheet\" href=\"css/app.css\">\n  <script src=\"bower_components/angular/angular.js\"></script>\n</head>\n<body>\n\n  <p>Nothing here {{'yet' + '!'}}</p>\n\n</body>\n</html>\n```\n\n\n\n## What is the code doing?\n\n**`ng-app` directive:**\n\n          <html ng-app>\n\n  The `ng-app` attribute represents an Angular directive named `ngApp` (Angular uses\n  `spinal-case` for its custom attributes and `camelCase` for the corresponding directives\n  which implement them).\n  This directive is used to flag the html element that Angular should consider to be the root element\n  of our application.\n  This gives application developers the freedom to tell Angular if the entire html page or only a\n  portion of it should be treated as the Angular application.\n\n**AngularJS script tag:**\n\n          <script src=\"bower_components/angular/angular.js\">\n\n  This code downloads the `angular.js` script which registers a callback that will be executed by the\nbrowser when the containing HTML page is fully downloaded. When the callback is executed, Angular\nlooks for the {@link ng.directive:ngApp ngApp} directive. If\nAngular finds the directive, it will bootstrap the application with the root of the application DOM\nbeing the element on which the `ngApp` directive was defined.\n\n**Double-curly binding with an expression:**\n\n          Nothing here {{'yet' + '!'}}\n\n  This line demonstrates two core features of Angular's templating capabilities:\n\n    * a binding, denoted by double-curlies `{{ }}`\n    * a simple expression `'yet' + '!'` used in this binding.\n\n  The binding tells Angular that it should evaluate an expression and insert the result into the\n  DOM in place of the binding. Rather than a one-time insert, as we'll see in the next steps, a\n  binding will result in efficient continuous updates whenever the result of the expression\n  evaluation changes.\n\n  {@link guide/expression Angular expression} is a JavaScript-like code snippet that is\n  evaluated by Angular in the context of the current model scope, rather than within the scope of\n  the global context (`window`).\n\n  As expected, once this template is processed by Angular, the html page contains the text:\n  \"Nothing here yet!\".\n\n## Bootstrapping AngularJS apps\n\nBootstrapping AngularJS apps automatically using the `ngApp` directive is very easy and suitable\nfor most cases. In advanced cases, such as when using script loaders, you can use the\n{@link guide/bootstrap imperative / manual way} to bootstrap the app.\n\nThere are 3 important things that happen during the app bootstrap:\n\n1. The {@link auto.$injector injector} that will be used for dependency injection is created.\n\n2. The injector will then create the {@link ng.$rootScope root scope} that will\n   become the context for the model of our application.\n\n3. Angular will then \"compile\" the DOM starting at the `ngApp` root element, processing any\n   directives and bindings found along the way.\n\n\nOnce an application is bootstrapped, it will then wait for incoming browser events (such as mouse\nclick, key press or incoming HTTP response) that might change the model. Once such an event occurs,\nAngular detects if it caused any model changes and if changes are found, Angular will reflect them\nin the view by updating all of the affected bindings.\n\nThe structure of our application is currently very simple. The template contains just one directive\nand one static binding, and our model is empty. That will soon change!\n\n<img class=\"diagram\" src=\"img/tutorial/tutorial_00.png\">\n\n\n## What are all these files in my working directory?\n\n\nMost of the files in your working directory come from the [angular-seed project][angular-seed] which\nis typically used to bootstrap new Angular projects. The seed project is pre-configured to install\nthe angular framework (via `bower` into the `app/bower_components/` folder) and tools for developing\na typical web app (via `npm`).\n\nFor the purposes of this tutorial, we modified the angular-seed with the following changes:\n\n* Removed the example app\n* Added phone images to `app/img/phones/`\n* Added phone data files (JSON) to `app/phones/`\n* Added a dependency on [Bootstrap](http://getbootstrap.com) in the `bower.json` file.\n\n\n\n# Experiments\n\n* Try adding a new expression to the `index.html` that will do some math:\n\n          <p>1 + 2 = {{ 1 + 2 }}</p>\n\n\n\n# Summary\n\nNow let's go to {@link step_01 step 1} and add some content to the web app.\n\n\n<ul doc-tutorial-nav=\"0\"></ul>\n\n\n[angular-seed]: https://github.com/angular/angular-seed\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_00.ngdoc",
        "module": "0 - Bootstrapping",
        "id": "0 - Bootstrapping",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "0 - Bootstrapping Tutorial.tutorial:0 - Bootstrapping downloaded/angular/angular.js-master/docs/content/tutorial/step_00.ngdoc",
        "sortOn": "0",
        "left": 2,
        "level": 1,
        "root": "Tutorial",
        "right": 3
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "1 - Static Template",
        "step": "1",
        "description": "\n\n<ul doc-tutorial-nav=\"1\"></ul>\n\n\nIn order to illustrate how Angular enhances standard HTML, you will create a purely *static* HTML\npage and then examine how we can turn this HTML code into a template that Angular will use to\ndynamically display the same result with any set of data.\n\nIn this step you will add some basic information about two cell phones to an HTML page.\n\n- The page now contains a list with information about two phones.\n\n<div doc-tutorial-reset=\"1\"></div>\n\n\n**`app/index.html`:**\n\n```html\n  <ul>\n    <li>\n      <span>Nexus S</span>\n      <p>\n        Fast just got faster with Nexus S.\n      </p>\n    </li>\n    <li>\n      <span>Motorola XOOM™ with Wi-Fi</span>\n      <p>\n        The Next, Next Generation tablet.\n      </p>\n    </li>\n  </ul>\n```\n\n\n# Experiments\n\n* Try adding more static HTML to `index.html`. For example:\n\n          <p>Total number of phones: 2</p>\n\n\n# Summary\n\nThis addition to your app uses static HTML to display the list. Now, let's go to {@link step_02\nstep 2} to learn how to use AngularJS to dynamically generate the same list.\n\n\n<ul doc-tutorial-nav=\"1\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_01.ngdoc",
        "module": "1 - Static Template",
        "id": "1 - Static Template",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "1 - Static Template Tutorial.tutorial:1 - Static Template downloaded/angular/angular.js-master/docs/content/tutorial/step_01.ngdoc",
        "sortOn": "1",
        "left": 4,
        "level": 1,
        "root": "Tutorial",
        "right": 5
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "2 - Angular Templates",
        "step": "2",
        "description": "\n\n<ul doc-tutorial-nav=\"2\"></ul>\n\n\nNow it's time to make the web page dynamic — with AngularJS. We'll also add a test that verifies the\ncode for the controller we are going to add.\n\nThere are many ways to structure the code for an application. For Angular apps, we encourage the use of\n[the Model-View-Controller (MVC) design pattern](http://en.wikipedia.org/wiki/Model–View–Controller)\nto decouple the code and to separate concerns. With that in mind, let's use a little Angular and\nJavaScript to add model, view, and controller components to our app.\n\n- The list of three phones is now generated dynamically from data\n\n<div doc-tutorial-reset=\"2\"></div>\n\n\n## View and Template\n\nIn Angular, the __view__ is a projection of the model through the HTML __template__. This means that\nwhenever the model changes, Angular refreshes the appropriate binding points, which updates the\nview.\n\nThe view component is constructed by Angular from this template:\n\n__`app/index.html`:__\n\n```html\n<html ng-app=\"phonecatApp\">\n<head>\n  ...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body ng-controller=\"PhoneListCtrl\">\n\n  <ul>\n    <li ng-repeat=\"phone in phones\">\n      <span>{{phone.name}}</span>\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n\n</body>\n</html>\n```\n\nWe replaced the hard-coded phone list with the {@link ng.directive:ngRepeat ngRepeat directive}\nand two {@link guide/expression Angular expressions}:\n\n* The `ng-repeat=\"phone in phones\"` attribute in the `<li>` tag is an Angular repeater directive.\nThe repeater tells Angular to create a `<li>` element for each phone in the list using the `<li>`\ntag as the template.\n* The expressions wrapped in curly braces (`{{phone.name}}` and `{{phone.snippet}}`) will be replaced\nby the value of the expressions.\n\nWe have added a new directive, called `ng-controller`, which attaches a `PhoneListCtrl`\n__controller__ to the &lt;body&gt; tag.  At this point:\n\n* The expressions in curly braces (`{{phone.name}}` and `{{phone.snippet}}` denote\nbindings, which are referring to our application model, which is set up in our `PhoneListCtrl`\ncontroller.\n\n<div class=\"alert alert-info\">\nNote: We have specified an {@link angular.Module Angular Module} to load using `ng-app=\"phonecatApp\"`,\nwhere `phonecatApp` is the name of our module.  This module will contain the `PhoneListCtrl`.\n</div>\n\n<img class=\"diagram\" src=\"img/tutorial/tutorial_02.png\">\n\n## Model and Controller\n\nThe data __model__ (a simple array  of phones in object literal notation) is now instantiated within\nthe `PhoneListCtrl` __controller__. The __controller__ is simply a constructor function that takes a\n`$scope` parameter:\n\n__`app/js/controllers.js`:__\n\n```js\n\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.'},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.'},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.'}\n  ];\n});\n\n```\n\nHere we declared a controller called `PhoneListCtrl` and registered it in an AngularJS\nmodule, `phonecatApp`. Notice that our `ng-app` directive (on the `<html>` tag) now specifies the `phonecatApp`\nmodule name as the module to load when bootstrapping the Angular application.\n\nAlthough the controller is not yet doing very much, it plays a crucial role. By providing context\nfor our data model, the controller allows us to establish data-binding between\nthe model and the view. We connected the dots between the presentation, data, and logic components\nas follows:\n\n* The {@link ng.directive:ngController ngController} directive, located on the `<body>` tag,\nreferences the name of our controller, `PhoneListCtrl` (located in the JavaScript file\n`controllers.js`).\n\n* The `PhoneListCtrl` controller attaches the phone data to the `$scope` that was injected into our\ncontroller function. This *scope* is a prototypical descendant of the *root scope* that was created\nwhen the application was defined. This controller scope is available to all bindings located within\nthe `<body ng-controller=\"PhoneListCtrl\">` tag.\n\n### Scope\n\nThe concept of a scope in Angular is crucial. A scope can be seen as the glue which allows the\ntemplate, model and controller to work together. Angular uses scopes, along with the information\ncontained in the template, data model, and controller, to keep models and views separate, but in\nsync. Any changes made to the model are reflected in the view; any changes that occur in the view\nare reflected in the model.\n\nTo learn more about Angular scopes, see the {@link ng.$rootScope.Scope angular scope documentation}.\n\n\n## Tests\n\nThe \"Angular way\" of separating controller from the view, makes it easy to test code as it is being\ndeveloped. If our controller is available on the global namespace then we could simply instantiate it\nwith a mock `scope` object:\n\n```js\ndescribe('PhoneListCtrl', function(){\n\n  it('should create \"phones\" model with 3 phones', function() {\n    var scope = {},\n        ctrl = new PhoneListCtrl(scope);\n\n    expect(scope.phones.length).toBe(3);\n  });\n\n});\n```\n\nThe test instantiates `PhoneListCtrl` and verifies that the phones array property on the scope\ncontains three records. This example demonstrates how easy it is to create a unit test for code in\nAngular. Since testing is such a critical part of software development, we make it easy to create\ntests in Angular so that developers are encouraged to write them.\n\n### Testing non-Global Controllers\n\nIn practice, you will not want to have your controller functions in the global namespace.  Instead,\nyou can see that we have registered it via an anonymous constructor function on the `phonecatApp`\nmodule.\n\nIn this case Angular provides a service, `$controller`, which will retrieve your controller by name.\nHere is the same test using `$controller`:\n\n__`test/unit/controllersSpec.js`:__\n\n```js\ndescribe('PhoneListCtrl', function(){\n\n  beforeEach(module('phonecatApp'));\n\n  it('should create \"phones\" model with 3 phones', inject(function($controller) {\n    var scope = {},\n        ctrl = $controller('PhoneListCtrl', {$scope:scope});\n\n    expect(scope.phones.length).toBe(3);\n  }));\n\n});\n```\n\n* Before each test we tell Angular to load the `phonecatApp` module.\n* We ask Angular to `inject` the `$controller` service into our test function\n* We use `$controller` to create an instance of the `PhoneListCtrl`\n* With this instance, we verify that the phones array property on the scope contains three records.\n\n\n### Writing and Running Tests\n\nAngular developers prefer the syntax of Jasmine's Behavior-driven Development  (BDD) framework when\nwriting tests. Although Angular does not require you to use Jasmine, we wrote all of the tests in\nthis tutorial in Jasmine v1.3. You can learn about Jasmine on the [Jasmine home page][jasmine] and\nat the [Jasmine docs][jasmine-docs].\n\nThe angular-seed project is pre-configured to run unit tests using [Karma][karma] but you will need\nto ensure that Karma and its necessary plugins are installed. You can do this by running\n`npm install`.\n\nTo run the tests, and then watch the files for changes: `npm test`.\n\n* Karma will start a new instance of Chrome browser automatically. Just ignore it and let it run in\n   the background. Karma will use this browser for test execution.\n* You should see the following or similar output in the terminal:\n\n  <pre>\n    info: Karma server started at http://localhost:9876/\n    info (launcher): Starting  browser \"Chrome\"\n    info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\n    Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n  </pre>\n\n  Yay! The test passed! Or not...\n* To rerun the tests, just change any of the source or test .js files. Karma will notice the change\n  and will rerun the tests for you. Now isn't that sweet?\n\n<div class=\"alert alert-info\">\nMake sure you don't minimize the browser that Karma opened. On some OS, memory assigned to a minimized\nbrowser is limited, which results in your karma tests running extremely slow.\n</div>\n\n# Experiments\n\n* Add another binding to `index.html`. For example:\n\n  ```html\n  <p>Total number of phones: {{phones.length}}</p>\n  ```\n\n* Create a new model property in the controller and bind to it from the template. For example:\n\n          $scope.name = \"World\";\n\n  Then add a new binding to `index.html`:\n\n          <p>Hello, {{name}}!</p>\n\n  Refresh your browser and verify that it says \"Hello, World!\".\n\n* Update the unit test for the controller in `./test/unit/controllersSpec.js` to reflect the previous change. For example by adding:\n\n          expect(scope.name).toBe('World');\n\n* Create a repeater in `index.html` that constructs a simple table:\n\n          <table>\n            <tr><th>row number</th></tr>\n            <tr ng-repeat=\"i in [0, 1, 2, 3, 4, 5, 6, 7]\"><td>{{i}}</td></tr>\n          </table>\n\n  Now, make the list 1-based by incrementing `i` by one in the binding:\n\n          <table>\n            <tr><th>row number</th></tr>\n            <tr ng-repeat=\"i in [0, 1, 2, 3, 4, 5, 6, 7]\"><td>{{i+1}}</td></tr>\n          </table>\n  \n  Extra points: try and make an 8x8 table using an additional `ng-repeat`.\n\n* Make the unit test fail by changing `expect(scope.phones.length).toBe(3)` to instead use `toBe(4)`.\n\n\n# Summary\n\nYou now have a dynamic app that features separate model, view, and controller components, and you\nare testing as you go. Now, let's go to {@link step_03 step 3} to learn how to add full text search\nto the app.\n\n\n<ul doc-tutorial-nav=\"2\"></ul>\n\n[jasmine]: http://jasmine.github.io/\n[jasmine-docs]: http://jasmine.github.io/1.3/introduction.html\n[karma]: http://karma-runner.github.io/\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_02.ngdoc",
        "module": "2 - Angular Templates",
        "id": "2 - Angular Templates",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "2 - Angular Templates Tutorial.tutorial:2 - Angular Templates downloaded/angular/angular.js-master/docs/content/tutorial/step_02.ngdoc",
        "sortOn": "2",
        "left": 6,
        "level": 1,
        "root": "Tutorial",
        "right": 7
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "3 - Filtering Repeaters",
        "step": "3",
        "description": "\n\n<ul doc-tutorial-nav=\"3\"></ul>\n\n\nWe did a lot of work in laying a foundation for the app in the last step, so now we'll do something\nsimple; we will add full text search (yes, it will be simple!). We will also write an end-to-end\ntest, because a good end-to-end test is a good friend. It stays with your app, keeps an eye on it,\nand quickly detects regressions.\n\n* The app now has a search box. Notice that the phone list on the page changes depending on what a\nuser types into the search box.\n\n<div doc-tutorial-reset=\"3\"></div>\n\n\n## Controller\n\nWe made no changes to the controller.\n\n\n## Template\n\n__`app/index.html`:__\n\n```html\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-2\">\n        <!--Sidebar content-->\n\n        Search: <input ng-model=\"query\">\n\n      </div>\n      <div class=\"col-md-10\">\n        <!--Body content-->\n\n        <ul class=\"phones\">\n          <li ng-repeat=\"phone in phones | filter:query\">\n            {{phone.name}}\n            <p>{{phone.snippet}}</p>\n          </li>\n        </ul>\n\n      </div>\n    </div>\n  </div>\n```\n\nWe added a standard HTML `<input>` tag and used Angular's\n{@link ng.filter:filter filter} function to process the input for the\n{@link ng.directive:ngRepeat ngRepeat} directive.\n\nThis lets a user enter search criteria and immediately see the effects of their search on the phone\nlist. This new code demonstrates the following:\n\n* Data-binding: This is one of the core features in Angular. When the page loads, Angular binds the\nname of the input box to a variable of the same name in the data model and keeps the two in sync.\n\n  In this code, the data that a user types into the input box (named __`query`__) is immediately\navailable as a filter input in the list repeater (`phone in phones | filter:`__`query`__). When\nchanges to the data model cause the repeater's input to change, the repeater efficiently updates\nthe DOM to reflect the current state of the model.\n\n<img  class=\"diagram\" src=\"img/tutorial/tutorial_03.png\">\n\n* Use of the `filter` filter: The {@link ng.filter:filter filter} function uses the\n`query` value to create a new array that contains only those records that match the `query`.\n\n  `ngRepeat` automatically updates the view in response to the changing number of phones returned\nby the `filter` filter. The process is completely transparent to the developer.\n\n## Test\n\nIn Step 2, we learned how to write and run unit tests. Unit tests are perfect for testing\ncontrollers and other components of our application written in JavaScript, but they can't easily\ntest DOM manipulation or the wiring of our application. For these, an end-to-end test is a much\nbetter choice.\n\nThe search feature was fully implemented via templates and data-binding, so we'll write our first\nend-to-end test, to verify that the feature works.\n\n__`test/e2e/scenarios.js`:__\n\n```js\ndescribe('PhoneCat App', function() {\n\n  describe('Phone list view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html');\n    });\n\n\n    it('should filter the phone list as a user types into the search box', function() {\n\n      var phoneList = element.all(by.repeater('phone in phones'));\n      var query = element(by.model('query'));\n\n      expect(phoneList.count()).toBe(3);\n\n      query.sendKeys('nexus');\n      expect(phoneList.count()).toBe(1);\n\n      query.clear();\n      query.sendKeys('motorola');\n      expect(phoneList.count()).toBe(2);\n    });\n  });\n});\n```\n\nThis test verifies that the search box and the repeater are correctly wired together. Notice how\neasy it is to write end-to-end tests in Angular. Although this example is for a simple test, it\nreally is that easy to set up any functional, readable, end-to-end test.\n\n### Running End to End Tests with Protractor\nEven though the syntax of this test looks very much like our controller unit test written with\nJasmine, the end-to-end test uses APIs of [Protractor](https://github.com/angular/protractor). Read\nabout the Protractor APIs at http://angular.github.io/protractor/#/api.\n\nMuch like Karma is the test runner for unit tests, we use Protractor to run end-to-end tests.\nTry it with `npm run protractor`. End-to-end tests are slow, so unlike with unit tests, Protractor\nwill exit after the test run and will not automatically rerun the test suite on every file change.\nTo rerun the test suite, execute `npm run protractor` again.\n\n<div class=\"alert alert-info\">\n  Note: You must ensure your application is being served via a web-server to test with protractor.\n  You can do this using `npm start`.\n  You also need to ensure you've installed the protractor and updated webdriver prior to running the\n  `npm run protractor`. You can do this by issuing `npm install` and `npm run update-webdriver` into\n  your terminal.\n</div>\n\n\n# Experiments\n\n### Display Current Query\nDisplay the current value of the `query` model by adding a `{{query}}` binding into the\n`index.html` template, and see how it changes when you type in the input box.\n\n### Display Query in Title\nLet's see how we can get the current value of the `query` model to appear in the HTML page title.\n\n* Add an end-to-end test into the `describe` block, `test/e2e/scenarios.js` should look like this:\n\n  ```js\n    describe('PhoneCat App', function() {\n\n      describe('Phone list view', function() {\n    \n        beforeEach(function() {\n          browser.get('app/index.html');\n        });\n    \n        var phoneList = element.all(by.repeater('phone in phones'));\n        var query = element(by.model('query'));\n    \n        it('should filter the phone list as a user types into the search box', function() {\n          expect(phoneList.count()).toBe(3);\n    \n          query.sendKeys('nexus');\n          expect(phoneList.count()).toBe(1);\n    \n          query.clear();\n          query.sendKeys('motorola');\n          expect(phoneList.count()).toBe(2);\n        });\n    \n        it('should display the current filter value in the title bar', function() {\n          query.clear();\n          expect(browser.getTitle()).toMatch(/Google Phone Gallery:\\s*$/);\n    \n          query.sendKeys('nexus');\n          expect(browser.getTitle()).toMatch(/Google Phone Gallery: nexus$/);\n        });\n      });\n    });\n  ```\n\n  Run protractor (`npm run protractor`) to see this test fail.\n\n\n* You might think you could just add the `{{query}}` to the title tag element as follows:\n\n        <title>Google Phone Gallery: {{query}}</title>\n\n  However, when you reload the page, you won't see the expected result. This is because the \"query\"\n  model lives in the scope, defined by the `ng-controller=\"PhoneListCtrl\"` directive, on the body\n  element:\n\n          <body ng-controller=\"PhoneListCtrl\">\n\n  If you want to bind to the query model from the `<title>` element, you must __move__ the\n  `ngController` declaration to the HTML element because it is the common parent of both the body\n  and title elements:\n\n          <html ng-app=\"phonecatApp\" ng-controller=\"PhoneListCtrl\">\n\n  Be sure to __remove__ the `ng-controller` declaration from the body element.\n\n* Re-run `npm run protractor` to see the test now pass.\n\n* While using double curlies works fine within the title element, you might have noticed that\nfor a split second they are actually displayed to the user while the page is loading. A better\nsolution would be to use the {@link ng.directive:ngBind ngBind} or\n{@link ng.directive:ngBindTemplate ngBindTemplate} directives, which are invisible to the user\nwhile the page is loading:\n\n        <title ng-bind-template=\"Google Phone Gallery: {{query}}\">Google Phone Gallery</title>\n\n\n# Summary\n\nWe have now added full text search and included a test to verify that search works! Now let's go on\nto {@link step_04 step 4} to learn how to add sorting capability to the phone app.\n\n\n<ul doc-tutorial-nav=\"3\"></ul>\n\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_03.ngdoc",
        "module": "3 - Filtering Repeaters",
        "id": "3 - Filtering Repeaters",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "3 - Filtering Repeaters Tutorial.tutorial:3 - Filtering Repeaters downloaded/angular/angular.js-master/docs/content/tutorial/step_03.ngdoc",
        "sortOn": "3",
        "left": 8,
        "level": 1,
        "root": "Tutorial",
        "right": 9
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "4 - Two-way Data Binding",
        "step": "4",
        "description": "\n\n<ul doc-tutorial-nav=\"4\"></ul>\n\n\nIn this step, you will add a feature to let your users control the order of the items in the phone\nlist. The dynamic ordering is implemented by creating a new model property, wiring it together with\nthe repeater, and letting the data binding magic do the rest of the work.\n\n* In addition to the search box, the app displays a drop down menu that allows users to control the\n  order in which the phones are listed.\n\n\n<div doc-tutorial-reset=\"4\"></div>\n\n\n## Template\n\n__`app/index.html`:__\n\n```html\n  Search: <input ng-model=\"query\">\n  Sort by:\n  <select ng-model=\"orderProp\">\n    <option value=\"name\">Alphabetical</option>\n    <option value=\"age\">Newest</option>\n  </select>\n\n\n  <ul class=\"phones\">\n    <li ng-repeat=\"phone in phones | filter:query | orderBy:orderProp\">\n      <span>{{phone.name}}</span>\n      <p>{{phone.snippet}}</p>\n    </li>\n  </ul>\n```\n\nWe made the following changes to the `index.html` template:\n\n* First, we added a `<select>` html element named `orderProp`, so that our users can pick from the\ntwo provided sorting options.\n\n<img class=\"diagram\" src=\"img/tutorial/tutorial_04.png\">\n\n* We then chained the `filter` filter with {@link ng.filter:orderBy `orderBy`}\nfilter to further process the input into the repeater. `orderBy` is a filter that takes an input\narray, copies it and reorders the copy which is then returned.\n\nAngular creates a two way data-binding between the select element and the `orderProp` model.\n`orderProp` is then used as the input for the `orderBy` filter.\n\nAs we discussed in the section about data-binding and the repeater in step 3, whenever the model\nchanges (for example because a user changes the order with the select drop down menu), Angular's\ndata-binding will cause the view to automatically update. No bloated DOM manipulation code is\nnecessary!\n\n\n\n## Controller\n\n__`app/js/controllers.js`:__\n\n```js\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope) {\n  $scope.phones = [\n    {'name': 'Nexus S',\n     'snippet': 'Fast just got faster with Nexus S.',\n     'age': 1},\n    {'name': 'Motorola XOOM™ with Wi-Fi',\n     'snippet': 'The Next, Next Generation tablet.',\n     'age': 2},\n    {'name': 'MOTOROLA XOOM™',\n     'snippet': 'The Next, Next Generation tablet.',\n     'age': 3}\n  ];\n\n  $scope.orderProp = 'age';\n});\n```\n\n* We modified the `phones` model - the array of phones - and added an `age` property to each phone\nrecord. This property is used to order phones by age.\n\n* We added a line to the controller that sets the default value of `orderProp` to `age`. If we had\nnot set a default value here, the `orderBy` filter would remain uninitialized until our\nuser picked an option from the drop down menu.\n\n  This is a good time to talk about two-way data-binding. Notice that when the app is loaded in the\nbrowser, \"Newest\" is selected in the drop down menu. This is because we set `orderProp` to `'age'`\nin the controller. So the binding works in the direction from our model to the UI. Now if you\nselect \"Alphabetically\" in the drop down menu, the model will be updated as well and the phones\nwill be reordered. That is the data-binding doing its job in the opposite direction — from the UI\nto the model.\n\n\n\n## Test\n\nThe changes we made should be verified with both a unit test and an end-to-end test. Let's look at\nthe unit test first.\n\n__`test/unit/controllersSpec.js`:__\n\n```js\ndescribe('PhoneCat controllers', function() {\n\n  describe('PhoneListCtrl', function(){\n    var scope, ctrl;\n\n    beforeEach(module('phonecatApp'));\n\n    beforeEach(inject(function($controller) {\n      scope = {};\n      ctrl = $controller('PhoneListCtrl', {$scope:scope});\n    }));\n\n    it('should create \"phones\" model with 3 phones', function() {\n      expect(scope.phones.length).toBe(3);\n    });\n\n\n    it('should set the default value of orderProp model', function() {\n      expect(scope.orderProp).toBe('age');\n    });\n  });\n});\n```\n\n\nThe unit test now verifies that the default ordering property is set.\n\nWe used Jasmine's API to extract the controller construction into a `beforeEach` block, which is\nshared by all tests in the parent `describe` block.\n\nYou should now see the following output in the Karma tab:\n\n<pre>Chrome 22.0: Executed 2 of 2 SUCCESS (0.021 secs / 0.001 secs)</pre>\n\n\nLet's turn our attention to the end-to-end test.\n\n__`test/e2e/scenarios.js`:__\n\n```js\n...\n    it('should be possible to control phone order via the drop down select box', function() {\n\n      var phoneNameColumn = element.all(by.repeater('phone in phones').column('phone.name'));\n      var query = element(by.model('query'));\n\n      function getNames() {\n        return phoneNameColumn.map(function(elm) {\n          return elm.getText();\n        });\n      }\n\n      query.sendKeys('tablet'); //let's narrow the dataset to make the test assertions shorter\n\n      expect(getNames()).toEqual([\n        \"Motorola XOOM\\u2122 with Wi-Fi\",\n        \"MOTOROLA XOOM\\u2122\"\n      ]);\n\n      element(by.model('orderProp')).element(by.css('option[value=\"name\"]')).click();\n\n      expect(getNames()).toEqual([\n        \"MOTOROLA XOOM\\u2122\",\n        \"Motorola XOOM\\u2122 with Wi-Fi\"\n      ]);\n    });...\n```\n\nThe end-to-end test verifies that the ordering mechanism of the select box is working correctly.\n\nYou can now rerun `npm run protractor` to see the tests run.\n\n# Experiments\n\n* In the `PhoneListCtrl` controller, remove the statement that sets the `orderProp` value and\nyou'll see that Angular will temporarily add a new blank (\"unknown\") option to the drop-down list and the\nordering will default to unordered/natural order.\n\n* Add an `{{orderProp}}` binding into the `index.html` template to display its current value as\ntext.\n\n* Reverse the sort order by adding a `-` symbol before the sorting value: `<option value=\"-age\">Oldest</option>`\n\n# Summary\n\nNow that you have added list sorting and tested the app, go to {@link step_05 step 5} to learn\nabout Angular services and how Angular uses dependency injection.\n\n\n<ul doc-tutorial-nav=\"4\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_04.ngdoc",
        "module": "4 - Two-way Data Binding",
        "id": "4 - Two-way Data Binding",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "4 - Two-way Data Binding Tutorial.tutorial:4 - Two-way Data Binding downloaded/angular/angular.js-master/docs/content/tutorial/step_04.ngdoc",
        "sortOn": "4",
        "left": 10,
        "level": 1,
        "root": "Tutorial",
        "right": 11
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "5 - XHRs & Dependency Injection",
        "step": "5",
        "description": "\n\n<ul doc-tutorial-nav=\"5\"></ul>\n\n\nEnough of building an app with three phones in a hard-coded dataset! Let's fetch a larger dataset\nfrom our server using one of Angular's built-in {@link guide/services services} called {@link\nng.$http $http}. We will use Angular's {@link guide/di dependency\ninjection (DI)} to provide the service to the `PhoneListCtrl` controller.\n\n* There is now a list of 20 phones, loaded from the server.\n\n<div doc-tutorial-reset=\"5\"></div>\n\n\n## Data\nThe `app/phones/phones.json` file in your project is a dataset that contains a larger list of phones\nstored in the JSON format.\n\nFollowing is a sample of the file:\n\n```js\n[\n {\n  \"age\": 13,\n  \"id\": \"motorola-defy-with-motoblur\",\n  \"name\": \"Motorola DEFY\\u2122 with MOTOBLUR\\u2122\",\n  \"snippet\": \"Are you ready for everything life throws your way?\"\n  ...\n },\n...\n]\n```\n\n\n## Controller\n\nWe'll use Angular's {@link ng.$http $http} service in our controller to make an HTTP\nrequest to your web server to fetch the data in the `app/phones/phones.json` file. `$http` is just\none of several built-in {@link guide/services Angular services} that handle common operations\nin web apps. Angular injects these services for you where you need them.\n\nServices are managed by Angular's {@link guide/di DI subsystem}. Dependency injection\nhelps to make your web apps both well-structured (e.g., separate components for presentation, data,\nand control) and loosely coupled (dependencies between components are not resolved by the\ncomponents themselves, but by the DI subsystem).\n\n__`app/js/controllers.js:`__\n\n```js\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', function ($scope, $http) {\n  $http.get('phones/phones.json').success(function(data) {\n    $scope.phones = data;\n  });\n\n  $scope.orderProp = 'age';\n});\n```\n\n`$http` makes an HTTP GET request to our web server, asking for `phones/phones.json` (the url is\nrelative to our `index.html` file). The server responds by providing the data in the json file.\n(The response might just as well have been dynamically generated by a backend server. To the\nbrowser and our app they both look the same. For the sake of simplicity we used a json file in this\ntutorial.)\n\nThe `$http` service returns a {@link ng.$q promise object} with a `success`\nmethod. We call this method to handle the asynchronous response and assign the phone data to the\nscope controlled by this controller, as a model called `phones`. Notice that Angular detected the\njson response and parsed it for us!\n\nTo use a service in Angular, you simply declare the names of the dependencies you need as arguments\nto the controller's constructor function, as follows:\n\n    phonecatApp.controller('PhoneListCtrl', function ($scope, $http) {...}\n\nAngular's dependency injector provides services to your controller when the controller is being\nconstructed. The dependency injector also takes care of creating any transitive dependencies the\nservice may have (services often depend upon other services).\n\nNote that the names of arguments are significant, because the injector uses these to look up the\ndependencies.\n\n\n<img  class=\"diagram\" src=\"img/tutorial/tutorial_05.png\">\n\n\n### `$` Prefix Naming Convention\n\nYou can create your own services, and in fact we will do exactly that in step 11. As a naming\nconvention, Angular's built-in services, Scope methods and a few other Angular APIs have a `$`\nprefix in front of the name.\n\nThe `$` prefix is there to namespace Angular-provided services.\nTo prevent collisions it's best to avoid naming your services and models anything that begins with a `$`.\n\nIf you inspect a Scope, you may also notice some properties that begin with `$$`. These\nproperties are considered private, and should not be accessed or modified.\n\n\n### A Note on Minification\n\nSince Angular infers the controller's dependencies from the names of arguments to the controller's\nconstructor function, if you were to [minify](http://goo.gl/SAnnsm) the JavaScript code for\n`PhoneListCtrl` controller, all of its function arguments would be minified as well, and the\ndependency injector would not be able to identify services correctly.\n\nWe can overcome this problem by annotating the function with the names of the dependencies, provided\nas strings, which will not get minified. There are two ways to provide these injection annotations:\n\n* Create a `$inject` property on the controller function which holds an array of strings.\n  Each string in the array is the name of the service to inject for the corresponding parameter.\n  In our example we would write:\n\n  ```js\n      function PhoneListCtrl($scope, $http) {...}\n      PhoneListCtrl.$inject = ['$scope', '$http'];\n      phonecatApp.controller('PhoneListCtrl', PhoneListCtrl);\n  ```\n\n* Use an inline annotation where, instead of just providing the function, you provide an array.\n  This array contains a list of the service names, followed by the function itself.\n\n  ```js\n      function PhoneListCtrl($scope, $http) {...}\n      phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', PhoneListCtrl]);\n  ```\n\nBoth of these methods work with any function that can be injected by Angular, so it's up to your\nproject's style guide to decide which one you use.\n\nWhen using the second method, it is common to provide the constructor function inline as an\nanonymous function when registering the controller:\n\n```js\n    phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', function($scope, $http) {...}]);\n```\n\nFrom this point onward, we're going to use the inline method in the tutorial. With that in mind,\nlet's add the annotations to our `PhoneListCtrl`:\n\n__`app/js/controllers.js:`__\n\n```js\nvar phonecatApp = angular.module('phonecatApp', []);\n\nphonecatApp.controller('PhoneListCtrl', ['$scope', '$http',\n  function ($scope, $http) {\n    $http.get('phones/phones.json').success(function(data) {\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = 'age';\n  }]);\n```\n\n## Test\n\n__`test/unit/controllersSpec.js`:__\n\nBecause we started using dependency injection and our controller has dependencies, constructing the\ncontroller in our tests is a bit more complicated. We could use the `new` operator and provide the\nconstructor with some kind of fake `$http` implementation. However, Angular provides a mock `$http`\nservice that we can use in unit tests.  We configure \"fake\" responses to server requests by calling\nmethods on a service called `$httpBackend`:\n\n```js\ndescribe('PhoneCat controllers', function() {\n\n  describe('PhoneListCtrl', function(){\n    var scope, ctrl, $httpBackend;\n\n    // Load our app module definition before each test.\n    beforeEach(module('phonecatApp'));\n\n    // The injector ignores leading and trailing underscores here (i.e. _$httpBackend_).\n    // This allows us to inject a service but then attach it to a variable\n    // with the same name as the service in order to avoid a name conflict.\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/phones.json').\n          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);\n\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneListCtrl', {$scope: scope});\n    }));\n```\n\nNote: Because we loaded Jasmine and `angular-mocks.js` in our test environment, we got two helper\nmethods {@link angular.mock.module module} and {@link angular.mock.inject inject} that we'll\nuse to access and configure the injector.\n\nWe created the controller in the test environment, as follows:\n\n* We used the `inject` helper method to inject instances of\n{@link ng.$rootScope $rootScope},\n{@link ng.$controller $controller} and\n{@link ng.$httpBackend $httpBackend} services into the Jasmine's `beforeEach`\nfunction. These instances come from an injector which is recreated from scratch for every single\ntest. This guarantees that each test starts from a well known starting point and each test is\nisolated from the work done in other tests.\n\n* We created a new scope for our controller by calling `$rootScope.$new()`\n\n* We called the injected `$controller` function passing the name of the `PhoneListCtrl` controller\nand the created scope as parameters.\n\nBecause our code now uses the `$http` service to fetch the phone list data in our controller, before\nwe create the `PhoneListCtrl` child scope, we need to tell the testing harness to expect an\nincoming request from the controller. To do this we:\n\n* Request `$httpBackend` service to be injected into our `beforeEach` function. This is a mock\nversion of the service that in a production environment facilitates all XHR and JSONP requests.\nThe mock version of this service allows you to write tests without having to deal with\nnative APIs and the global state associated with them — both of which make testing a nightmare.\n\n* Use the `$httpBackend.expectGET` method to train the `$httpBackend` service to expect an incoming\nHTTP request and tell it what to respond with. Note that the responses are not returned until we call\nthe `$httpBackend.flush` method.\n\nNow we will make assertions to verify that the `phones` model doesn't exist on `scope` before\nthe response is received:\n\n```js\n    it('should create \"phones\" model with 2 phones fetched from xhr', function() {\n      expect(scope.phones).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phones).toEqual([{name: 'Nexus S'},\n                                   {name: 'Motorola DROID'}]);\n    });\n```\n\n* We flush the request queue in the browser by calling `$httpBackend.flush()`. This causes the\npromise returned by the `$http` service to be resolved with the trained response. See \n'Flushing HTTP requests' in the {@link ngMock.$httpBackend mock $httpBackend} documentation for \na full explanation of why this is necessary.\n\n* We make the assertions, verifying that the phone model now exists on the scope.\n\nFinally, we verify that the default value of `orderProp` is set correctly:\n\n```js\n    it('should set the default value of orderProp model', function() {\n      expect(scope.orderProp).toBe('age');\n    });\n```\n\nYou should now see the following output in the Karma tab:\n\n<pre>Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)</pre>\n\n\n\n# Experiments\n\n* At the bottom of `index.html`, add a `<pre>{{phones | filter:query | orderBy:orderProp | json}}</pre>` \nbinding to see the list of phones displayed in json format.  \n\n* In the `PhoneListCtrl` controller, pre-process the http response by limiting the number of phones\nto the first 5 in the list. Use the following code in the `$http` callback:\n\n         $scope.phones = data.splice(0, 5);\n\n\n# Summary\n\nNow that you have learned how easy it is to use Angular services (thanks to Angular's dependency\ninjection), go to {@link step_06 step 6}, where you will add some\nthumbnail images of phones and some links.\n\n\n<ul doc-tutorial-nav=\"5\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_05.ngdoc",
        "module": "5 - XHRs & Dependency Injection",
        "id": "5 - XHRs & Dependency Injection",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "5 - XHRs & Dependency Injection Tutorial.tutorial:5 - XHRs & Dependency Injection downloaded/angular/angular.js-master/docs/content/tutorial/step_05.ngdoc",
        "sortOn": "5",
        "left": 12,
        "level": 1,
        "root": "Tutorial",
        "right": 13
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "6 - Templating Links & Images",
        "step": "6",
        "description": "\n\n<ul doc-tutorial-nav=\"6\"></ul>\n\n\nIn this step, you will add thumbnail images for the phones in the phone list, and links that, for\nnow, will go nowhere. In subsequent steps you will use the links to display additional information\nabout the phones in the catalog.\n\n* There are now links and images of the phones in the list.\n\n<div doc-tutorial-reset=\"6\"></div>\n\n## Data\n\nNote that the `phones.json` file contains unique IDs and image URLs for each of the phones. The\nURLs point to the `app/img/phones/` directory.\n\n__`app/phones/phones.json`__ (sample snippet):\n\n```js\n[\n  {\n    ...\n    \"id\": \"motorola-defy-with-motoblur\",\n    \"imageUrl\": \"img/phones/motorola-defy-with-motoblur.0.jpg\",\n    \"name\": \"Motorola DEFY\\u2122 with MOTOBLUR\\u2122\",\n    ...\n  },\n  ...\n]\n```\n\n\n## Template\n\n__`app/index.html`:__\n\n```html\n...\n        <ul class=\"phones\">\n          <li ng-repeat=\"phone in phones | filter:query | orderBy:orderProp\" class=\"thumbnail\">\n            <a href=\"#/phones/{{phone.id}}\" class=\"thumb\"><img ng-src=\"{{phone.imageUrl}}\"></a>\n            <a href=\"#/phones/{{phone.id}}\">{{phone.name}}</a>\n            <p>{{phone.snippet}}</p>\n          </li>\n        </ul>\n...\n```\n\nTo dynamically generate links that will in the future lead to phone detail pages, we used the\nnow-familiar double-curly brace binding in the `href` attribute values. In step 2, we added the\n`{{phone.name}}` binding as the element content. In this step the `{{phone.id}}` binding is used in\nthe element attribute.\n\nWe also added phone images next to each record using an image tag with the {@link\nng.directive:ngSrc ngSrc} directive. That directive prevents the\nbrowser from treating the Angular `{{ expression }}` markup literally, and initiating a request to\ninvalid URL `http://localhost:8000/app/{{phone.imageUrl}}`, which it would have done if we had only\nspecified an attribute binding in a regular `src` attribute (`<img src=\"{{phone.imageUrl}}\">`).\nUsing the `ngSrc` directive prevents the browser from making an http request to an invalid location.\n\n\n## Test\n\n__`test/e2e/scenarios.js`__:\n\n```js\n...\n    it('should render phone specific links', function() {\n      var query = element(by.model('query'));\n      query.sendKeys('nexus');\n      element.all(by.css('.phones li a')).first().click();\n      browser.getLocationAbsUrl().then(function(url) {\n        expect(url.split('#')[1]).toBe('/phones/nexus-s');\n      });\n    });\n...\n```\n\nWe added a new end-to-end test to verify that the app is generating correct links to the phone\nviews that we will implement in the upcoming steps.\n\nYou can now rerun `npm run protractor` to see the tests run.\n\n\n# Experiments\n\n* Replace the `ng-src` directive with a plain old `src` attribute. Using tools such as Firebug,\nor Chrome's Web Inspector, or inspecting the webserver access logs, confirm that the app is indeed\nmaking an extraneous request to `/app/%7B%7Bphone.imageUrl%7D%7D` (or\n`/app/{{phone.imageUrl}}`).\n\n  The issue here is that the browser will fire a request for that invalid image address as soon as\nit hits the `img` tag, which is before Angular has a chance to evaluate the expression and inject\nthe valid address.\n\n\n# Summary\n\nNow that you have added phone images and links, go to {@link step_07 step 7} to learn about Angular\nlayout templates and how Angular makes it easy to create applications that have multiple views.\n\n\n<ul doc-tutorial-nav=\"6\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_06.ngdoc",
        "module": "6 - Templating Links & Images",
        "id": "6 - Templating Links & Images",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "6 - Templating Links & Images Tutorial.tutorial:6 - Templating Links & Images downloaded/angular/angular.js-master/docs/content/tutorial/step_06.ngdoc",
        "sortOn": "6",
        "left": 14,
        "level": 1,
        "root": "Tutorial",
        "right": 15
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "7 - Routing & Multiple Views",
        "step": "7",
        "description": "\n\n<ul doc-tutorial-nav=\"7\"></ul>\n\n\nIn this step, you will learn how to create a layout template and how to build an app that has\nmultiple views by adding routing, using an Angular module called 'ngRoute'.\n\n* When you now navigate to `app/index.html`, you are redirected to `app/index.html/#/phones`\n  and the phone list appears in the browser.\n* When you click on a phone link, the url changes to that specific phone and the stub of a\n  phone detail page is displayed.\n\n<div doc-tutorial-reset=\"7\"></div>\n\n## Dependencies\n\nThe routing functionality added by this step is provided by angular in the `ngRoute` module, which\nis distributed separately from the core Angular framework.\n\nWe are using [Bower][bower] to install client-side dependencies.  This step updates the\n`bower.json` configuration file to include the new dependency:\n\n```json\n{\n  \"name\": \"angular-phonecat\",\n  \"description\": \"A starter project for AngularJS\",\n  \"version\": \"0.0.0\",\n  \"homepage\": \"https://github.com/angular/angular-phonecat\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"dependencies\": {\n    \"angular\": \"~1.3.0\",\n    \"angular-mocks\": \"~1.3.0\",\n    \"jquery\": \"2.1.1\",\n    \"bootstrap\": \"~3.1.1\",\n    \"angular-route\": \"~1.3.0\"\n  }\n}\n```\n\nThe new dependency `\"angular-route\": \"~1.3.0\"` tells bower to install a version of the\nangular-route component that is compatible with version 1.3.x.  We must tell bower to download\nand install this dependency.\n\nIf you have bower installed globally, then you can run `bower install` but for this project, we have\npreconfigured npm to run bower install for us:\n\n```\nnpm install\n```\n\n\n## Multiple Views, Routing and Layout Template\n\nOur app is slowly growing and becoming more complex. Before step 7, the app provided our users with\na single view (the list of all phones), and all of the template code was located in the\n`index.html` file. The next step in building the app is to add a view that will show detailed\ninformation about each of the devices in our list.\n\nTo add the detailed view, we could expand the `index.html` file to contain template code for both\nviews, but that would get messy very quickly. Instead, we are going to turn the `index.html`\ntemplate into what we call a \"layout template\". This is a template that is common for all views in\nour application. Other \"partial templates\" are then included into this layout template depending on\nthe current \"route\" — the view that is currently displayed to the user.\n\nApplication routes in Angular are declared via the {@link ngRoute.$routeProvider $routeProvider},\nwhich is the provider of the {@link ngRoute.$route $route service}. This service makes it easy to\nwire together controllers, view templates, and the current URL location in the browser. Using this\nfeature, we can implement [deep linking](http://en.wikipedia.org/wiki/Deep_linking), which lets us\nutilize the browser's history (back and forward navigation) and bookmarks.\n\n\n### A Note About DI, Injector and Providers\n\nAs you {@link tutorial/step_05 noticed}, {@link guide/di dependency injection} (DI) is at the core of\nAngularJS, so it's important for you to understand a thing or two about how it works.\n\nWhen the application bootstraps, Angular creates an injector that will be used to find and inject all\nof the services that are required by your app. The injector itself doesn't know anything about what\n`$http` or `$route` services do. In fact, the injector doesn't even know about the existence of these services\nunless it is configured with proper module definitions.\n\nThe injector only carries out the following steps :\n\n * load the module definition(s) that you specify in your app\n * register all Providers defined in these module definitions\n * when asked to do so, inject a specified function and any necessary dependencies (services) that\n   it lazily instantiates via their Providers.\n\nProviders are objects that provide (create) instances of services and expose configuration APIs\nthat can be used to control the creation and runtime behavior of a service. In case of the `$route`\nservice, the `$routeProvider` exposes APIs that allow you to define routes for your application.\n\n<div class=\"alert alert-warning\">\n**Note:** Providers can only be injected into `config` functions. Thus you could not inject\n`$routeProvider` into `PhoneListCtrl`.\n</div>\n\nAngular modules solve the problem of removing global state from the application and provide a way\nof configuring the injector. As opposed to AMD or require.js modules, Angular modules don't try to\nsolve the problem of script load ordering or lazy script fetching. These goals are totally independent and\nboth module systems can live side by side and fulfill their goals.\n\nTo deepen your understanding of DI on Angular, see\n[Understanding Dependency Injection](https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection).\n\n## Template\n\nThe `$route` service is usually used in conjunction with the {@link ngRoute.directive:ngView\nngView} directive. The role of the `ngView` directive is to include the view template for the current\nroute into the layout template. This makes it a perfect fit for our `index.html` template.\n\n<div class=\"alert alert-info\">\n**Note:** Starting with AngularJS version 1.2, `ngRoute` is in its own module and must be loaded by\nloading the additional `angular-route.js` file, which we download via Bower above.\n</div>\n\n__`app/index.html`:__\n\n```html\n<!doctype html>\n<html lang=\"en\" ng-app=\"phonecatApp\">\n<head>\n...\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"bower_components/angular-route/angular-route.js\"></script>\n  <script src=\"js/app.js\"></script>\n  <script src=\"js/controllers.js\"></script>\n</head>\n<body>\n\n  <div ng-view></div>\n\n</body>\n</html>\n```\n\nWe have added two new `<script>` tags in our index file to load up extra JavaScript files into our\napplication:\n\n- `angular-route.js` : defines the Angular `ngRoute` module, which provides us with routing.\n- `app.js` : this file now holds the root module of our application.\n\nNote that we removed most of the code in the `index.html` template and replaced it with a single\nline containing a div with the `ng-view` attribute. The code that we removed was placed into the\n`phone-list.html` template:\n\n__`app/partials/phone-list.html`:__\n\n```html\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n      <!--Sidebar content-->\n\n      Search: <input ng-model=\"query\">\n      Sort by:\n      <select ng-model=\"orderProp\">\n        <option value=\"name\">Alphabetical</option>\n        <option value=\"age\">Newest</option>\n      </select>\n\n    </div>\n    <div class=\"col-md-10\">\n      <!--Body content-->\n\n      <ul class=\"phones\">\n        <li ng-repeat=\"phone in phones | filter:query | orderBy:orderProp\" class=\"thumbnail\">\n          <a href=\"#/phones/{{phone.id}}\" class=\"thumb\"><img ng-src=\"{{phone.imageUrl}}\"></a>\n          <a href=\"#/phones/{{phone.id}}\">{{phone.name}}</a>\n          <p>{{phone.snippet}}</p>\n        </li>\n      </ul>\n\n    </div>\n  </div>\n</div>\n```\n\n<div style=\"display:none\">\nTODO!\n<img  class=\"diagram\" src=\"img/tutorial/tutorial_07_final.png\">\n</div>\n\nWe also added a placeholder template for the phone details view:\n\n__`app/partials/phone-detail.html`:__\n\n```html\nTBD: detail view for <span>{{phoneId}}</span>\n```\n\nNote how we are using the `phoneId` expression which will be defined in the `PhoneDetailCtrl` controller.\n\n## The App Module\n\nTo improve the organization of the app, we are making use of Angular's `ngRoute` module and we've\nmoved the controllers into their own module `phonecatControllers` (as shown below).\n\nWe added `angular-route.js` to `index.html` and created a new `phonecatControllers` module in\n`controllers.js`. That's not all we need to do to be able to use their code, however. We also have\nto add the modules as dependencies of our app. By listing these two modules as dependencies of\n`phonecatApp`, we can use the directives and services they provide.\n\n\n__`app/js/app.js`:__\n\n```js\nvar phonecatApp = angular.module('phonecatApp', [\n  'ngRoute',\n  'phonecatControllers'\n]);\n\n...\n```\n\nNotice the second argument passed to `angular.module`, `['ngRoute', 'phonecatControllers']`. This\narray lists the modules that `phonecatApp` depends on.\n\n\n```js\n...\n\nphonecatApp.config(['$routeProvider',\n  function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html',\n        controller: 'PhoneListCtrl'\n      }).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html',\n        controller: 'PhoneDetailCtrl'\n      }).\n      otherwise({\n        redirectTo: '/phones'\n      });\n  }]);\n```\n\nUsing the `phonecatApp.config()` method, we request the `$routeProvider` to be injected into our\nconfig function and use the {@link ngRoute.$routeProvider#when `$routeProvider.when()`} method to\ndefine our routes.\n\nOur application routes are defined as follows:\n\n* `when('/phones')`: The phone list view will be shown when the URL hash fragment is `/phones`. To\n  construct this view, Angular will use the `phone-list.html` template and the `PhoneListCtrl`\n  controller.\n\n* `when('/phones/:phoneId')`: The phone details view will be shown when the URL hash fragment\n  matches '/phones/:phoneId', where `:phoneId` is a variable part of the URL. To construct the phone\n  details view, Angular will use the `phone-detail.html` template and the `PhoneDetailCtrl`\n  controller.\n\n* `otherwise({redirectTo: '/phones'})`:  triggers a redirection to `/phones` when the browser\n  address doesn't match either of our routes.\n\n\nWe reused the `PhoneListCtrl` controller that we constructed in previous steps and we added a new,\nempty `PhoneDetailCtrl` controller to the `app/js/controllers.js` file for the phone details view.\n\n\nNote the use of the `:phoneId` parameter in the second route declaration. The `$route` service uses\nthe route declaration — `'/phones/:phoneId'` — as a template that is matched against the current\nURL. All variables defined with the `:` notation are extracted into the\n{@link ngRoute.$routeParams `$routeParams`} object.\n\n\n## Controllers\n\n__`app/js/controllers.js`:__\n\n```js\nvar phonecatControllers = angular.module('phonecatControllers', []);\n\nphonecatControllers.controller('PhoneListCtrl', ['$scope', '$http',\n  function ($scope, $http) {\n    $http.get('phones/phones.json').success(function(data) {\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = 'age';\n  }]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams',\n  function($scope, $routeParams) {\n    $scope.phoneId = $routeParams.phoneId;\n  }]);\n```\n\nAgain, note that we created a new module called `phonecatControllers`. For small AngularJS\napplications, it's common to create just one module for all of your controllers if there are just a\nfew. As your application grows, it is quite common to refactor your code into additional modules.\nFor larger apps, you will probably want to create separate modules for each major feature of\nyour app.\n\nBecause our example app is relatively small, we'll just add all of our controllers to the\n`phonecatControllers` module.\n\n\n## Test\n\nTo automatically verify that everything is wired properly, we wrote end-to-end tests that navigate\nto various URLs and verify that the correct view was rendered.\n\n```js\n...\n   it('should redirect index.html to index.html#/phones', function() {\n    browser.get('app/index.html');\n    browser.getLocationAbsUrl().then(function(url) {\n        expect(url.split('#')[1]).toBe('/phones');\n      });\n  });\n\n  describe('Phone list view', function() {\n    beforeEach(function() {\n      browser.get('app/index.html#/phones');\n    });\n...\n\n  describe('Phone detail view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html#/phones/nexus-s');\n    });\n\n\n    it('should display placeholder page with phoneId', function() {\n      expect(element(by.binding('phoneId')).getText()).toBe('nexus-s');\n    });\n  });\n```\n\n\nYou can now rerun `npm run protractor` to see the tests run.\n\n\n# Experiments\n\n* Try to add an `{{orderProp}}` binding to `index.html`, and you'll see that nothing happens even\nwhen you are in the phone list view. This is because the `orderProp` model is visible only in the\nscope managed by `PhoneListCtrl`, which is associated with the `<div ng-view>` element. If you add\nthe same binding into the `phone-list.html` template, the binding will work as expected.\n\n<div style=\"display: none\">\n* In `PhoneCatCtrl`, create a new model called \"`hero`\" with `this.hero = 'Zoro'`. In\n`PhoneListCtrl`, let's shadow it with `this.hero = 'Batman'`. In `PhoneDetailCtrl`, we'll use\n`this.hero = \"Captain Proton\"`. Then add the `<p>hero = {{hero}}</p>` to all three of our templates\n(`index.html`, `phone-list.html`, and `phone-detail.html`). Open the app and you'll see scope\ninheritance and model property shadowing do some wonders.\n</div>\n\n\n# Summary\n\nWith the routing set up and the phone list view implemented, we're ready to go to {@link step_08\nstep 8} to implement the phone details view.\n\n\n<ul doc-tutorial-nav=\"7\"></ul>\n\n\n[bower]: http://bower.io\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_07.ngdoc",
        "module": "7 - Routing & Multiple Views",
        "id": "7 - Routing & Multiple Views",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "7 - Routing & Multiple Views Tutorial.tutorial:7 - Routing & Multiple Views downloaded/angular/angular.js-master/docs/content/tutorial/step_07.ngdoc",
        "sortOn": "7",
        "left": 16,
        "level": 1,
        "root": "Tutorial",
        "right": 17
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "8 - More Templating",
        "step": "8",
        "description": "\n\n<ul doc-tutorial-nav=\"8\"></ul>\n\n\nIn this step, you will implement the phone details view, which is displayed when a user clicks on a\nphone in the phone list.\n\n* When you click on a phone on the list, the phone details page with phone-specific information\nis displayed.\n\nTo implement the phone details view we used {@link ng.$http $http} to fetch our data, and we\nfleshed out the `phone-detail.html` view template.\n\n<div doc-tutorial-reset=\"8\"></div>\n\n\n## Data\n\nIn addition to `phones.json`, the `app/phones/` directory also contains one JSON file for each\nphone:\n\n__`app/phones/nexus-s.json`:__ (sample snippet)\n\n```js\n{\n  \"additionalFeatures\": \"Contour Display, Near Field Communications (NFC),...\",\n  \"android\": {\n      \"os\": \"Android 2.3\",\n      \"ui\": \"Android\"\n  },\n  ...\n  \"images\": [\n      \"img/phones/nexus-s.0.jpg\",\n      \"img/phones/nexus-s.1.jpg\",\n      \"img/phones/nexus-s.2.jpg\",\n      \"img/phones/nexus-s.3.jpg\"\n  ],\n  \"storage\": {\n      \"flash\": \"16384MB\",\n      \"ram\": \"512MB\"\n  }\n}\n```\n\n\nEach of these files describes various properties of the phone using the same data structure. We'll\nshow this data in the phone detail view.\n\n\n## Controller\n\nWe'll expand the `PhoneDetailCtrl` by using the `$http` service to fetch the JSON files. This works\nthe same way as the phone list controller.\n\n__`app/js/controllers.js`:__\n\n```js\nvar phonecatControllers = angular.module('phonecatControllers',[]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams', '$http',\n  function($scope, $routeParams, $http) {\n    $http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {\n      $scope.phone = data;\n    });\n  }]);\n```\n\nTo construct the URL for the HTTP request, we use `$routeParams.phoneId` extracted from the current\nroute by the `$route` service.\n\n\n## Template\n\nThe TBD placeholder line has been replaced with lists and bindings that comprise the phone details.\nNote where we use the Angular `{{expression}}` markup and `ngRepeat` to project phone data from\nour model into the view.\n\n\n__`app/partials/phone-detail.html`:__\n\n```html\n<img ng-src=\"{{phone.images[0]}}\" class=\"phone\">\n\n<h1>{{phone.name}}</h1>\n\n<p>{{phone.description}}</p>\n\n<ul class=\"phone-thumbs\">\n  <li ng-repeat=\"img in phone.images\">\n    <img ng-src=\"{{img}}\">\n  </li>\n</ul>\n\n<ul class=\"specs\">\n  <li>\n    <span>Availability and Networks</span>\n    <dl>\n      <dt>Availability</dt>\n      <dd ng-repeat=\"availability in phone.availability\">{{availability}}</dd>\n    </dl>\n  </li>\n    ...\n  <li>\n    <span>Additional Features</span>\n    <dd>{{phone.additionalFeatures}}</dd>\n  </li>\n</ul>\n```\n\n<div style=\"display: none\">\nTODO!\n<img  class=\"diagram\" src=\"img/tutorial/tutorial_08-09_final.png\">\n</div>\n\n## Test\n\nWe wrote a new unit test that is similar to the one we wrote for the `PhoneListCtrl` controller in\nstep 5.\n\n__`test/unit/controllersSpec.js`:__\n\n```js\n\n  beforeEach(module('phonecatApp'));\n\n  ...\n\n  describe('PhoneDetailCtrl', function(){\n    var scope, $httpBackend, ctrl;\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $routeParams, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond({name:'phone xyz'});\n\n      $routeParams.phoneId = 'xyz';\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneDetailCtrl', {$scope: scope});\n    }));\n\n\n    it('should fetch phone detail', function() {\n      expect(scope.phone).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqual({name:'phone xyz'});\n    });\n  });\n...\n```\n\nYou should now see the following output in the Karma tab:\n\n<pre>Chrome 22.0: Executed 3 of 3 SUCCESS (0.039 secs / 0.012 secs)</pre>\n\n\nWe also added a new end-to-end test that navigates to the Nexus S detail page and verifies that the\nheading on the page is \"Nexus S\".\n\n__`test/e2e/scenarios.js`:__\n\n```js\n...\n  describe('Phone detail view', function() {\n\n    beforeEach(function() {\n      browser.get('app/index.html#/phones/nexus-s');\n    });\n\n\n    it('should display nexus-s page', function() {\n      expect(element(by.binding('phone.name')).getText()).toBe('Nexus S');\n    });\n  });\n...\n```\n\n\nYou can now rerun `npm run protractor` to see the tests run.\n\n\n# Experiments\n\n* Using the [Protractor API](http://angular.github.io/protractor/#/api),\nwrite a test that verifies that we display 4 thumbnail images on the Nexus S details page.\n\n\n# Summary\n\nNow that the phone details view is in place, proceed to {@link step_09 step 9} to learn how to\nwrite your own custom display filter.\n\n\n<ul doc-tutorial-nav=\"8\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_08.ngdoc",
        "module": "8 - More Templating",
        "id": "8 - More Templating",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "8 - More Templating Tutorial.tutorial:8 - More Templating downloaded/angular/angular.js-master/docs/content/tutorial/step_08.ngdoc",
        "sortOn": "8",
        "left": 18,
        "level": 1,
        "root": "Tutorial",
        "right": 19
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "9 - Filters",
        "step": "9",
        "description": "\n\n<ul doc-tutorial-nav=\"9\"></ul>\n\nIn this step you will learn how to create your own custom display filter.\n\n* In the previous step, the details page displayed either \"true\" or \"false\" to indicate whether\ncertain phone features were present or not. We have used a custom filter to convert those text\nstrings into glyphs: ✓ for \"true\", and ✘ for \"false\". Let's see what the filter code looks like.\n\n<div doc-tutorial-reset=\"9\"></div>\n\n\n## Custom Filter\n\nIn order to create a new filter, you are going to create a `phonecatFilters` module and register\nyour custom filter with this module:\n\n__`app/js/filters.js`:__\n\n```js\nangular.module('phonecatFilters', []).filter('checkmark', function() {\n  return function(input) {\n    return input ? '\\u2713' : '\\u2718';\n  };\n});\n```\n\nThe name of our filter is \"checkmark\". The `input` evaluates to either `true` or `false`, and we\nreturn one of the two unicode characters we have chosen to represent true (`\\u2713` -> ✓) or false (`\\u2718` -> ✘).\n\nNow that our filter is ready, we need to register the `phonecatFilters` module as a dependency for\nour main `phonecatApp` module.\n\n__`app/js/app.js`:__\n\n```js\n...\nangular.module('phonecatApp', ['ngRoute','phonecatControllers','phonecatFilters']);\n...\n```\n\n\n## Template\n\nSince the filter code lives in the `app/js/filters.js` file, we need to include this file in our\nlayout template.\n\n__`app/index.html`:__\n\n```html\n...\n <script src=\"js/controllers.js\"></script>\n <script src=\"js/filters.js\"></script>\n...\n```\n\nThe syntax for using filters in Angular templates is as follows:\n\n    {{ expression | filter }}\n\nLet's employ the filter in the phone details template:\n\n\n\n__`app/partials/phone-detail.html`:__\n\n```html\n...\n    <dl>\n      <dt>Infrared</dt>\n      <dd>{{phone.connectivity.infrared | checkmark}}</dd>\n      <dt>GPS</dt>\n      <dd>{{phone.connectivity.gps | checkmark}}</dd>\n    </dl>\n...\n```\n\n\n## Test\n\nFilters, like any other component, should be tested and these tests are very easy to write.\n\n__`test/unit/filtersSpec.js`:__\n\n```js\ndescribe('filter', function() {\n\n  beforeEach(module('phonecatFilters'));\n\n  describe('checkmark', function() {\n\n    it('should convert boolean values to unicode checkmark or cross',\n        inject(function(checkmarkFilter) {\n      expect(checkmarkFilter(true)).toBe('\\u2713');\n      expect(checkmarkFilter(false)).toBe('\\u2718');\n    }));\n  });\n});\n```\n\nWe must call `beforeEach(module('phonecatFilters'))` before any of\nour filter tests execute. This call loads our `phonecatFilters` module into the injector\nfor this test run.\n\nNote that we call the helper function, `inject(function(checkmarkFilter) { ... })`, to get\naccess to the filter that we want to test.  See {@link angular.mock.inject angular.mock.inject()}.\n\nNotice that the suffix 'Filter' is appended to your filter name when injected.\nSee the {@link guide/filter#using-filters-in-controllers-services-and-directives Filter Guide}\nsection where this is outlined.\n\nYou should now see the following output in the Karma tab:\n\n<pre>Chrome 22.0: Executed 4 of 4 SUCCESS (0.034 secs / 0.012 secs)</pre>\n\n\n# Experiments\n\n* Let's experiment with some of the {@link api/ng/filter built-in Angular filters} and add the\nfollowing bindings to `index.html`:\n  * `{{ \"lower cap string\" | uppercase }}`\n  * `{{ {foo: \"bar\", baz: 23} | json }}`\n  * `{{ 1304375948024 | date }}`\n  * `{{ 1304375948024 | date:\"MM/dd/yyyy @ h:mma\" }}`\n\n*  We can also create a model with an input element, and combine it with a filtered binding. Add\n  the following to index.html:\n\n  ```html\n  <input ng-model=\"userInput\"> Uppercased: {{ userInput | uppercase }}\n  ```\n\n\n# Summary\n\nNow that you have learned how to write and test a custom filter, go to {@link step_10 step 10} to\nlearn how we can use Angular to enhance the phone details page further.\n\n\n<ul doc-tutorial-nav=\"9\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_09.ngdoc",
        "module": "9 - Filters",
        "id": "9 - Filters",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "9 - Filters Tutorial.tutorial:9 - Filters downloaded/angular/angular.js-master/docs/content/tutorial/step_09.ngdoc",
        "sortOn": "9",
        "left": 20,
        "level": 1,
        "root": "Tutorial",
        "right": 21
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "10 - Event Handlers",
        "step": "10",
        "description": "\n\n<ul doc-tutorial-nav=\"10\"></ul>\n\n\nIn this step, you will add a clickable phone image swapper to the phone details page.\n\n* The phone details view displays one large image of the current phone and several smaller thumbnail\nimages. It would be great if we could replace the large image with any of the thumbnails just by\nclicking on the desired thumbnail image. Let's have a look at how we can do this with Angular.\n\n<div doc-tutorial-reset=\"10\"></div>\n\n## Controller\n\n__`app/js/controllers.js`:__\n\n```js\n...\nvar phonecatControllers = angular.module('phonecatControllers',[]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams', '$http',\n  function($scope, $routeParams, $http) {\n    $http.get('phones/' + $routeParams.phoneId + '.json').success(function(data) {\n      $scope.phone = data;\n      $scope.mainImageUrl = data.images[0];\n    });\n\n    $scope.setImage = function(imageUrl) {\n      $scope.mainImageUrl = imageUrl;\n    };\n  }]);\n```\n\nIn the `PhoneDetailCtrl` controller, we created the `mainImageUrl` model property and set its\ndefault value to the first phone image URL.\n\nWe also created a `setImage` event handler function that will change the value of `mainImageUrl`.\n\n\n## Template\n\n__`app/partials/phone-detail.html`:__\n\n```html\n<img ng-src=\"{{mainImageUrl}}\" class=\"phone\">\n\n...\n\n<ul class=\"phone-thumbs\">\n  <li ng-repeat=\"img in phone.images\">\n    <img ng-src=\"{{img}}\" ng-click=\"setImage(img)\">\n  </li>\n</ul>\n...\n```\n\nWe bound the `ngSrc` directive of the large image to the `mainImageUrl` property.\n\nWe also registered an {@link ng.directive:ngClick `ngClick`}\nhandler with thumbnail images. When a user clicks on one of the thumbnail images, the handler will\nuse the `setImage` event handler function to change the value of the `mainImageUrl` property to the\nURL of the thumbnail image.\n\n<div style=\"display: none\">\nTODO!\n<img  class=\"diagram\" src=\"img/tutorial/tutorial_10-11_final.png\">\n</div>\n\n## Test\n\nTo verify this new feature, we added two end-to-end tests. One verifies that the main image is set\nto the first phone image by default. The second test clicks on several thumbnail images and\nverifies that the main image changed appropriately.\n\n__`test/e2e/scenarios.js`:__\n\n```js\n...\n  describe('Phone detail view', function() {\n\n...\n\n    it('should display the first phone image as the main phone image', function() {\n      expect(element(by.css('img.phone')).getAttribute('src')).toMatch(/img\\/phones\\/nexus-s.0.jpg/);\n    });\n\n\n    it('should swap main image if a thumbnail image is clicked on', function() {\n      element(by.css('.phone-thumbs li:nth-child(3) img')).click();\n      expect(element(by.css('img.phone')).getAttribute('src')).toMatch(/img\\/phones\\/nexus-s.2.jpg/);\n\n      element(by.css('.phone-thumbs li:nth-child(1) img')).click();\n      expect(element(by.css('img.phone')).getAttribute('src')).toMatch(/img\\/phones\\/nexus-s.0.jpg/);\n    });\n  });\n```\n\nYou can now rerun `npm run protractor` to see the tests run.\n\n\nYou also have to refactor one of your unit tests because of the addition of the `mainImageUrl`\nmodel property to the `PhoneDetailCtrl` controller. Below, we create the function `xyzPhoneData`\nwhich returns the appropriate json with the `images` attribute in order to get the test to pass.\n\n__`test/unit/controllersSpec.js`:__\n\n```js\n...\n  beforeEach(module('phonecatApp'));\n\n...\n\n describe('PhoneDetailCtrl', function(){\n    var scope, $httpBackend, ctrl,\n        xyzPhoneData = function() {\n          return {\n            name: 'phone xyz',\n            images: ['image/url1.png', 'image/url2.png']\n          }\n        };\n\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $routeParams, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond(xyzPhoneData());\n\n      $routeParams.phoneId = 'xyz';\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneDetailCtrl', {$scope: scope});\n    }));\n\n\n    it('should fetch phone detail', function() {\n      expect(scope.phone).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqual(xyzPhoneData());\n    });\n  });\n```\n\nYour unit tests should now be passing.\n\n\n# Experiments\n\n* Let's add a new controller method to `PhoneDetailCtrl`:\n\n          $scope.hello = function(name) {\n              alert('Hello ' + (name || 'world') + '!');\n          }\n\n  and add:\n\n          <button ng-click=\"hello('Elmo')\">Hello</button>\n\n  to the `phone-detail.html` template.\n\n<div style=\"display: none\">\nTODO!\n  The controller methods are inherited between controllers/scopes, so you can use the same snippet\nin the `phone-list.html` template as well.\n\n* Move the `hello` method from `PhoneCatCtrl` to `PhoneListCtrl` and you'll see that the button\ndeclared in `index.html` will stop working, while the one declared in the `phone-list.html`\ntemplate remains operational.\n</div>\n\n\n# Summary\n\nWith the phone image swapper in place, we're ready for {@link step_11 step 11} to\nlearn an even better way to fetch data.\n\n\n<ul doc-tutorial-nav=\"10\"></ul>\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_10.ngdoc",
        "module": "10 - Event Handlers",
        "id": "10 - Event Handlers",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "10 - Event Handlers Tutorial.tutorial:10 - Event Handlers downloaded/angular/angular.js-master/docs/content/tutorial/step_10.ngdoc",
        "sortOn": "10",
        "left": 22,
        "level": 1,
        "root": "Tutorial",
        "right": 23
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "11 - REST and Custom Services",
        "step": "11",
        "description": "\n\n<ul doc-tutorial-nav=\"11\"></ul>\n\n\nIn this step, you will change the way our app fetches data.\n\n* We define a custom service that represents a [RESTful][restful] client. Using this client we\ncan make requests to the server for data in an easier way, without having to deal with the\nlower-level {@link ng.$http $http} API, HTTP methods and URLs.\n\n\n<div doc-tutorial-reset=\"11\"></div>\n\n## Dependencies\n\nThe RESTful functionality is provided by Angular in the `ngResource` module, which is distributed\nseparately from the core Angular framework.\n\nWe are using [Bower][bower] to install client side dependencies.  This step updates the\n`bower.json` configuration file to include the new dependency:\n\n```\n{\n  \"name\": \"angular-seed\",\n  \"description\": \"A starter project for AngularJS\",\n  \"version\": \"0.0.0\",\n  \"homepage\": \"https://github.com/angular/angular-seed\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"dependencies\": {\n    \"angular\": \"~1.3.0\",\n    \"angular-mocks\": \"~1.3.0\",\n    \"bootstrap\": \"~3.1.1\",\n    \"angular-route\": \"~1.3.0\",\n    \"angular-resource\": \"~1.3.0\"\n  }\n}\n```\n\nThe new dependency `\"angular-resource\": \"~1.3.0\"` tells bower to install a version of the\nangular-resource component that is compatible with version 1.3.x.  We must ask bower to download\nand install this dependency. We can do this by running:\n\n```\nnpm install\n```\n\n<div class=\"alert alert-warning\">\n  **Warning:** If a new version of Angular has been released since you last ran `npm install`, then you may have a\n  problem with the `bower install` due to a conflict between the versions of angular.js that need to\n  be installed.  If you get this then simply delete your `app/bower_components` folder before running\n  `npm install`.\n</div>\n\n<div class=\"alert alert-info\">\n  **Note:** If you have bower installed globally then you can run `bower install` but for this project we have\n  preconfigured `npm install` to run bower for us.\n</div>\n\n\n## Template\n\nOur custom resource service will be defined in `app/js/services.js` so we need to include this file\nin our layout template. Additionally, we also need to load the `angular-resource.js` file, which\ncontains the {@link module:ngResource ngResource} module:\n\n__`app/index.html`.__\n\n```html\n...\n  <script src=\"bower_components/angular-resource/angular-resource.js\"></script>\n  <script src=\"js/services.js\"></script>\n...\n```\n\n## Service\n\nWe create our own service to provide access to the phone data on the server:\n\n__`app/js/services.js`.__\n\n```js\nvar phonecatServices = angular.module('phonecatServices', ['ngResource']);\n\nphonecatServices.factory('Phone', ['$resource',\n  function($resource){\n    return $resource('phones/:phoneId.json', {}, {\n      query: {method:'GET', params:{phoneId:'phones'}, isArray:true}\n    });\n  }]);\n```\n\nWe used the module API to register a custom service using a factory function. We passed in the name\nof the service - 'Phone' - and the factory function. The factory function is similar to a\ncontroller's constructor in that both can declare dependencies to be injected via function\narguments. The Phone service declared a dependency on the `$resource` service.\n\nThe {@link ngResource.$resource `$resource`} service makes it easy to create a\n[RESTful][restful] client with just a few lines of code. This client can then be used in our\napplication, instead of the lower-level {@link ng.$http $http} service.\n\n__`app/js/app.js`.__\n\n```js\n...\nangular.module('phonecatApp', ['ngRoute', 'phonecatControllers','phonecatFilters', 'phonecatServices']).\n...\n```\n\nWe need to add the 'phonecatServices' module dependency to 'phonecatApp' module's requires array.\n\n\n## Controller\n\nWe simplified our sub-controllers (`PhoneListCtrl` and `PhoneDetailCtrl`) by factoring out the\nlower-level {@link ng.$http $http} service, replacing it with a new service called\n`Phone`. Angular's {@link ngResource.$resource `$resource`} service is easier to\nuse than `$http` for interacting with data sources exposed as RESTful resources. It is also easier\nnow to understand what the code in our controllers is doing.\n\n__`app/js/controllers.js`.__\n\n```js\nvar phonecatControllers = angular.module('phonecatControllers', []);\n\n...\n\nphonecatControllers.controller('PhoneListCtrl', ['$scope', 'Phone', function($scope, Phone) {\n  $scope.phones = Phone.query();\n  $scope.orderProp = 'age';\n}]);\n\nphonecatControllers.controller('PhoneDetailCtrl', ['$scope', '$routeParams', 'Phone', function($scope, $routeParams, Phone) {\n  $scope.phone = Phone.get({phoneId: $routeParams.phoneId}, function(phone) {\n    $scope.mainImageUrl = phone.images[0];\n  });\n\n  $scope.setImage = function(imageUrl) {\n    $scope.mainImageUrl = imageUrl;\n  }\n}]);\n```\n\nNotice how in `PhoneListCtrl` we replaced:\n\n    $http.get('phones/phones.json').success(function(data) {\n      $scope.phones = data;\n    });\n\nwith:\n\n    $scope.phones = Phone.query();\n\nThis is a simple statement that we want to query for all phones.\n\nAn important thing to notice in the code above is that we don't pass any callback functions when\ninvoking methods of our Phone service. Although it looks as if the result were returned\nsynchronously, that is not the case at all. What is returned synchronously is a \"future\" — an\nobject, which will be filled with data when the XHR response returns. Because of the data-binding\nin Angular, we can use this future and bind it to our template. Then, when the data arrives, the\nview will automatically update.\n\nSometimes, relying on the future object and data-binding alone is not sufficient to do everything\nwe require, so in these cases, we can add a callback to process the server response. The\n`PhoneDetailCtrl` controller illustrates this by setting the `mainImageUrl` in a callback.\n\n\n## Test\n\nBecause we're now using the {@link ngResource ngResource} module, it's necessary to\nupdate the Karma config file with angular-resource so the new tests will pass.\n\n__`test/karma.conf.js`:__\n\n```js\n    files : [\n      'app/bower_components/angular/angular.js',\n      'app/bower_components/angular-route/angular-route.js',\n      'app/bower_components/angular-resource/angular-resource.js',\n      'app/bower_components/angular-mocks/angular-mocks.js',\n      'app/js/**/*.js',\n      'test/unit/**/*.js'\n    ],\n```\n\nWe have modified our unit tests to verify that our new service is issuing HTTP requests and\nprocessing them as expected. The tests also check that our controllers are interacting with the\nservice correctly.\n\nThe {@link ngResource.$resource $resource} service augments the response object\nwith methods for updating and deleting the resource. If we were to use the standard `toEqual`\nmatcher, our tests would fail because the test values would not match the responses exactly. To\nsolve the problem, we use a newly-defined `toEqualData` [Jasmine matcher][jasmine-matchers]. When\nthe `toEqualData` matcher compares two objects, it takes only object properties into account and\nignores methods.\n\n__`test/unit/controllersSpec.js`:__\n\n\n```js\ndescribe('PhoneCat controllers', function() {\n\n  beforeEach(function(){\n    this.addMatchers({\n      toEqualData: function(expected) {\n        return angular.equals(this.actual, expected);\n      }\n    });\n  });\n\n  beforeEach(module('phonecatApp'));\n  beforeEach(module('phonecatServices'));\n\n\n  describe('PhoneListCtrl', function(){\n    var scope, ctrl, $httpBackend;\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/phones.json').\n          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);\n\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneListCtrl', {$scope: scope});\n    }));\n\n\n    it('should create \"phones\" model with 2 phones fetched from xhr', function() {\n      expect(scope.phones).toEqualData([]);\n      $httpBackend.flush();\n\n      expect(scope.phones).toEqualData(\n          [{name: 'Nexus S'}, {name: 'Motorola DROID'}]);\n    });\n\n\n    it('should set the default value of orderProp model', function() {\n      expect(scope.orderProp).toBe('age');\n    });\n  });\n\n\n  describe('PhoneDetailCtrl', function(){\n    var scope, $httpBackend, ctrl,\n        xyzPhoneData = function() {\n          return {\n            name: 'phone xyz',\n            images: ['image/url1.png', 'image/url2.png']\n          }\n        };\n\n\n    beforeEach(inject(function(_$httpBackend_, $rootScope, $routeParams, $controller) {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond(xyzPhoneData());\n\n      $routeParams.phoneId = 'xyz';\n      scope = $rootScope.$new();\n      ctrl = $controller('PhoneDetailCtrl', {$scope: scope});\n    }));\n\n\n    it('should fetch phone detail', function() {\n      expect(scope.phone).toEqualData({});\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqualData(xyzPhoneData());\n    });\n  });\n});\n```\n\nYou should now see the following output in the Karma tab:\n\n<pre>Chrome 22.0: Executed 5 of 5 SUCCESS (0.038 secs / 0.01 secs)</pre>\n\n\n# Summary\n\nNow that we've seen how to build a custom service as a RESTful client, we're ready for {@link step_12 step 12} (the last step!) to\nlearn how to improve this application with animations.\n\n\n<ul doc-tutorial-nav=\"11\"></ul>\n\n[restful]: http://en.wikipedia.org/wiki/Representational_State_Transfer\n[jasmine-matchers]: http://jasmine.github.io/1.3/introduction.html#section-Matchers\n[bower]: http://bower.io/\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/step_11.ngdoc",
        "module": "11 - REST and Custom Services",
        "id": "11 - REST and Custom Services",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "11 - REST and Custom Services Tutorial.tutorial:11 - REST and Custom Services downloaded/angular/angular.js-master/docs/content/tutorial/step_11.ngdoc",
        "sortOn": "11",
        "left": 24,
        "level": 1,
        "root": "Tutorial",
        "right": 25
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "tutorial",
        "name": "The End",
        "step": "99",
        "description": "\n\nOur application is now complete. Feel free to experiment with the code further, and jump back to\nprevious steps using the `git checkout` command.\n\nFor more details and examples of the Angular concepts we touched on in this tutorial, see the\n{@link guide/ Developer Guide}.\n\nWhen you are ready to start developing a project using Angular, we recommend that you bootstrap\nyour development with the [angular-seed](https://github.com/angular/angular-seed) project.\n\nWe hope this tutorial was useful to you and that you learned enough about Angular to make you want\nto learn more. We especially hope you are inspired to go out and develop Angular web apps of your\nown, and that you might be interested in {@link misc/contribute contributing} to Angular.\n\nIf you have questions or feedback or just want to say \"hi\", please post a message at (https://groups.google.com/forum/#!forum/angular).\n",
        "parentDoc": {
            "module": "Tutorial",
            "type": "tutorial"
        },
        "file": "downloaded/angular/angular.js-master/docs/content/tutorial/the_end.ngdoc",
        "module": "The End",
        "id": "The End",
        "path": "angular/tutorial",
        "groupId": 8,
        "type": "tutorial",
        "handler": "ngdoc",
        "search": "The End Tutorial.tutorial:The End downloaded/angular/angular.js-master/docs/content/tutorial/the_end.ngdoc",
        "sortOn": "99",
        "left": 26,
        "level": 1,
        "root": "Tutorial",
        "right": 27
    },
    {
        "name": "ng.$q",
        "groupId": 5,
        "path": "angular/api",
        "module": "ng.$q",
        "id": "ng.$q",
        "handler": "ngdoc",
        "sortOn": "ng.$q",
        "search": "ng.$q",
        "left": 1,
        "level": 0,
        "root": "ng.$q",
        "right": 4
    },
    {
        "params": [],
        "docType": "ngdoc",
        "ngdoc": "method",
        "name": "defer",
        "kind": "function",
        "description": "Creates a `Deferred` object which represents a task which will finish in the future.",
        "returns": "{Deferred} Returns a new instance of deferred.",
        "parentDoc": {
            "module": "ng",
            "name": "ng.$q"
        },
        "file": "downloaded/angular/angular.js-master/src/ng/q.js",
        "module": "ng",
        "id": "defer",
        "path": "angular/api",
        "groupId": 5,
        "type": "method",
        "handler": "ngdoc",
        "search": "defer ng.method:defer downloaded/angular/angular.js-master/src/ng/q.js",
        "sortOn": "defer",
        "left": 2,
        "level": 1,
        "root": "ng.$q",
        "right": 3
    }
]