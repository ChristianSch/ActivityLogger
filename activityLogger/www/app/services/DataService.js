'use-strict';
angular.module('ActivityLogger').factory('DataService',
    function ($firebase, FIREBASE_URL, $timeout, $q, $ionicPopup, $state, User, Activity, Competition) {

        var rootRef = new Firebase(FIREBASE_URL);
        var usersRef = rootRef.child('users');
        var all_Users_activitiesRef = rootRef.child('all_Users_activities');
        var competitionsRef = rootRef.child('competitions');

        // AngularFire wrapper
        var usersRefAngular = $firebase(usersRef);
        var all_Users_activitiesRefAngular = $firebase(all_Users_activitiesRef);
        var competitionsRefAngular = $firebase(competitionsRef);


//Private method
        /**
         * get usersdata stored in local
         * @return Object of usersdata|empty array if user has no profil
         */
        function getUserLocal() {
            var leer = new User("", "", "", "", "", "", "");
            var user = localStorage.getItem('user');
            return user ? JSON.parse(user) : leer;
        }

        /**
         * get all activities of a user saved in local
         * @return {Object of activities saved local|empty array if no activty *}
         */
        function getAllActivitiesLocal() {
            var leer = [];
            var activities = localStorage.getItem('activities');
            return activities ? JSON.parse(activities) : leer;
        }


        function getAllCompetitions_firebase() {
            return competitionsRefAngular.$asArray();
        }

        function getAllActivities_firebase() {
            return all_Users_activitiesRefAngular.$asArray();
        }

        function saveUserId_Local(user) {
            var deferred = $q.defer();
            deferred.resolve("");
            var timer = $timeout(function () {
                var users = getAllUsers();
                var f_user;

                for (var i = 0; i < users.length; i++) {
                    f_user = users[i];
                    if (equal(f_user, user)) {
                        localStorage.setItem('userId', f_user.$id);//Store usersid that was generated by firebase
                        deferred.resolve(f_user.$id);
                        break;
                    }
                }
            }, 4 * 60); //wait 4 seconds
            if (timer) {
                return deferred.promise;
            }
        }

        function saveCurrActivity_Id_Local(activity) {
            var deferred = $q.defer();
            var timer = $timeout(function () {
                var activities = getAllActivities_firebase();
                var f_activity;
                for (var i = 0; i < activities.length; i++) {
                    f_activity = activities[i];
                    if (activity_equal(f_activity, activity)) {
                        localStorage.setItem('currActivityId', f_activity.$id);//Store usersid that was generated by firebase
                        deferred.resolve(f_activity.$id);
                        break;

                    }
                }
            }, 4 * 60); //wait 4 seconds
            if (timer) {
                return deferred.promise;
            }
        }

        /**
         * collect and save local AllActivities by user id.
         * @param user_id: firebase user id !
         */
        function saveAllActivities(user_id,all_user_activities) {
            //TODO: timer for firebse
            var all_activitiesByUserID = [];
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            if (user_id && firebaseConnected) {
               // var all_user_activities = getAllActivities_firebase();
             //   var timer = $timeout(function () {
                    for (var i = 0; i < all_user_activities.length; i++) {
                        var activity = all_user_activities[i];
                        if (activity.userId) {
                            if ((activity.userId) == (user_id)) {
                                all_activitiesByUserID.push(activity);
                            }
                        }
                    }
                    localStorage.setItem('activities_CurrUser', JSON.stringify(all_activitiesByUserID));//Store usersid that was generated by firebase
               // }, 4 * 60)
            }
        }

        function activity_equal(activiy_1, activity_2) {
            var currActId = parseInt(localStorage.getItem('nextActivityId')) - 1;
            return (activiy_1.userId == activity_2.userId) && (activiy_1.id == activity_2.id) && (currActId == activiy_1.id);
        }

        function equal(user1, user2) {
            return user1.id == user2.id;
        }

        /**
         * get ActivityÂ´s Firebase Id
         * @param userId
         * @param id: local Activit's Id
         * @return {Activitys id in Firebase local }
         */

        function getActivity_FirebaseId(userId, id) {
            var allfirebaseActty = getAllActivities_firebase();
            for (var i = 0; i < allfirebaseActty.length; i++) {
                var f_activty = allfirebaseActty[i];
                if ((f_activty.userId == userId) && (f_activty.id == id)) {
                    return f_activty.$id;
                }
            }
            return id;
        }


        /**
         *
         * @param curr_userId: id of the current user.
         * @param id: local competition id
         * @return competitions id in Firebase or local
         */
        function getCompetition_FirebaseId(curr_userId, id) {
            var competitions = getAllCompetitions_firebase();
            for (var i = 0; i < competitions.length; i++) {
                var competition = competitions[i];
                if (((competition.user_id1 == curr_userId) || (competition.user_id2 == curr_userId)) && (competition.id == id)) {
                    return competition.$id;
                }
            }
            return id;
        }

        /**
         * get Firebase Users Id
         * @param id: usersname !!
         * @return users id in Firebase or usersname
         */
        function getUser_FirebaseId(id) {
            var users = getAllUsers();
            for (var i = 0; i < users.length; i++) {
                var f_user = users[i];
                if (f_user.id == id) {
                    return f_user.$id;
                }
            }
            return id;
        }

        function showErrorMess(mess) {
            $ionicPopup.alert({
                title: 'Error',
                template: mess,
                buttons: [{
                    text: 'Close',
                    type: 'button-positive'
                }]
            });
            return;
        }

//Public method
        /*************************Users*******************************************/
        /**
         * get all Users stored in firebase
         * @return {*}
         */
        function getAllUsers() {
            return usersRefAngular.$asArray();
        }

        /**
         *  add and store user only local or local and in firebase
         * @param user
         * @return promise object with current users id or message if Usersname already exist
         */
        function addUser(user) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var userId = localStorage.getItem('userId');
            var user = new User(user.id, user.firstname, user.surname, user.gender, user.birthday, user.weight, user.size);
            var deferred = $q.defer();
            if ((firebaseConnected) && (!userId)) {  //Add User on firebase if not have been.
                var users = getAllUsers();
                var timer = $timeout(function () {
                    var hasUser = false;
                    for (var i = 0; i < users.length; i++) {
                        var userf = users[i];
                        if (userf.id === user.id) {
                            hasUser = true;
                            break;
                        }
                    }
                    if (hasUser) {
                        deferred.reject('username already assigned. Plaese choose another');
                    } else {
                        getAllUsers().$add(user);

                        saveUserId_Local(user).then(function (currUsrId) {
                            showMessage("in firebase saved");
                            deferred.resolve(currUsrId);
                        });
                    }
                }, 8 * 60)
                if (timer) {
                    return deferred.promise;
                }

            } else {
                localStorage.setItem('user', JSON.stringify(user));
                if (!userId) {
                    showMessage("local saved");
                    return deferred.promise;
                }
            }

        }

        /**
         * update user only local or local and in firebase
         * @param user
         * show exception message if a firebase registered users want to update his profil but now he is not connecting.
         */
        function updateUser(user) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var userId = localStorage.getItem('userId');

            if (firebaseConnected && userId) {
                getAllUsers().$save(user);
                showMessage("Change saved");
                localStorage.setItem('user', JSON.stringify(user));
            } else {
                if (!userId) {//Profil local update if have not been added in firebase
                    localStorage.setItem('user', JSON.stringify(user));
                } else {//firebaseConnected==false
                    showErrorMess("You have to connect to Firebase to change your profile");
                }
                if (firebaseConnected && !userId) {
                    addUser(user);  //kann happen when usersname already used and user decide to change it.
                }
            }
        }

        /**
         *  get user by id stored local or in firebase
         * @param id: usersid
         * @return user| null if the id is not found
         */
        function getUserByID(id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            if ((id && id != "") && firebaseConnected) {
                return getAllUsers().$getRecord(id);
            } else {
                return getUserLocal();
            }
        }

        /**
         * get id of the current user
         * @return user id| null if id not exist
         */
        function getCurrentUserId() {
            var userId = localStorage.getItem('userId');
            return userId ? userId : "";
        }

        /**
         * find and save current users id local.
         * @param id: users name !
         * @return promise object with current users id.
         */
        function setCurrentUserId(id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var deferred = $q.defer();
            if (firebaseConnected) {
                var users = getAllUsers();
                var all_user_activities = getAllActivities_firebase();
                var timer = $timeout(function () {
                    var f_user;
                    var find = false;
                    for (var i = 0; i < users.length; i++) {
                        f_user = users[i];
                        if (f_user.id === id) {
                            localStorage.setItem('userId', f_user.$id);//Store usersid that was generated by firebase
                            deferred.resolve(f_user.$id);
                            saveAllActivities(f_user.$id,all_user_activities); //collect and save usersid local.
                            find = true;
                            showMessage("Ok");
                            break;
                        }
                    }
                    if (!find) {
                        deferred.reject('Usersname not found! try again');
                        localStorage.removeItem('userId');
                    }
                }, 8* 60);
                if(timer){
                    return deferred.promise;
                }
            }
            else {
                deferred.reject('you are not with Firebase connected ! See Settings');
                return deferred.promise;
            }


        }

        /**
         * remove user from firebase
         * @param id
         */
        function removeUser(id) {
            getAllUsers().$remove(getUserByID(id));
        }

        /************************************Activities*******************************************/

        /**
         * Add and store activity Activity only local or in firebase.
         * @param activity
         * @return promise object with current Activity id.
         *
         */
        function addActivity(activity) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var activities = getAllActivitiesLocal();
            var nexid = localStorage.getItem('nextActivityId');
            var _activity;

            var deferred = $q.defer();

            if (!nexid) {
                nexid = 1;
            } else {
                nexid = parseInt(nexid);
            }
            if (firebaseConnected) {
                var userId = localStorage.getItem('userId');
                if (userId) {
                    _activity = new Activity(nexid, activity.type, activity.start_time, activity.end_time, activity.track_data, activity.comment, activity.distance, userId);
                    getAllActivities_firebase().$add(_activity);

                    var activities_CurrUser = localStorage.getItem('activities_CurrUser');
                    activities_CurrUser = activities_CurrUser ? JSON.parse(activities_CurrUser) : [];
                    activities_CurrUser.push(_activity);
                    localStorage.setItem('activities_CurrUser', JSON.stringify(activities_CurrUser));
                    localStorage.setItem('nextActivityId', parseInt(nexid) + 1);

                    saveCurrActivity_Id_Local(activity).then(function (currActId) {
                        deferred.resolve(currActId);
                    });


                    //TODO: online nicht auch local speichert! OK
                    /*activities.push(_activity);
                     localStorage.setItem('activities', JSON.stringify(activities));
                     */
                    showMessage("Activity stored on firebase")
                } else {
                    // to firebase connectect and don't have a Profil-> canÂ´t add Activities
                    showErrorMess("You are with Firebase connected. Log in or create a profile to save your activity. See Profile");
                }
            } else {
                _activity = new Activity(nexid, activity.type, activity.start_time, activity.end_time, activity.track_data, activity.comment, activity.distance, "");
                activities.push(_activity);
                deferred.resolve(nexid);
                localStorage.setItem('activities', JSON.stringify(activities));
                localStorage.setItem('nextActivityId', parseInt(nexid) + 1);

                showMessage("Activity local stored");
            }
            return deferred.promise;
        }

        function showMessage(mess) {
            var myPopup = $ionicPopup.show({
                //  title: mess,
                buttons: [{
                    text: mess,
                    type: 'button-positive'
                }]
            })
            $timeout(function () {
                myPopup.close(); //close the popup after 3 seconds for some reason
            }, 2000);
        }


        /**
         * get all activities of a user
         * @param user_id: firebase user id
         * @return { Array of all usersactivties|empty array}
         */
        function getAllActivities(user_id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            if (user_id && firebaseConnected) {
                return JSON.parse(localStorage.getItem('activities_CurrUser'));
            } else {
                return getAllActivitiesLocal();
            }
        }

        /**
         * update activity only local or local and in firebase
         * @param activity
         */
        function updateActivity(activity) {

            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            if (firebaseConnected) {

                getAllActivities_firebase().$save(activity);
                //update local List of activties saved on firebase (activities_firebase)
                var activities_CurrUser = localStorage.getItem('activities_CurrUser'); // Activities saved on firebase.
                if (activities_CurrUser) {
                    activities_CurrUser = JSON.parse(activities_CurrUser);
                    for (var i = 0; i < activities_CurrUser.length; i++) {
                        var _activity = activities[i];
                        if ((_activity.id == activity.id)) {
                            activities_CurrUser.splice(i, 1);
                            activities_CurrUser.push(activity);
                            localStorage.setItem('activities_CurrUser', JSON.stringify(activities_CurrUser));
                            break;
                        }
                    }
                }

            } else {
                var activities = getAllActivitiesLocal();
                for (var i = 0; i < activities.length; i++) {
                    var _activity = activities[i];
                    if ((_activity.id == activity.id)) {
                        activities.splice(i, 1);
                        activities.push(activity);
                        localStorage.setItem('activities', JSON.stringify(activities));
                        break;
                    }
                }
            }
        }

        /**
         * get activity by id
         * @param id: id of activity local. If firebase connected, it will be converted to activtysid in firebase
         * @return activty by id|null if the id is not found
         */
        function getActivityByID(id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var cur_userId = getCurrentUserId();
            var f_id = getActivity_FirebaseId(cur_userId, id);
            var activityInFirebaseSaved = f_id != id;
            if (firebaseConnected && cur_userId || activityInFirebaseSaved) {
                return getAllActivities_firebase().$getRecord(f_id);
            } else {
                var activities = getAllActivitiesLocal();
                for (var i = 0; i < activities.length; i++) {
                    var activity = activities[i];
                    if (activity.id == id) {
                        return activity;
                    }
                }
                return new Activity("", "", "", "", "", "", "", "");
            }
        }

        /**
         * remove a activty by id only local or local and from firebase.
         * @param id
         */
        function removeActivity(id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var activities = getAllActivitiesLocal();
            var userId = localStorage.getItem('userId');

            if (firebaseConnected) {
                getAllActivities_firebase().$remove(getActivityByID(id));
                var activities_CurrUser = localStorage.getItem('activities_CurrUser'); // Activities saved on firebase.
                if (activities_CurrUser) {
                    activities_CurrUser = JSON.parse(activities_CurrUser);
                    for (var i = 0; i < activities_CurrUser.length; i++) {
                        var activity_f = activities_CurrUser[i];
                        if ((activity_f.id == id)) {
                            activities_CurrUser.splice(i, 1);
                            localStorage.setItem('activities_CurrUser', JSON.stringify(activities_CurrUser));
                            break;
                        }
                    }
                }
            } else {
                for (var i = 0; i < activities.length; i++) {
                    var activity = activities[i];
                    if (activity.id == id) {
                        activities.splice(i, 1);
                        localStorage.setItem('activities', JSON.stringify(activities));
                        break;
                    }
                }
            }
        }

        /**
         * remove all activties by usersid
         * @param user_Id: usersid
         */
        function removeAllActivities(user_Id) {
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            localStorage.removeItem('activities');
            if (firebaseConnected) {
                getAllActivities_firebase(user_Id).$remove();
            }
        }

        /*******************************competition********************************************/
        /**
         * Add a competition
         * @param competition
         * @throws exception if user is not registered
         */
        function addCompetition(competition) {
            var nexCompetitionId = localStorage.getItem('nexCompetitionId');

            if (!nexCompetitionId) {
                nexCompetitionId = 1;
            } else {
                nexCompetitionId = parseInt(nexCompetitionId);
            }
            var firebaseConnected = localStorage.getItem('firebaseConection') == 'true';
            var userId = getCurrentUserId();

            if (firebaseConnected && userId) {
                var user_id1 = getUser_FirebaseId(competition.user_id1);
                var user_id2 = getUser_FirebaseId(competition.user_id2);
                var competition = new Competition(nexCompetitionId, user_id1, user_id2, competition.activity_id1, competition.activity_id2, competition.distance);
                getAllCompetitions_firebase().$add(competition);
                localStorage.setItem('nexCompetitionId', nexCompetitionId + 1);

            } else {
                showErrorMess("log in or create a profile on Firebase to create a competition.");
            }
        }

        /**
         * remove competition by id
         * @param id: competitions id
         */
        function removeCompetition(id) {
            getAllCompetitions_firebase().$remove(getCompetitionByID(id));
        }

        /**
         * get competition by id
         * @param id competitions id
         * @return {Object|null if theid is not found*}getCompetition_FirebaseId
         */
        function getCompetitionByID(id) {
            id = getCompetition_FirebaseId();
            return getAllCompetitions_firebase().$getRecord(id);
        }

        /**
         * get all competions of user by user_id
         * @param user_id. usersid
         * @return {Object|null if the id is not found*}
         */
        function getAllCompetitions(user_id) {
            return getAllCompetitions_firebase().$getRecord(user_id);
        }


        var service = {
            //User
            getAllUsers: getAllUsers,
            addUser: addUser,
            updateUser: updateUser,
            getUserByID: getUserByID,
            removeUser: removeUser,
            getCurrentUserId: getCurrentUserId,
            setCurrentUserId: setCurrentUserId,
            //Activities
            getAllActivities: getAllActivities,
            getActivityByID: getActivityByID,
            addActivity: addActivity,
            updateActivity: updateActivity,
            removeActivity: removeActivity,
            //competition
            getAllCompetitions: getAllCompetitions,
            getCompetitionByID: getCompetitionByID,
            addCompetition: addCompetition,
            removeCompetition: removeCompetition

        };
        return service;

    }
)
;